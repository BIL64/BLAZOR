@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Både studenter och lärare har åtkomst hit*@

<AuthorizeView Roles ="Student, Teacher">
    <Authorized>
        <div class="toast-container p-3 position-relative @showClass" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" style="width: 360px">
                <div class="toast-header">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>
                <div class="toast-body">
                    <button type="button" class="text-white remnot" @onclick="Proceed">YES</button>
                    <button type="button" class="text-white remnot" @onclick="Close">NO</button>
                </div>
                <div class="@classProceed">
                    <EditForm Model="@xClient" Context="deletealllmslexnet" OnSubmit="HandleSubmitDeleteAll">
                        <div class="form-group m-3">
                            <label for="Date">Enter today's date (yyyy-mm-dd)</label>
                            <InputText id="Date" class="form-control" @bind-Value="Tdate" title="Today's date" />
                        </div>
                        <div class="form-group m-3">
                            <button type="submit" class="text-white remyes" title="Remove all documents and messages from the system">DELETE NOW</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";

    public string classProceed = "d-none";
    public string Tdate = string.Empty;

    public void Show()
    {
        xnav.SetReset('a');

        HeaderText = "Remove all non-mandatory docs and mess....";
        classProceed = "d-none";
        showClass = "d-block";
        StateHasChanged();
    }

    private void Proceed()
    {
        classProceed = "d-block";
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task HandleSubmitDeleteAll()
    {
        bool FindDoc = false;

        if (DateTime.Now.ToString().Substring(0, 10) == Tdate)
        {
            var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");

            if (document is not null)
            {
                foreach (var doc in document)
                {
                    if (doc.ActivityId == Auxx.IntId && doc.Id4Course == 0)
                    {
                        await xClient.RemAsync(doc.Id, "api/Document");
                        await xClient.DeleteFile(doc.NameIx.ToString() + doc.DocName);
                        FindDoc = true;
                    }
                }
            }

            if (FindDoc)
            {
                HeaderText = string.Empty;
                showClass = "d-none";
                StateHasChanged();
                xnav.SetDone("All non-mandatory documents and messages were deleted.");
                xnav.SetReset('d');
                Auxx.Flag = true;
            }
            else
            {
                xnav.SetDone("No documents or messages could be found.");
                xnav.SetReset('d');
            }

        }
        else
        {
            xnav.SetError("The date was incorrect.");
            xnav.SetReset('e');
        }
    }
}