@inject ILogger<CourseDetail> Logger
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Både studenter och lärare har åtkomst hit*@

<AuthorizeView Roles ="Student, Teacher">
    <Authorized>
        <div class="toast-container p-3 @showClass" @onmouseup="MouseUp" @onmousedown="MouseDown" @onmousemove="MouseMove" @onmouseout="MouseOut"
             style="position: fixed; top: auto; bottom: @(Pos_V)px; margin-left: @(Pos_H)px; z-index: 5" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show bg-white" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="toast-body">         
                    <div style="font-size: 0.9rem; font-weight: bold">@document.DocName</div>
                    <div class="m-3">@document.Description</div>
                    <div class="m-3">By: @document.Author</div>
                    <div class="m-3">Created: @document.TimeStamp</div>
                    <div class="m-3">
                        <button type="button" class="@classDelete" @onclick="DeleteFile" title="Remove this file from the system">Delete file</button>
                    </div>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    public string HeaderText = string.Empty;
    private string showClass = "d-none";

    private int Win_Width;
    private int Win_Height;
    private int Diff_X;
    private int Diff_Y;
    private int Pos_H;
    private int Pos_V;
    private bool IsDown = false;

    private DocumentDto document = new();

    private string classDelete = string.Empty;

    public async Task Show()
    {
        xnav.SetReset('a');

        await GetWindowSize(); // Hämtar aktuell skärmstorlek.
        Pos_H = (int)Math.Round(Win_Width * 0.08); // 08%
        Pos_V = (int)Math.Round(Win_Height * 0.5); // 50%

        HeaderText = "Your document file...";

        if (Auxx.Flag) classDelete = "text-white remyes";
        else classDelete = "d-none";

        foreach (var doc in Auxx.Documents)
        {
            if (doc.Id == Auxx.IntId)
            {
                document.Id = doc.Id;
                document.NameIx = doc.NameIx;
                document.DocName = doc.DocName;
                document.Description = doc.Description;
                document.Author = doc.Author;
                document.TimeStamp = doc.TimeStamp;
            }
        }
        Auxx.Flag = false;
        showClass = "d-block";
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task DeleteFile()
    {
        await xClient.RemAsync(document.Id, "api/Document");
        await xClient.DeleteFile(document.NameIx + document.DocName);
        xnav.SetDone("xnavdone", "This document file was deleted.");
        xnav.SetReset('d');
        Auxx.Flag = true;
        Close();
    }

    private async Task GetWindowSize() // Hämtar skärmstorlek.
    {
        var dim = await xClient.GetWindow();
        Win_Width = dim.Width;
        Win_Height = dim.Height;
    }

    private void MouseUp(MouseEventArgs e) // Moveable Toaster.
    {
        IsDown = false; // När man släpper musknappen.
    }

    private void MouseDown(MouseEventArgs e) // Moveable Toaster.
    {
        if (!IsDown) // Skillnaden mellan muspekarens position och css-värdet av objektet.
        {
            Diff_X = (int)e.ClientX - Pos_H;
            Diff_Y = Win_Height - (Pos_V + (int)e.ClientY);
            IsDown = true;
        }
    }

    private void MouseMove(MouseEventArgs e) // Moveable Toaster.
    {
        if (IsDown) // Flyttar objektet synkront i musens riktning.
        {
            if ((int)e.ClientX - Diff_X > 0) Pos_H = (int)e.ClientX - Diff_X; else Pos_H = 0;
            if (Win_Height - ((int)e.ClientY + Diff_Y) > 0) Pos_V = Win_Height - ((int)e.ClientY + Diff_Y); else Pos_V = 0;
        }
    }

    private void MouseOut(MouseEventArgs e) // Förhindrar att muspekaren släpper objektet vid hastiga musrörelser.
    {
        if (IsDown) // Flyttar objektet synkront i musens riktning.
        {
            if ((int)e.ClientX - Diff_X > 0) Pos_H = (int)e.ClientX - Diff_X; else Pos_H = 0;
            if (Win_Height - ((int)e.ClientY + Diff_Y) > 0) Pos_V = Win_Height - ((int)e.ClientY + Diff_Y); else Pos_V = 0;
        }
    }
}