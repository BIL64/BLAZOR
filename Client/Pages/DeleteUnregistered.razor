@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<AuthorizeView Roles ="Teacher">
    <Authorized>
        <div class="toast-container p-3 @showClass" @onmouseup="MouseUp" @onmousedown="MouseDown" @onmousemove="MouseMove" @onmouseout="MouseOut"
             style="position: fixed; top: auto; bottom: @(Pos_V)px; margin-left: @(Pos_H)px; z-index: 5" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show bg-white" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="toast-body">
                    <button type="button" class="text-white remyes" @onclick="DeleteNow" title="Remove this user from the system">DELETE NOW</button>
                    <button type="button" class="text-white remnot" @onclick="Close">NO</button>
                    <button type="button" class="text-white remnot" @onclick="Redirect" title="Make this visitor to a teacher...">To teacher!</button>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";

    private int Win_Width;
    private int Win_Height;
    private int Diff_X;
    private int Diff_Y;
    private int Pos_H;
    private int Pos_V;
    private bool IsDown = false;

    public async Task Show()
    {
        xnav.SetReset('a');

        await GetWindowSize(); // Hämtar aktuell skärmstorlek.
        Pos_H = (int)Math.Round(Win_Width * 0.08); // 08%
        Pos_V = (int)Math.Round(Win_Height * 0.5); // 50%

        showClass = "d-none";
        StateHasChanged();
        await Task.Delay(200);
        HeaderText = "Remove this user...";
        showClass = "d-block";
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task DeleteNow()
    {
        xnav.SetDone("xnavdone", "This unregistered visitor was deleted.");
        xnav.SetReset('d');

        await appuserClient.RemAsync(Auxx.GuidId);
        Auxx.Flag = true;
        Close();
    }

    private async Task Redirect()
    {
        xnav.SetDone("xnavdone", "This unregistered visitors was redirected to a teacher.");
        xnav.SetReset('d');

        await appuserClient.PreAsync(Auxx.GuidId, 12);
        Auxx.Flag = true;
        Close();
    }

    private async Task GetWindowSize() // Hämtar skärmstorlek.
    {
        var dim = await xClient.GetWindow();
        Win_Width = dim.Width;
        Win_Height = dim.Height;
    }

    private void MouseUp() // Moveable Toaster.
    {
        IsDown = false; // När man släpper musknappen.
    }

    private void MouseDown(MouseEventArgs e) // Moveable Toaster.
    {
        if (!IsDown) // Skillnaden mellan muspekarens position och css-värdet av objektet.
        {
            Diff_X = (int)e.ClientX - Pos_H;
            Diff_Y = Win_Height - (Pos_V + (int)e.ClientY);
            IsDown = true;
        }
    }

    private void MouseMove(MouseEventArgs e) // Moveable Toaster.
    {
        if (IsDown) // Flyttar objektet asynkront i musens riktning.
        {
            if ((int)e.ClientX - Diff_X > 0) Pos_H = (int)e.ClientX - Diff_X; else Pos_H = 0;
            if (Win_Height - ((int)e.ClientY + Diff_Y) > 0) Pos_V = Win_Height - ((int)e.ClientY + Diff_Y); else Pos_V = 0;
        }
    }

    private void MouseOut(MouseEventArgs e) // Förhindrar att muspekaren släpper objektet vid hastiga musrörelser.
    {
        MouseMove(e); // Samma algoritm såsom MouseMove gäller även här.
    }
}