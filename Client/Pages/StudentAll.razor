@page "/studentall"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Både studenter och lärare har åtkomst hit*@

<PageTitle>Student all</PageTitle>

<AuthorizeView Roles="Student, Teacher">
    <Authorized>
<h4>@Emptydb</h4>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Student</th>
                <th>Email</th>
                <th>Phone number</th>
                <th>Course</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in students)
            {
                <tr style="color: darkblue">                    
                    <td>@data.FirstName @data.LastName</td>
                    <td>@data.Email</td>
                    <td>@data.PhoneNumber</td>
                    <td>
                        @foreach (var item in courses) // Hämtar kursen som motsvarar dess id.
                        {
                            if (item.Id == data.CourseId)
                            {
                                IsCourse = true;
                                <span>@item.Name</span>
                            }
                        }
                        @if (!IsCourse)
                        {
                            <span>No course yet...</span>
                        }
                        @{IsCourse = false;}
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
</Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private List<AppUserDto> students = new();

    private List<CourseDto> courses = new();

    private AppUserDto loggeduser = new(); // Info om den som för tillfället är inloggad.

    private string Emptydb = "List of students";

    private bool IsCourse;

    protected override async Task OnInitializedAsync()
    {
        xnav.SetDone("hide", "");
        xnav.SetError("hide", "");

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.

        var appuser = await appuserClient.GetAsync();

        if (appuser is not null && name is not null)
        {
            foreach (var item in appuser) // Hämtar den som för tillfället är inloggad.
            {
                if (item.Email == name) loggeduser = item;
            }

            foreach (var item in appuser)
            {
                // Filtrerar ut studenter knutna till den kurs som är samma som den som för tillfället är inloggad.
                if (item.UserRole == 1 && item.CourseId == loggeduser.CourseId) students.Add(item);
            }
            if (students.Count < 1) Emptydb = "No students !";
        }
        else
        {
            Emptydb = "No students !";
        }

        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");

        if (course is not null)
        {
            courses = course.ToList();
        }
    }
}
