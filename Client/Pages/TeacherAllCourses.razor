@page "/teacherallcourses"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppUserDtoClient appuserClient
@inject NavigationManager Navigation
@inject IXDtoClient xClient
@inject XLangTeacher xtea
@inject XLangToast xtoa
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Teacher all courses</PageTitle>

<AuthorizeView Roles="Teacher">
    <Authorized>
        <nav style="display: flex">
            <div style="width: 75%"><h4>@TeacherName</h4></div>
            <div style="margin: 0 0 0 auto">
                <button type="button" class="mb-1 text-white delbtn" @onclick="AddDeleteAvatar" title=@xtea.TxtTitle[1]>A</button>
                <button type="button" class="mb-1 text-white delbtn" @onclick="DeleteAllDocs" title=@xtea.TxtTitle[2]>E</button>
            </div>
        </nav>

        <div class="container"> @*Eventuella dokument som ingår läggs ut här*@
            <div class="d-flex flex-wrap">
                @foreach (var doc in documents)
                {
                    <ul class="nav">
                        @if (doc.UserId == loggeduser.Id && doc.Id4Course != -2 && doc.ActivityId == 0)
                        {
                            if (doc.DocName != "")
                            {
                                if (DateTime.Parse(doc.TimeStamp).AddDays(1) > DateTime.Now)
                                {
                                    <li class="doclink" style="background-color:lavenderblush; box-shadow: 0 0 10px plum">
                                        <span @onclick=" _ => OpenFileControl(doc.NameIx, doc.DocName)" title=@xtea.TxtTitle[3]>@doc.DocName</span>
                                        <span class="oi oi-file text-primary text-decoration-none docicon"
                                        @onclick=" _ => DocUserControl(doc.Id, true)"></span>
                                    </li>
                                }
                                else
                                {
                                    <li class="doclink" style="background-color:lavenderblush">
                                        <span @onclick=" _ => OpenFileControl(doc.NameIx, doc.DocName)" title=@xtea.TxtTitle[3]>@doc.DocName</span>
                                        <span class="oi oi-file text-primary text-decoration-none docicon"
                                        @onclick=" _ => DocUserControl(doc.Id, true)"></span>
                                    </li>
                                }
                            }
                            else
                            {
                                if (DateTime.Parse(doc.TimeStamp).AddDays(1) > DateTime.Now)
                                {
                                    <li class="oi oi-file text-danger text-decoration-none docicon"
                                        style="position: relative; top: 10px; margin-right: 22px; text-shadow: 0 0 10px plum"
                                        @onmouseover=" _ => ShowMessControl(doc.Description, doc.Author, doc.TimeStamp)"
                                        @onclick=" _ => DeleteMess(doc.Id)">
                                    </li>
                                }
                                else
                                {
                                    <li class="oi oi-file text-danger text-decoration-none docicon"
                                        style="position: relative; top: 10px; margin-right: 22px"
                                        @onmouseover=" _ => ShowMessControl(doc.Description, doc.Author, doc.TimeStamp)"
                                        @onclick=" _ => DeleteMess(doc.Id)">
                                    </li>
                                }
                            }
                        }
                    </ul>
                }
            </div>
        </div><br />

        <ToastDeleteMess @ref="deleteRef" /> @*Delete-fönster*@
        <ToastDeleteAllDocUser @ref="deletealldocRef" /> @*Delete-fönster*@
        <ToastDocumentUser @ref="docuserRef" /> @*Filmottagarefönster*@
        <ToastDocumentAvatar @ref="addavatarRef" /> @*Avatar-fönster*@

        <EditForm Context="searchlmslexnet" Model="@courses" OnSubmit="OnInitializedAsync">
            <div class="input-group">
                <InputText class="form-control" @bind-Value="searchString" placeholder="Course name" />
                <div style="z-index: 0">
                    <button type="submit" class="btn btn-outline-dark">Search</button>
                </div>
                <div style="z-index: 0">
                    <button type="button" class="btn btn-outline-dark" @onclick="ReverseOrder">@textBtn</button>
                </div>
            </div>
        </EditForm><br />

        @do
        {
            RepeatTable = false;
            if (courses == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                foreach (var data in courses)
                {
                    <section class="coursebox">
                        <div style="display: flex">
                            <div style="width: 75%">
                                @data.Id.&nbsp; <em style="cursor: pointer" title="@data.Description @xtea.TxtTitle[4]"
                                @onclick=" _ => RedirectToCourse(data.Id)">@data.Name</em>

                                @if (data.Total_M == 1) SP = @xtea.TxtText[2]; else SP = @xtea.TxtText[3];
                                <span style="margin-left: 2%; color:sandybrown" class="dropuse">
                                    <span><span>@data.Total_M</span><span>&nbsp;@SP,</span></span>
                                    <span style="font-size: 0.78rem; padding: 3px; cursor: default" class="dropuse-content">
                                        @foreach (var item in modules) // Snabbtitt.
                                        {
                                            if (item.CourseId == data.Id)
                                            {
                                                <div>@item.Name</div>
                                            }
                                        }
                                    </span>
                                </span>

                                @if (data.Total_S == 1) SP = @xtea.TxtText[4]; else SP = @xtea.TxtText[5];
                                <span style="margin-left: 2%; color:slategray" class="dropuse">
                                    <span><span>@data.Total_S</span><span>&nbsp;@SP,</span></span>
                                    <span style="font-size: 0.78rem; padding: 3px; cursor: default" class="dropuse-content">
                                        @foreach (var item in users) // Snabbtitt.
                                        {
                                            if (item.CourseId == data.Id)
                                            {
                                                if (item.UserRole == 1)
                                                {
                                                    <div>@item.FirstName @item.LastName</div>
                                                }

                                                if (item.UserRole == 2)
                                                {
                                                    <div style="color:darkred">@item.FirstName @item.LastName</div>
                                                }
                                            }
                                        }
                                    </span>
                                </span>

                                @if (data.Total_D == 1) SP = @xtea.TxtText[6]; else SP = @xtea.TxtText[7];
                                <span style="margin-left: 2%; color:darkblue" class="dropuse">
                                    <span><span>@data.Total_D</span><span>&nbsp;@SP</span></span>
                                    <span style="font-size: 0.78rem; padding: 3px; cursor: pointer" class="dropuse-content">
                                        @foreach (var item in documents) // Snabbtitt och som här gäller alla ev dokument i en kurs.
                                        {
                                            if (item.Id4Course == data.Id)
                                            {
                                                if (item.DocName != "")
                                                {
                                                    <div @onclick=" _ => OpenFileControl(item.NameIx, item.DocName)"
                                                    title="@item.Description, @item.Author, @item.TimeStamp">@item.DocName</div>
                                                }
                                                else
                                                {
                                                    <div @onclick=" _ => ShowMessControl(item.Description, item.Author, item.TimeStamp)"
                                                    style="color:rebeccapurple">From @item.Author</div>
                                                }
                                            }

                                            foreach (var mod in modules)
                                            {
                                                if (mod.CourseId == data.Id && item.ModuleId == mod.Id)
                                                {
                                                    if (item.DocName != "")
                                                    {
                                                        <div @onclick=" _ => OpenFileControl(item.NameIx, item.DocName)"
                                                        title="@item.Description, @item.Author, @item.TimeStamp">@item.DocName</div>
                                                    }
                                                    else
                                                    {
                                                        <div @onclick=" _ => ShowMessControl(item.Description, item.Author, item.TimeStamp)"
                                                        style="color:rebeccapurple">From @item.Author</div>
                                                    }
                                                }

                                                foreach (var act in activities)
                                                {
                                                    if (mod.CourseId == data.Id && act.ModuleId == mod.Id && item.ActivityId == act.Id)
                                                    {
                                                        if (item.DocName != "")
                                                        {
                                                            <div @onclick=" _ => OpenFileControl(item.NameIx, item.DocName)"
                                                            title="@item.Description, @item.Author, @item.TimeStamp">@item.DocName</div>
                                                        }
                                                        else
                                                        {
                                                            <div @onclick=" _ => ShowMessControl(item.Description, item.Author, item.TimeStamp)"
                                                            style="color:rebeccapurple">From @item.Author</div>
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    </span>
                                </span>

                            </div>
                                <b style="margin-left: auto">@xnav.StartEndDate(data.StartDate, data.EndDate)</b>&nbsp;
                                @if (data.Total_M > 0)
                                {
                                    <div style="margin-left: auto; margin-right: 0">
                                        <NavLink style="cursor: pointer" class="oi oi-x text-danger text-decoration-none"
                                        @onclick=" _ => DeleteControl(data.Id)" Title=@xtea.TxtTitle[5]></NavLink>
                                    </div>
                                }
                                else
                                {
                                    <div style="margin-left: auto">
                                        <NavLink style="cursor: pointer" class="oi oi-x text-danger text-decoration-none"
                                        @onclick=" _ => DeleteControl(data.Id)" Title=@xtea.TxtTitle[5]></NavLink>
                                    </div>
                                    <div style="margin-left: auto; margin-right: 0">
                                        <NavLink style="cursor: pointer; margin-left: 1%" class="oi oi-browser text-primary text-decoration-none"
                                        @onclick=" _ => AddModule(data.Id)" Title=@xtea.TxtTitle[6]></NavLink>
                                    </div>  
                                }
                        </div>
                    </section>
                }
            }
        } while (RepeatTable);

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private ToastDeleteMess? deleteRef; // Delete-fönster.

    private async Task DeleteMess(int id) // Delete-fönster.
    {
        Auxx.IntId = id;
        await deleteRef!.Show();
        await RefreshAfterThis(false); // Uppdaterar sidan.
    }

    private ToastDeleteAllDocUser? deletealldocRef; // Delete-fönster.

    private async Task DeleteAllDocs() // Delete-fönster.
    {
        Auxx.Loggeduser = loggeduser;
        await deletealldocRef!.Show();
        await RefreshAfterThis(false); // Uppdaterar sidan.
    }

    private ToastDocumentUser? docuserRef; // Filmottagarefönster.

    private async Task DocUserControl(int id, bool delete) // Filmottagarefönster.
    {
        Auxx.IntId = id;
        Auxx.Flag = delete;
        Auxx.Documents = documents;
        await docuserRef!.Show();
        await RefreshAfterThis(false); // Uppdaterar sidan.
    }

    private ToastDocumentAvatar? addavatarRef; // Avatar-fönster.

    private async Task AddDeleteAvatar() // Avatar-fönster.
    {
        Auxx.Name4Type = loggeduser.FirstName + ' ' + loggeduser.LastName;
        Auxx.Loggeduser = loggeduser;
        await addavatarRef!.Show();
        await RefreshAfterThis(false); // Uppdaterar sidan.
    }

    private List<CourseDto> courses = new();

    private List<ModuleDto> modules = new();

    private List<ActivityDto> activities = new();

    private List<DocumentDto> documents = new();

    private List<AppUserDto> users = new();

    private AppUserDto loggeduser = new(); // Info om den som för tillfället är inloggad.

    private string TeacherName = string.Empty;
    private string searchString = string.Empty;
    private string SP = string.Empty;
    private string textBtn = "First first";
    private bool DeleteFlag;
    private bool RepeatTable;

    private async Task RefreshAfterThis(bool delay) // Uppdaterar efter förändring av innehåll.
    {
        while (!Auxx.Flag) await xnav.Intermission(500, false); // Nödvändigt för att kunna uppdatera sidan efteråt.
        if (delay) await xnav.Intermission(1500, false); // Undviker att ShowAvatar-metoden omgående nollställer errormenyn.
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (xtea.RenderPage != "STILL_HERE")
        {
            xnav.SetJohnDoe(false);
            xnav.MainRole = 2;
            xnav.ClassSettings = "d-block"; // Settings.
            if (await xClient.GetStorage<string>("LMS_Lang") == "EN") { xtea.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "SV") { xtea.SetLanguage_SV(); xtoa.SetLanguage_SV(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "DE") { xtea.SetLanguage_DE(); xtoa.SetLanguage_DE(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "FR") { xtea.SetLanguage_FR(); xtoa.SetLanguage_FR(); }
            else { xtea.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
        }

        if (!Auxx.Flag) xnav.SetReset('a');
        Auxx.Flag = false;

        courses.Clear(); // Sökfunktionen kräver att listorna rensas.
        modules.Clear();
        activities.Clear();
        documents.Clear();
        users.Clear();

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.

        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");
        var module = await xClient.GetAsync<IEnumerable<ModuleDto>>("api/Module");
        var activity = await xClient.GetAsync<IEnumerable<ActivityDto>>("api/Activity");
        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        var appuser = await appuserClient.GetAsync();

        if (module is not null) modules = module.ToList(); // För snabbtitt.
        if (activity is not null) activities = activity.ToList();
        if (document is not null) documents = document.ToList();
        if (appuser is not null) users = appuser.ToList();

        if (course is not null)
        {
            foreach (var item in course)
            {
                // Sökfiltrering med IndexOf: kursnamn.
                if (!string.IsNullOrWhiteSpace(searchString))
                {
                    if (item.Name.ToLower().IndexOf(searchString.ToLower()) != - 1) courses.Add(item);
                }
                else
                {
                    courses.Add(item);
                }
            }
            courses = Enumerable.Reverse(courses).ToList();
        }

        foreach (var c in courses) // Räknar samman alla kursdokument.
        {
            int FindDoc = 0;

            foreach (var d in documents)
            {
                if (d.Id4Course == c.Id) c.Total_D++;
            }

            foreach (var m in c.Modules)
            {
                foreach (var d in documents)
                {
                    if (d.ModuleId == m.Id) FindDoc++;

                    foreach (var a in m.Activities)
                    {
                        if (d.ActivityId == a.Id) FindDoc++;
                    }
                }
            }
            c.Total_D += FindDoc;
        }

        if (appuser is not null && name is not null)
        {
            foreach (var item in appuser) // Hämtar den som för tillfället är inloggad.
            {
                if (item.Email == name) loggeduser = item;
            }
        }

        xnav.SetLogAvatar("d-none", "");

        foreach (var doc in documents) // Letar efter en avatar.
        {
            if (doc.UserId == loggeduser.Id && doc.Id4Course == -2)
            {
                xnav.SetLogAvatar("avatarlog", xClient.GetFilepath() + doc.NameIx + doc.DocName);
            }
        }

        TeacherName = @xtea.TxtText[1] + loggeduser.FirstName + loggeduser.LastName + "!";

        xtea.OnChange += StateHasChanged;
        xtoa.OnChange += StateHasChanged;
    }

    private async Task DeleteControl(int id)
    {
        foreach (var cour in courses)
        {
            if (cour.Id == id)
            {
                DeleteFlag = true;

                foreach (var mod in cour.Modules) // Kollar om det finns några moduler.
                {
                    DeleteFlag = false;
                }

                var appuser = await appuserClient.GetAsync();

                if (appuser is not null)
                {
                    foreach (var user in appuser) // Kollar om det finns några användare knutna till kursen.
                    {
                        if (user.CourseId == id) DeleteFlag = false;
                    }
                }

                var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");

                if (document is not null)
                {
                    foreach (var doc in document) // Kollar om det finns några dokument knutna till kursen.
                    {
                        if (doc.Id4Course == id) DeleteFlag = false;
                    }
                }
            }
        }

        if (DeleteFlag)
        {
            xnav.SetDone(xtea.TxtDone[1]);
            xnav.SetReset('d');
            await xnav.Intermission(3000, false);
            await xClient.RemAsync(id, "api/Course");
            Navigation.NavigateTo("/teacherallcourses", true);
            DeleteFlag = false;
        }
        else
        {
            await xnav.Intermission(100, true);
            xnav.SetError(xtea.TxtError[1]);
            xnav.SetReset('e');
        }
    }

    private void ReverseOrder()
    {
        if (textBtn == "First first") textBtn = "Last first"; else textBtn = "First first";
        courses = Enumerable.Reverse(courses).ToList();
        RepeatTable = true;
    }

    private void RedirectToCourse(int id)
    {
        Navigation.NavigateTo($"/coursedetail/{id}", true);
    }

    private async Task AddModule(int id)
    {
        int ModuleID = 0;

        var lmod = new ModuleDto
        {
            Morder = 0,
            Name = "Not yet a name",
            Description = "Not yet a description",
            StartDate = DateTime.Now,
            EndDate = DateTime.Now,
            Select = 2,
            CourseId = id
        };

        await xClient.PostAsync<ModuleDto>(lmod, "api/Module");

        var allmod = await xClient.GetAsync<IEnumerable<ModuleDto>>("api/Module");

        if (allmod is not null)
        {
            foreach (var mod in allmod)
            {
                if (mod.Name == lmod.Name && mod.StartDate == lmod.StartDate && mod.EndDate == lmod.EndDate) ModuleID = mod.Id;
            }
        }

        var lact = new ActivityDto
        {
            Name = "Not yet a name",
            Description = "Not yet a description",
            StartDate = DateTime.Now,
            EndDate = DateTime.Now,
            Select = 1,
            ActivityTypeId = 1,
            ModuleId = ModuleID
        };

        await xClient.PostAsync<ActivityDto>(lact, "api/Activity");
        await CreateAndRefresh(id);
    }

    private async Task CreateAndRefresh(int id)
    {
        xnav.SetDone(xtea.TxtDone[2]);
        xnav.SetReset('d');
        await xnav.Intermission(2000, false);
        Navigation.NavigateTo($"/coursedetail/{id}", true);
    }

    private async Task OpenFileControl(int ix, string filename)
    {
        await xClient.OpenFile(ix, filename);
    }

    private void ShowInfoControl(string description, string author, string timestamp)
    {
        xnav.SetInfo(description + " by " + author + " Created: " + timestamp);
        xnav.SetReset('i');
    }

    private void ShowMessControl(string description, string author, string timestamp)
    {
        xnav.SetMess(description + " by " + author + " Created: " + timestamp);
        xnav.SetReset('m');
    }
}