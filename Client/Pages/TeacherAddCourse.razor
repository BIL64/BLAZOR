@page "/teacheraddcourse"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager Navigation
@inject ILogger<TeacherAddCourse> Logger
@inject IXDtoClient xClient
@inject XLangTeacher xtea
@inject XLangToast xtoa
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Teacher add course</PageTitle>

<AuthorizeView Roles="Teacher">
    <Authorized>
    <h3>@xtea.TxtText[8]</h3>
    <br />

    <section class="@classCourse">
        <div style="display: flex; width: 80%">
            <div style="width: 50%"><h5>@xtea.TxtText[9]</h5></div>
            <div style="margin: 0 0 0 auto"><h6>@stepCourse</h6></div>
        </div>
        <EditForm EditContext="courseContext" Context="courselmslexnet" OnValidSubmit="HandleSubmitCourse">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group m-3">
                <label for="Name">@xtea.TxtText[13]</label>
                <InputText id="Name" class="form-control" style="@colorCourse" @bind-Value="course.Name" placeholder="Enter name" />
            </div>
            <div class="form-group m-3">
                <label for="Description">@xtea.TxtText[14]</label>
                <InputTextArea id="Description" class="form-control" style="@colorCourse" @bind-Value="course.Description" placeholder="Enter description" />
            </div>
            <div class="form-group m-3">
                <label for="Startdate">@xtea.TxtText[15]</label>
                <InputDate id="Startdate" class="form-control" style="@colorCourse" @bind-Value="course.StartDate" />
            </div>
            <div class="form-group m-3">
                <label for="Enddate">@xtea.TxtText[16]</label>
                <InputDate id="Enddate" class="form-control" style="@colorCourse" @bind-Value="course.EndDate" />
            </div>
            <div class="form-group m-3">
                <button type="button" class="@classCouRegBtn m-1" @onclick="RegretRefresh"
                    title=@xtea.TxtTitle[7]>@xtea.TxtButton[0]</button> @* Regret *@
                <button type="submit" class="@classCouSubBtn m-1"
                    title=@xtea.TxtTitle[8]>@xtea.TxtButton[2]</button> @* Save *@
                <button type="button" class="@classCouBtn m-1" @onclick="AddModule"
                    title=@xtea.TxtTitle[9]>@xtea.TxtButton[8]</button> @* Add module *@
                <button type="button" class="@classCouBtn m-1" @onclick="AddActivityType"
                    title=@xtea.TxtTitle[10]>@xtea.TxtButton[11]</button> @* Add / edit activity types *@
            </div>
        </EditForm>
    </section>

    @while (repeatActivityType) // Repeteringsdel för aktivitetstyper.
    {
        repeatActivityType = false;

        <section class="@classActtyp">
            <h5>@xtea.TxtText[23]</h5>
            <EditForm EditContext="activitytypeContext" Context="activitytypelmslexnet" OnValidSubmit="HandleSubmitActivityType">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group m-3">
                    <label for="Typename">@xtea.TxtText[24]</label>
                    <InputSelect class="form-control" id="Typename" @bind-Value="activityType.Name">
                        @foreach (var acttype in activitytypelist)
                        {
                            <option value="@acttype.Name">@acttype.Name</option>
                        }
                    </InputSelect>
                    @{repeatActivityType = true;}
                </div>
                <div class="form-group m-3">
                    <label for="New">@xtea.TxtText[25]</label>
                    <InputText id="New" class="form-control" @bind-Value="newActType" placeholder="Enter new name" />
                </div>
                <div class="form-group m-3">
                    <button type="button" class="@classCouRegBtn m-1" @onclick="FinishActivityType"
                        title=@xtea.TxtTitle[14]>@xtea.TxtButton[1]</button> @* Finish *@
                    <button type="submit" class="@classCouSubBtn m-1"
                        title=@xtea.TxtTitle[15]>@xtea.TxtButton[3]</button> @* Save new type *@
                    <button type="button" class="@classCouBtn m-1" @onclick="EditActivityType"
                        title=@xtea.TxtTitle[16]>@xtea.TxtButton[12]</button> @* Edit type *@
                </div>
            </EditForm>
        </section>
    }

    @do // Repeteringsdel för moduler och aktiviteter.
    {
        repeatModule = false;

        <section class="@classModule">
            <div style="display: flex; width: 80%">
                <div style="width: 50%"><h5>@xtea.TxtText[26]</h5></div>
                <div style="margin: 0 0 0 auto"><h6>@stepModule</h6></div>
            </div>
            <EditForm EditContext="moduleContext" Context="modulelmslexnet" OnValidSubmit="HandleSubmitModule">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group m-3">
                    <label for="Name">@xtea.TxtText[13]</label>
                    <InputText id="Name" class="form-control" style="@colorModule" @bind-Value="module.Name" placeholder="Enter name" />
                </div>
                <div class="form-group m-3">
                    <label for="Description">@xtea.TxtText[14]</label>
                    <InputTextArea id="Description" class="form-control" style="@colorModule" @bind-Value="module.Description" placeholder="Enter description" />
                </div>
                <div class="form-group m-3">
                    <label for="Startdate">@xtea.TxtText[15]</label>
                    <InputDate id="Startdate" class="form-control" style="@colorModule" @bind-Value="module.StartDate" />
                </div>
                <div class="form-group m-3">
                    <label for="Enddate">@xtea.TxtText[16]</label>
                    <InputDate id="Enddate" class="form-control" style="@colorModule" @bind-Value="module.EndDate" />
                </div>
                <div class="form-group m-md-3">
                    <InputCheckbox id="switch" class="control-label checkbox" type="checkbox" @bind-Value="DateControl" />
                        <label class="control-label toggle" for="switch" title=@xtea.TxtTitle[17]></label>
                    @if (DateControl)
                    {
                        <span style="position: relative; top: -3px"> Complex date controll ON</span>
                    }
                    else
                    {
                        <span style="position: relative; top: -3px"> Complex date control OFF</span>
                    }
                </div>
                <div class="form-group m-3">
                    <button type="button" class="@classModRegBtn m-1" @onclick="RegretRefresh"
                        title=@xtea.TxtTitle[18]>@xtea.TxtButton[0]</button> @* Regret *@
                    <button type="submit" class="@classModBtn m-1"
                        title=@xtea.TxtTitle[19]>@xtea.TxtButton[9]</button> @* Add activity *@
                    <button type="button" class="@classModSubNotBtn m-1" @onclick="SaveButNotMod"
                        title=@xtea.TxtTitle[20]>@xtea.TxtButton[6]</button> @* Save but not this module *@
                </div>
            </EditForm>
        </section>

        do // Repeteringsdel för aktiviteter.
        {
            <h5>@TestMess1</h5>
            <h5>@TestMess2</h5>
            repeatActivity = false;

            <section class="@classActivi">
                <div style="display: flex; width: 80%">
                    <div style="width: 50%"><h5>@xtea.TxtText[27]</h5></div>
                    <div style="margin: 0 0 0 auto"><h6>@stepActivi</h6></div>
                </div>
                <EditForm EditContext="activityContext" Context="activitylmslexnet" OnValidSubmit="HandleSubmitActivity">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group m-3">
                        <label for="Name">@xtea.TxtText[13]</label>
                        <InputText id="Name" class="form-control" @bind-Value="activity.Name" placeholder="Enter name" />
                    </div>
                    <div class="form-group m-3">
                        <label for="Typename">@xtea.TxtText[24]</label>
                        <InputSelect class="form-control" id="Typename" @bind-Value="activityType.Name">
                            @foreach (var acttype in activitytypelist)
                            {
                                <option value="@acttype.Name">@acttype.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group m-3">
                        <label for="Description">@xtea.TxtText[14]</label>
                        <InputTextArea id="Description" class="form-control" @bind-Value="activity.Description" placeholder="Enter description" />
                    </div>
                    <div class="form-group m-3">
                        <label for="Startdate">@xtea.TxtText[15]</label>
                        <InputDate id="Startdate" class="form-control" @bind-Value="activity.StartDate" />
                    </div>
                    <div class="form-group m-3">
                        <label for="Enddate">@xtea.TxtText[16]</label>
                        <InputDate id="Enddate" class="form-control" @bind-Value="activity.EndDate" />
                    </div>
                    <div class="form-group m-3">
                        <button type="button" class="@classActRegBtn m-1" @onclick="RegretRefresh"
                            title=@xtea.TxtTitle[24]>@xtea.TxtButton[0]</button> @* Regret *@
                        <button type="button" class="@classActBtn m-1" @onclick="AddMoreActivities"
                            title=@xtea.TxtTitle[25]>@xtea.TxtButton[10]</button> @* Add more activities *@
                        <button type="submit" class="@classActSubBtn m-1"
                            title=@xtea.TxtTitle[26]>@xtea.TxtButton[4]</button> @* Save and done *@
                        <button type="button" class="@classActBtn m-1" @onclick="AddMoreModules"
                            title=@xtea.TxtTitle[27]>@xtea.TxtButton[5]</button> @* Save and add more modules *@
                        <button type="button" class="@classActSubNotBtn m-1" @onclick="SaveButNotAct"
                            title=@xtea.TxtTitle[28]>@xtea.TxtButton[7]</button> @* Save but not this *@
                    </div>
                </EditForm>
            </section>

            <section class="@classTable"> @*Hjälptabeller vid inmatning av moduler och aktiviteter*@ 
                <div style="display: flex">
                    <h4 style="width: 75%">@xtea.TxtText[28] @course.Name</h4>
                    <h5 style="margin: 0 0 0 auto">@XNavMenu.StartEndDate(course.StartDate, course.EndDate)</h5>
                </div>
                <h6>@xtea.TxtText[29]</h6>
                <table class="table">
                    <thead>
                        <tr>
                            <th>@xtea.TxtText[33]</th>
                            <th>@xtea.TxtText[34]</th>
                            <th>@xtea.TxtText[35]</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                    @foreach (var mod in modulelist)
                    {
                        <tr>
                            <td>@mod.Name</td>
                            <td>@mod.Description</td>
                            <td>@XNavMenu.StartEndDate(mod.StartDate, mod.EndDate)</td>
                        </tr>
                    }
                </table>
                <br />
                <h6>@xtea.TxtText[36]</h6>
                <table class="table">
                    <thead>
                        <tr>
                            <th>@xtea.TxtText[37]</th>
                            <th>@xtea.TxtText[38]</th>
                            <th>@xtea.TxtText[39]</th>
                            <th>@xtea.TxtText[40]</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                    @foreach (var act in activitylist)
                    {
                        <tr>
                            <td>@act.Name</td>
                            <td>@act.ActivityTypeName</td>
                            <td>@act.Description</td>
                            <td>@XNavMenu.StartEndDate(act.StartDate, act.EndDate)</td>
                        </tr>
                    }
                </table>
            </section>

        } while (repeatActivity);

    } while (repeatModule);

</Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private EditContext courseContext = default!; // Formulärkontexter.
    private EditContext moduleContext = default!;
    private EditContext activityContext = default!;
    private EditContext activitytypeContext = default!;

    private CourseDto course = new();

    private ModuleDto module = new();

    private ActivityDto activity = new();

    private ActivityTypeDto activityType = new();

    private List<ModuleDto> modulelist = new();

    private List<ActivityDto> activitylist = new();

    private List<ActivityTypeDto> activitytypelist = new();

    private string TestMess1 = string.Empty; // Test.
    private string TestMess2 = string.Empty; // Test.

    private bool repeatModule; // Om flera moduler ska läggas till.
    private bool repeatActivity; // Om flera aktiviteter ska läggas till.
    private bool repeatActivityType; // Om flera aktivitetstyper ska läggas till.
    private bool saveActButNot; // Flagga om man ångrar en aktivitet.
    private bool DateControl = true; // När man vill slippa datumkontrollen.

    private int CourseID = 0; // Kursens Id.
    private int CountModules = 0; // Räknar antalet moduler.

    private string stepCourse = string.Empty;
    private string stepModule = string.Empty;
    private string stepActivi = string.Empty;
    private string newActType = string.Empty;

    // Stilvariabler för att gråa ut inamatade data.
    private string colorCourse = "color: black";
    private string colorModule = "color: black";

    // Klassvariabler för att visa/inte visa formulär.
    private string classCourse = "courseeditbox";
    private string classModule = "d-none";
    private string classActivi = "d-none";
    private string classActtyp = "d-none";
    private string classTable = "d-none";

    // Klassvariabler för att visa/inte visa knappar.
    private string classCouRegBtn = "btn btn-secondary btn-sm";
    private string classCouSubBtn = "btn btn-success btn-sm";
    private string classCouBtn = "btn btn-primary btn-sm";
    private string classModRegBtn = "btn btn-secondary btn-sm";
    private string classModBtn = "btn btn-primary btn-sm";
    private string classActRegBtn = "btn btn-secondary btn-sm";
    private string classActSubBtn = "btn btn-success btn-sm";
    private string classModSubNotBtn = "d-none";
    private string classActSubNotBtn = "d-none";
    private string classActBtn = "btn btn-primary btn-sm";

    protected override async Task OnInitializedAsync()
    {
        courseContext = new EditContext(course); // Formulärkontext.
        moduleContext = new EditContext(module);
        activityContext = new EditContext(activity);
        activitytypeContext = new EditContext(activityType);

        stepCourse = xtea.TxtText[17];
        stepModule = xtea.TxtText[18];
        stepActivi = xtea.TxtText[19];

        if (xtea.RenderPage != "STILL_HERE")
        {
            xnav.SetJohnDoe(false);
            xnav.MainRole = 2;
            xnav.ClassSettings = "d-block"; // Settings.
            if (await xClient.GetStorage<string>("LMS_Lang") == "EN") { xtea.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "SV") { xtea.SetLanguage_SV(); xtoa.SetLanguage_SV(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "DE") { xtea.SetLanguage_DE(); xtoa.SetLanguage_DE(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "FR") { xtea.SetLanguage_FR(); xtoa.SetLanguage_FR(); }
            else { xtea.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
        }

        xnav.SetReset('a');

        var actType = await xClient.GetAsync<IEnumerable<ActivityTypeDto>>("api/Acttype");

        if (actType is not null) // Hämtar aktivitetstyper.
        {
            activitytypelist = actType.ToList();
        }
        var firstacttype = new ActivityTypeDto();
        firstacttype = activitytypelist.ElementAt(0);
        activityType.Name = firstacttype.Name;

        xtea.OnChange += StateHasChanged;
        xtoa.OnChange += StateHasChanged;
    }

    private async Task HandleSubmitCourse()
    {
        Logger.LogInformation("HandleSubmit called");

        if (course.StartDate <= course.EndDate)
        {
            await xClient.PostAsync<CourseDto>(course, "api/Course"); // Sparar enbart kursen i databasen.
            await CreateAndRefresh();
        }
        else
        {
            xnav.SetError(xtea.TxtError[2]);
            xnav.SetReset('e');
        }
    }

    private async Task HandleSubmitActivityType() // Sparar aktivitetstyp.
    {
        if (newActType == "") newActType = "-";

        var dto = new ActivityTypeDto
        {
            Name = newActType
        };

        await xClient.PostAsync<ActivityTypeDto>(dto, "api/Acttype");

        activitytypelist.Clear();

        var items = await xClient.GetAsync<IEnumerable<ActivityTypeDto>>("api/Acttype");

        if (items is not null) activitytypelist = items.ToList();

        classActtyp = "d-none";
        await xnav.Intermission(100, true);
        classActtyp = "activityeditbox";
        repeatActivityType = true;
    }

    private async Task HandleSubmitModule()
    {
        Logger.LogInformation("HandleSubmit called");

        var lmod = GetNewModObject(module);

        await xnav.Intermission(100, true);
        if (await DateModuleControl())
        {
            colorModule = "color: grey";
            classActivi = "activityeditbox";
            classTable = "activityeditbox";
            stepModule = "Module ready...";
            classModRegBtn = "d-none";
            classModBtn = "d-none";
            classModSubNotBtn = "d-none";
            modulelist.Add(lmod);
        }
    }

    private async Task HandleSubmitActivity()
    {
        Logger.LogInformation("HandleSubmit called");

        var lact = await GetNewActObject(activity);

        lact.ActivityTypeName = activityType.Name;

        await xnav.Intermission(100, true);
        if (await DateActivityControl())
        {
            activitylist.Add(lact);

            await AddAllToDB(); // Adderar till databasen.
            await CreateAndRefresh();
        }
    }

    private void AddActivityType() // Hoppar till aktivitetstypfönstret.
    {
        classCourse = "d-none";
        classActtyp = "activityeditbox";
        repeatActivityType = true;
    }

    private async Task EditActivityType() // Redigerar en aktivitetstyp.
    {
        var items = await xClient.GetAsync<IEnumerable<ActivityTypeDto>>("api/Acttype");

        if (items is not null)
        {
            foreach (var acttype in items)
            {
                if (acttype.Name == activityType.Name) activityType.Id = acttype.Id;
            }
        }

        if (newActType == "") newActType = "-";

        var dto = new ActivityTypeDto
        {
            Id = activityType.Id,
            Name = newActType
        };

        await xClient.PutAsync<ActivityTypeDto>(activityType.Id, dto, "api/Acttype");

        activitytypelist.Clear();

        items = await xClient.GetAsync<IEnumerable<ActivityTypeDto>>("api/Acttype");

        if (items is not null) activitytypelist = items.ToList();

        classActtyp = "d-none";
        await xnav.Intermission(100, true);
        classActtyp = "activityeditbox";
        repeatActivityType = true;
    }

    private async Task FinishActivityType()
    {
        xnav.SetDone(xtea.TxtDone[3]);
        xnav.SetReset('d');
        await xnav.Intermission(2000, false);
        Navigation.NavigateTo("/teacheraddcourse", true);
    }

    private async Task SaveButNotMod() // Om man ångrar en modul.
    {
        xnav.SetDone(xtea.TxtDone[4]);
        xnav.SetReset('d');
        await xnav.Intermission(3000, false);
        Navigation.NavigateTo("/teacherallcourses", true);
    }

    private async Task AddModule()
    {
        if (course.StartDate <= course.EndDate && course.Name != "" && course.Description != "")
        {
            colorCourse = "color: grey";
            classModule = "moduleeditbox";
            stepCourse = "Course ready...";
            classCouRegBtn = "d-none";
            classCouSubBtn = "d-none";
            classCouBtn = "d-none";
            xnav.SetReset('a');
        }
        else
        {
            await xnav.Intermission(100, true);
            xnav.SetError(xtea.TxtError[2]);
            if (course.Name == "")
                xnav.SetError(xtea.TxtError[3]);
            if (course.Description == "")
                xnav.SetError(xtea.TxtError[4]);
            if (course.Name == "" && course.Description == "")
                xnav.SetError(xtea.TxtError[5]);
            xnav.SetReset('e');
        }
    }

    private async Task AddMoreModules()
    {
        var lact = await GetNewActObject(activity);

        lact.ActivityTypeName = activityType.Name;

        await xnav.Intermission(100, true);
        if (await DateActivityControl() || saveActButNot)
        {
            if (saveActButNot) xnav.SetReset('a');
            else activitylist.Add(lact);
            saveActButNot = false;
            repeatModule = true;
            colorModule = "color: black";
            classActivi = "d-none";
            classActRegBtn = "d-none";
            classModBtn = "btn btn-primary btn-sm";
            classModSubNotBtn = "btn btn-success btn-sm";

            await AddAllToDB(); // Adderar till databasen.

            CountModules++;
            activitylist.Clear();
        }
    }

    private async Task SaveButNotAct() // Om man ångrar en aktivitet.
    {
        saveActButNot = true;
        await AddMoreModules();
    }

    private async Task AddMoreActivities()
    {
        var lact = await GetNewActObject(activity);

        lact.ActivityTypeName = activityType.Name;

        await xnav.Intermission(100, true);
        if (await DateActivityControl())
        {
            repeatActivity = true;
            activitylist.Add(lact);
            classActivi = "d-none";
            await xnav.Intermission(100, false);
            classActSubNotBtn = "btn btn-primary btn-sm";
            classActivi = "activityeditbox";
        }
    }

    private async Task RegretRefresh()
    {
        xnav.SetDone(xtea.TxtDone[5]);
        xnav.SetReset('d');
        await xnav.Intermission(2000, false);
        Navigation.NavigateTo("/teacheraddcourse", true);
    }

    private async Task CreateAndRefresh()
    {
        xnav.SetDone(xtea.TxtDone[4]);
        xnav.SetReset('d');
        await xnav.Intermission(3000, false);
        Navigation.NavigateTo("/teacherallcourses", true);
    }

    private async Task AddAllToDB() // Adderar till databasen men utan den sista aktiviteten... 
    {
        if (CountModules < 1) // Enbart en modul.
        {
            await xClient.PostAsync<CourseDto>(course, "api/Course");

            var courses = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");

            if (courses is not null)
            {
                foreach (var cour in courses)
                {
                    if (cour.Name == course.Name && cour.StartDate == course.StartDate && cour.EndDate == course.EndDate) CourseID = cour.Id;
                }

            }

            var lmod = GetNewModObject(module);
            await xClient.PostAsync<ModuleDto>(lmod, "api/Module");

            foreach (var act in activitylist)
            {
                var lact = await GetNewActObject(act);
                await xClient.PostAsync<ActivityDto>(lact, "api/Activity");
            }
        }   

        if (CountModules > 0) // De andra modulerna.
        {
            var lmod = GetNewModObject(module);
            await xClient.PostAsync<ModuleDto>(lmod, "api/Module");

            foreach (var act in activitylist)
            {
                var lact = await GetNewActObject(act);
                await xClient.PostAsync<ActivityDto>(lact, "api/Activity");
            }
        }
    }

    private ModuleDto GetNewModObject(ModuleDto mod) // Nytt modulobjekt.
    {
        var dto = new ModuleDto
            {
                Morder = 0,
                Name = mod.Name,
                Description = mod.Description,
                StartDate = mod.StartDate,
                EndDate = mod.EndDate,
                Select = mod.Select,
                CourseId = CourseID
            };
        return dto;
    }

    private async Task<ActivityDto> GetNewActObject(ActivityDto act) // Nytt aktivitetsobject.
    {
        int ActivityTypeID = 0;
        var items = await xClient.GetAsync<IEnumerable<ActivityTypeDto>>("api/Acttype");

        if (items is not null)
        {
            foreach (var acttype in items)
            {
                if (acttype.Name == act.ActivityTypeName) ActivityTypeID = acttype.Id;
            }
        }

        var dto = new ActivityDto
            {
                Name = act.Name,
                Description = act.Description,
                StartDate = act.StartDate,
                EndDate = act.EndDate,
                Select = act.Select,
                ActivityTypeId = ActivityTypeID,
                ModuleId = await GetIdModule("api/Module")
            };
        return dto;
    }

    private async Task<int> GetIdModule(string route) // Returnerar id för modulen.
    {
        int ModuleID = 0;
        var items = await xClient.GetAsync<IEnumerable<ModuleDto>>(route);

        if (items is not null)
        {
            foreach (var mod in items)
            {
                if (mod.Name == module.Name && mod.StartDate == module.StartDate && mod.EndDate == module.EndDate) ModuleID = mod.Id;
            }
        }
        return ModuleID;
    }

    private async Task<bool> DateModuleControl() // Kontroll av datum för moduler.
    {
        bool case1 = false;
        bool case2 = false;
        bool case3 = false;
        bool case4 = false;
        int Count = 1;

        if (module.StartDate > module.EndDate) case1 = true; // Felaktigt start/slutdatum.

        if (module.StartDate < course.StartDate && module.EndDate < course.StartDate ||
        module.StartDate > course.EndDate && module.EndDate > course.EndDate) case2 = true; // Datum ligger utanför kursdatum.

        if (!case1 && !case2 && DateControl)
        {
            int[] datearray = new int[100000000];
            string dates = "";
            int InInt = 0;

            xnav.SetDone(xtea.TxtDateC[1]);
            xnav.SetReset('d');
            await xnav.Intermission(1, false);

            // Lägger in siffror på olika platser i arrayen. En plats som dessförinnan var ett datum.
            // Undersöker även om PlacingInArray returnerar 0, vilket indikerar beräkningsfel.
            InInt = PlacingInArray(course.StartDate, Count, '+');
            if (InInt < 1) case4 = true;
            datearray[InInt] = Count;
            InInt = PlacingInArray(course.EndDate, Count, '-');
            if (InInt < 1) case4 = true;
            datearray[InInt] = Count;
            Count++;

            foreach (var mod in modulelist)
            {
                InInt = PlacingInArray(mod.StartDate, Count, '+');
                if (InInt < 1) case4 = true;
                datearray[InInt] = Count;
                InInt = PlacingInArray(mod.EndDate, Count, '-');
                if (InInt < 1) case4 = true;
                datearray[InInt] = Count;
                Count++;
            }
            InInt = PlacingInArray(module.StartDate, Count, '+');
            if (InInt < 1) case4 = true;
            datearray[InInt] = Count;
            InInt = PlacingInArray(module.EndDate, Count, '-');
            if (InInt < 1) case4 = true;
            datearray[InInt] = Count;
            Count++;

            foreach (var arr in datearray) // Lägger in siffror i rad i en sträng.
            {
                if (arr > 0) dates += arr.ToString();
            }

            Array.Clear(datearray, 0, datearray.Length);

            //// Endast aktuellt om datumnumren kan anta identiska värden.
            //for (int i = 1; i < Count; i++) // Kollar om både start- och slutdatumet för en post blivit överskrivet av någon annan post.
            //{
            //    if (dates.IndexOf(i.ToString()) == -1) case3 = true;
            //}

            for (int i = dates.Length; i > 0; i--) // Tar successivt bort nummerpar.
            {
                if (dates.IndexOf(i.ToString() + i.ToString()) != -1) dates = dates.Replace(i.ToString() + i.ToString(), "");
            }

            if (dates.Length > 0) case3 = true; // Inga siffror kvar, ingen osymmetri!
        }

        return await CaseFalure(case1, case2, case3, case4);
    }

    private async Task<bool> DateActivityControl() // Kontroll av datum för aktiviteter.
    {
        bool case1 = false;
        bool case2 = false;
        bool case3 = false;
        bool case4 = false;
        int Count = 1;

        if (activity.StartDate > activity.EndDate) case1 = true; // Felaktigt start/slutdatum.

        if (activity.StartDate < module.StartDate && activity.EndDate < module.StartDate ||
        activity.StartDate > module.EndDate && activity.EndDate > module.EndDate) case2 = true; // Datum ligger utanför moduldatum.

        if (!case1 && !case2 && DateControl)
        {
            int[] datearray = new int[100000000];
            string dates = "";
            int InInt = 0;

            xnav.SetDone(xtea.TxtDateC[1]);
            xnav.SetReset('d');
            await xnav.Intermission(1, false);

            // Lägger in siffror på olika platser i arrayen. En plats som dessförinnan var ett datum.
            // Undersöker även om PlacingInArray returnerar 0, vilket indikerar beräkningsfel.
            InInt = PlacingInArray(module.StartDate, Count, '+');
            if (InInt < 1) case4 = true;
            datearray[InInt] = Count;
            InInt = PlacingInArray(module.EndDate, Count, '-');
            if (InInt < 1) case4 = true;
            datearray[InInt] = Count;
            Count++;

            foreach (var act in activitylist)
            {
                InInt = PlacingInArray(act.StartDate, Count, '+');
                if (InInt < 1) case4 = true;
                datearray[InInt] = Count;
                InInt = PlacingInArray(act.EndDate, Count, '-');
                if (InInt < 1) case4 = true;
                datearray[InInt] = Count;
                Count++;
            }
            InInt = PlacingInArray(activity.StartDate, Count, '+');
            if (InInt < 1) case4 = true;
            datearray[InInt] = Count;
            InInt = PlacingInArray(activity.EndDate, Count, '-');
            if (InInt < 1) case4 = true;
            datearray[InInt] = Count;
            Count++;

            foreach (var arr in datearray) // Lägger in siffror i rad i en sträng.
            {
                if (arr > 0) dates += arr.ToString();
            }

            Array.Clear(datearray, 0, datearray.Length);

            //// Endast aktuellt om datumnumren kan anta identiska värden.
            //for (int i = 1; i < Count; i++) // Kollar om både start- och slutdatumet för en post blivit överskrivet av någon annan post.
            //{
            //    if (dates.IndexOf(i.ToString()) == -1) case3 = true;
            //}

            for (int i = dates.Length; i > 0; i--) // Tar successivt bort nummerpar.
            {
                if (dates.IndexOf(i.ToString() + i.ToString()) != -1) dates = dates.Replace(i.ToString() + i.ToString(), "");
            }

            if (dates.Length > 0) case3 = true; // Inga siffror kvar, ingen osymmetri!
        }

        return await CaseFalure(case1, case2, case3, case4);
    }

    private async Task<bool> CaseFalure(bool c1, bool c2, bool c3, bool c4) // Returnerar resultat och felmeddelanden.
    {
        bool result = true;

        if (c1 || c2 || c3 || c4)
        {
            xnav.SetError(xtea.TxtDateC[2]);
            if (c2) xnav.SetError(xtea.TxtDateC[3]);
            if (c3) xnav.SetError(xtea.TxtDateC[4]);
            if (c4) xnav.SetError(xtea.TxtDateC[5]);
            xnav.SetReset('e');
            result = false;
        }
        else xnav.SetReset('a');

        if (!c1 && !c2 && !c3 && !c4)
        {
            xnav.SetDone("OK.");
            xnav.SetReset('d');
            await xnav.Intermission(500, false);
            xnav.SetReset('a');
        }

        return result;
    }

    // Bygger ett heltal av ett datum samt skapar distans mellan dem.
    // Ex 1: 2023-01-01 --> 230101 --> 23 ++ 032 (1 x 31 + 1) ++ 000 + count(1) = 23032001.
    // Ex 2: 2023-06-20 --> 230620 --> 23 ++ 206 (6 x 31 + 20) ++ 999 - count(1) = 23206998.
    // Ex 3: 2023-12-31 --> 231231 --> 23 ++ 403 (12 x 31 + 31) ++ 000 + count(1) = 23403001.

    private int PlacingInArray(DateTime date, int count, char pm)
    {
        int number = 0;

        // Addition av månad gånger 31 plus dagen. Därtill addition med 1000.
        int m_d = 1000 + int.Parse(date.ToString().Substring(5, 2)) * 31 + int.Parse(date.ToString().Substring(8, 2));

        // Om antalet moduler och aktiviteter är större än 499.
        if (count > 499) return 0;

        // Indatumet omvandlas till en sträng, plus m_d och distansen (max 499 moduler och aktiviteter).
        // Parsar detta till ett tal för att slutligen addera eller subtrahera count.
        if (pm == '+') number = int.Parse(date.ToString().Substring(2, 2) + m_d.ToString().Substring(1, 3) + "000") + count;
        if (pm == '-') number = int.Parse(date.ToString().Substring(2, 2) + m_d.ToString().Substring(1, 3) + "999") - count;

        return number;
    }
}
