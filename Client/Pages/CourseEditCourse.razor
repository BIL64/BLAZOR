@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging;

@page "/courseeditcourse/{IId:int}"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppUserDtoClient appuserClient
@inject NavigationManager Navigation
@inject ILogger<TeacherAddCourse> Logger
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Course edit course</PageTitle>

<AuthorizeView Roles="Teacher">
    <Authorized>
    <section class="activityeditbox">
        <h5>Edit course:</h5>
        <EditForm EditContext="courseContext" Context="courselmslexnet" OnValidSubmit="HandleSubmitCourse">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group m-3">
                <label for="Name">Name</label>
                <InputText id="Name" class="form-control" @bind-Value="course.Name" placeholder="Enter name" />
            </div>
            <div class="form-group m-3">
                <label for="Description">Description</label>
                <InputTextArea id="Description" class="form-control" @bind-Value="course.Description" placeholder="Enter description" />
            </div>
            <div class="form-group m-3">
                <label for="Startdate">Start date</label>
                <InputDate id="Startdate" class="form-control" @bind-Value="course.StartDate" />
            </div>
            <div class="form-group m-3">
                <label for="Enddate">End date</label>
                <InputDate id="Enddate" class="form-control" @bind-Value="course.EndDate" />
            </div>
            <div class="form-group m-3">
                <button type="button" class="btn btn-secondary btn-sm m-1" @onclick="RegretRefresh" title="Avoid edit course">Return</button>
                <button type="submit" class="btn btn-primary btn-sm m-1" title="Save this edit form">Save</button>
            </div>
        </EditForm>
    </section>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int IId { get; set; }

    private EditContext courseContext = default!;

    private CourseDto course = new();

    private List<DocumentDto> documents = new();

    private AppUserDto loggeduser = new(); // Info om den som för tillfället är inloggad.

    protected override async Task OnInitializedAsync()
    {
        xnav.SetReset('a');

        courseContext = new EditContext(course); // Formulärkontext.

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.
        var appuser = await appuserClient.GetAsync();

        var allcourse = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");

        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        if (document is not null) documents = document.ToList(); // Hämtar alla dokument.

        if (allcourse is not null)
        {
            foreach (var cour in allcourse)
            {
                if (cour.Id == IId) // Denna kurs.
                {
                    course.Id = cour.Id;
                    course.Name = cour.Name;
                    course.Description = cour.Description;
                    course.StartDate = cour.StartDate;
                    course.EndDate = cour.EndDate;
                }
            }
        }

        if (appuser is not null && name is not null)
        {
            foreach (var item in appuser) // Hämtar den som för tillfället är inloggad.
            {
                if (item.Email == name) loggeduser = item;
            }
        }

        xnav.SetLogAvatar("d-none", "");

        foreach (var doc in documents) // Letar efter en avatar.
        {
            if (doc.UserId == loggeduser.Id && doc.Id4Course == -2)
            {
                xnav.SetLogAvatar("avatarlog", xClient.GetFilepath() + doc.NameIx + doc.DocName);
            }
        }
    }

    private async Task RegretRefresh()
    {
        xnav.SetDone("The course was NOT edited or created.");
        xnav.SetReset('d');
        await xnav.Intermission(1000, false);
        Navigation.NavigateTo($"/teacherallcourses", true);
    }

    private async Task HandleSubmitCourse()
    {
        Logger.LogInformation("HandleSubmit called");

        if (course.StartDate > course.EndDate)
        {
            await xnav.Intermission(100, true);
            xnav.SetError("Date mismatch (start date is greater than end date).");
            xnav.SetReset('e');
        }
        else
        {
            var lcour = new CourseDto
            {
                Id = course.Id,
                Name = course.Name,
                Description = course.Description,
                StartDate = course.StartDate,
                EndDate = course.EndDate
            };

            await xClient.PutAsync<CourseDto>(IId, lcour, "api/Course");
            await CreateAndRefresh();
        }
    }

    private async Task CreateAndRefresh()
    {
        xnav.SetDone("Your course is edited.");
        xnav.SetReset('d');
        await xnav.Intermission(2000, false);
        Navigation.NavigateTo($"/coursedetail/{IId}", true);
    }
}


