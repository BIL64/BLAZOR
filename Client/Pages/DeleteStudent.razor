@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Sukhrob Ilyosbekov - Stack Overflow*@
@*Endast lärare har åtkomst hit*@

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<AuthorizeView Roles ="Teacher">
    <Authorized>
    <div class="toast-container p-3 position-relative @showClass" data-bs-autohide="true" data-bs-delay="5000">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">@HeaderText</strong>
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
            </div>

            <div class="toast-body">
                <button type="button" class="text-white remyes" @onclick="DeleteNow" title="Remove this user from the system">DELETE NOW</button>
                <button type="button" class="text-white remnot" @onclick="Close">NO</button>
                <button type="button" class="text-white remnot" @onclick="Redirect" title="Make this student to a teacher...">To teacher!</button>
            </div>
        </div>
    </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    private List<DocumentDto> documents = new();

    private List<AppUserDto> users = new();

    public async Task Show()
    {
        xnav.SetReset('a');

        IsVisible = false;
        StateHasChanged();
        await Task.Delay(200);
        xnav.SetInfo("xnavdone", "Remember the delete window only can be found at the bottom of the table. Use search for more easily reach all functions.");
        xnav.SetReset('i');
        HeaderText = "Remove this user...";
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    private async Task DeleteNow()
    {
        bool FindDoc = false;
        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        var appuser = await appuserClient.GetAsync();

        if (document is not null) documents = document.ToList();
        if (appuser is not null) users = appuser.ToList();

        foreach (var use in users)
        {
            if (use.Id == Auxx.GuidId)
            {
                foreach (var doc in documents)
                {
                    if (doc.UserId == use.Id) FindDoc = true;
                }
            }
        }

        if (!FindDoc)
        {
            xnav.SetDone("xnavdone", "This student was deleted.");
            xnav.SetReset('d');
            await appuserClient.RemAsync(Auxx.GuidId);
            Auxx.Flag = true;
        }
        else
        {
            xnav.SetError("xnaverror", "All documents or messages belonging to a student must first be deleted before the student can be deleted.");
            xnav.SetReset('e');
        }
        Close();
    }

    private async Task Redirect()
    {
        xnav.SetDone("xnavdone", "This student was redirected to a teacher.");
        xnav.SetReset('d');

        await appuserClient.PreAsync(Auxx.GuidId, 12);
        Auxx.Flag = true;
        Close();
    }
}