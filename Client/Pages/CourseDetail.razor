@page "/coursedetail/{IId:int}"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager Navigation
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Course detail</PageTitle>

<AuthorizeView Roles="Teacher">
    <Authorized>
        <nav style="display: flex; width: 100%">
            <div style="width: 75%; text-align: left"><h3>Administration of course @CourseId: @NoModels
                    <i style="cursor: pointer" @onclick=" _ => EditCourse(CourseId)" title="@CourseDescription -Click for edit-">@CourseName</i>
                </h3>
            </div>
            <div style="margin-left: auto; margin-right: auto"><h5>@CourseDate</h5></div>
            <div style="margin-left: auto; margin-right: 0"><button type="button" class="text-white delbtn"
                @onclick=" _ => StudentPage()" title="Shortcut to student page">S</button>
            </div>
        </nav>
        <br />
        <p>Plats för dokument...</p>

        <h5>@TestMess1</h5>
        <h5>@TestMess2</h5>
        @if (modules == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var data in modules)
            {
                if (data.IsActive)
                {
                    <section class="modulebox">
                        <div style="display: flex; width: 100%">
                            <div style="width: 75%; text-align: left">
                                <b title="@data.Description -Click for edit-">Module @data.Id:
                                    <i style="cursor: pointer" @onclick=" _ => EditModule(data.Id)">@data.Name</i></b>
                            </div>
                            <div style="margin-left: auto; margin-right: 0"><b>@StartEndDate(data.StartDate, data.EndDate)</b></div>
                        </div>
                        <div style="display: flex; width: 100%">
                            <div style="width: 75%; text-align: left"><button type="button" class="documentbtn">Documents Module</button></div>
                            <div style="margin-left: auto; margin-right: 0">
                                <NavLink style="cursor: pointer" class="oi oi-arrow-circle-bottom text-primary mt-2 text-decoration-none"
                                    @onclick=" _ => DisableModule(data.Id)" title="Disable this module"></NavLink>
                            </div>
                        </div>
                    </section>

                    <article class="activitybox">

                        <table class="table" style="color: #555"> @*Grå text*@
                            <thead>
                                <tr>
                                    <th>No</th>
                                    <th>Aktivity</th>
                                    <th>Type</th>
                                    <th>Date</th>
                                    <th>Items</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var act in activities)
                                {
                                    if (act.IsActive)
                                    {
                                        <tr>
                                            @if (act.ModuleId == data.Id)
                                            {
                                                <td>@act.Id</td>
                                                <td>
                                                    <i style="cursor: pointer" title="@act.Description -Click for edit-"
                                                        @onclick=" _ => EditActivity(act.Id)">@act.Name</i>
                                                </td>
                                                <td>
                                                    @foreach (var actype in activityTypes)
                                                    {
                                                        if (actype.Id == act.ActivityTypeId)
                                                        {
                                                            @actype.Name
                                                        }
                                                    }
                                                </td>
                                                <td>@StartEndDate(act.StartDate, act.EndDate)</td>
                                                <td>
                                                    <div style="margin-left: auto; margin-right: 0">
                                                        <NavLink style="cursor: pointer" class="oi oi-arrow-circle-bottom text-primary mt-2 text-decoration-none"
                                                            @onclick=" _ => DisableActivity(act.Id)" title="Disable this activity"></NavLink>
                                                    </div>
                                                </td>
                                            }
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr style="color:#AAA; background-color:#EEE">
                                            @if (act.ModuleId == data.Id)
                                            {
                                                <td>@act.Id</td>
                                                <td>
                                                    <i style="cursor: pointer" title="@act.Description -Click for edit-"
                                                        @onclick=" _ => EditActivity(act.Id)">@act.Name</i>
                                                </td>
                                                <td>
                                                    <div style="font-weight: bold; color:red">DISABLE</div>
                                                </td>
                                                <td>@StartEndDate(act.StartDate, act.EndDate)</td>
                                                <td>
                                                    <div style="margin-left: auto; margin-right: 0">
                                                        <NavLink style="cursor: pointer" class="oi oi-arrow-circle-top text-primary mt-2 text-decoration-none"
                                                            @onclick=" _ => ActivateActivity(act.Id)" title="Activate this activity"></NavLink>
                                                    </div>
                                                </td>
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <div><button type="button" class="documentbtn">Documents Activity</button></div>

                    </article>
                }
                else
                {
                    <section class="modulebox" style="color:grey; background-color:lightgrey">
                        <div style="display: flex; width: 100%">
                            <div style="width: 75%; text-align: left">
                                <b title="@data.Description -Click for edit-">
                                    Module @data.Id:
                                    <i style="cursor: pointer" @onclick=" _ => EditModule(data.Id)">@data.Name</i>
                                </b>
                            </div>
                            <div style="margin-left: auto; margin-right: 0"><b>@StartEndDate(data.StartDate, data.EndDate)</b></div>
                        </div>
                        <div style="display: flex; width: 100%">
                            <div style="width: 75%; text-align: left"><button type="button" class="documentbtn">Documents Module</button></div>
                            <div style="font-weight: bold; color:red">DISABLE</div>
                            <div style="margin-left: auto; margin-right: 0">
                                <NavLink style="cursor: pointer" class="oi oi-arrow-circle-top text-primary mt-2 text-decoration-none"
                                    @onclick=" _ => ActivateModule(data.Id)" title="Activate this module"></NavLink>
                            </div>
                        </div>
                    </section>

                    <article class="activitybox" style="background-color:#EEE">

                        <table class="table" style="color:#AAA"> @*Grå text*@
                            <thead>
                                <tr>
                                    <th>No</th>
                                    <th>Aktivity</th>
                                    <th>Type</th>
                                    <th>Date</th>
                                    <th>Items</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var act in activities)
                                {
                                    <tr>
                                        @if (act.ModuleId == data.Id)
                                        {
                                            <td>@act.Id</td>
                                            <td><i style="cursor: pointer" title="@act.Description -Click for edit-"
                                                @onclick=" _ => EditActivity(act.Id)">@act.Name</i></td>
                                            <td>
                                                @foreach (var actype in activityTypes)
                                                {
                                                    if (actype.Id == act.ActivityTypeId)
                                                    {
                                                        @actype.Name
                                                    }
                                                }
                                            </td>
                                            <td>@StartEndDate(act.StartDate, act.EndDate)</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div><button type="button" class="documentbtn">Documents Activity</button></div>
                    
                    </article>
                }
            }
        }

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int IId { get; set; }

    private List<CourseDto> courses = new();

    private List<ModuleDto> modules = new();

    private List<ActivityDto> activities = new();

    private List<ActivityTypeDto> activityTypes = new();

    private string CourseName = string.Empty;
    private string NoModels = string.Empty;
    private string CourseDescription = string.Empty;
    private string CourseDate = string.Empty;
    private int CourseId;

    private string TestMess1 = string.Empty; // Test.
    private string TestMess2 = string.Empty; // Test.

    protected override async Task OnInitializedAsync()
    {
        xnav.SetReset('a');

        courses.Clear(); // Direkt feedback kräver att listorna rensas.
        modules.Clear();
        activities.Clear();

        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");
        var activityType = await xClient.GetAsync<IEnumerable<ActivityTypeDto>>("api/Acttype");

        if (course is not null) courses = course.ToList();

        if (course is not null)
        {
            foreach (var cour in course)
            {
                if (cour.Id == IId) // Hämtar Kursinfo.
                {
                    CourseName = cour.Name;
                    CourseDescription = cour.Description;
                    CourseId = cour.Id;
                    CourseDate = StartEndDate(cour.StartDate, cour.EndDate);

                    foreach (var mod in cour.Modules) // Hämtar moduler.
                    {
                        modules.Add(mod);

                        foreach (var act in mod.Activities) // Hämtar aktiviteter.
                        {
                            activities.Add(act);
                        }
                    }
                }
            }
        }
        if (modules.Count < 1)
        {
            NoModels = "No modules could be find...";
            CourseName = "";
        }

        if (activityType is not null) // Hämtar aktivitetstyper.
        {
            activityTypes = activityType.ToList();
        }
    }

    private string StartEndDate(DateTime start, DateTime end) // Returnerar datumsträng.
    {
        return $"{start.ToString().Substring(0, 10)} | {end.ToString().Substring(0, 10)}";
    }

    private async Task DisableModule(int id) // Växlar till inaktiv modul.
    {
        var module = await xClient.GetAsync<IEnumerable<ModuleDto>>("api/Module");

        if (module is not null)
        {
            foreach (var mod in module)
            {
                if (mod.Id == id)
                {
                    var lmod = GetNewModObject(mod, false);
                    await xClient.PutAsync<ModuleDto>(id, lmod, "api/Module");
                    var element = modules.FirstOrDefault(e => e.Id == id);
                    if (element is not null) element = lmod;
                }
            }
        }
        await OnInitializedAsync();
    }

    private async Task DisableActivity(int id) // Växlar till inaktiv aktivitet.
    {
        var activity = await xClient.GetAsync<IEnumerable<ActivityDto>>("api/Activity");

        if (activity is not null)
        {
            foreach (var act in activity)
            {
                if (act.Id == id)
                {
                    var lact = GetNewActObject(act, false);
                    await xClient.PutAsync<ActivityDto>(id, lact, "api/Activity");
                    var element = activities.FirstOrDefault(e => e.Id == id);
                    if (element is not null) element = lact;
                }
            }
        }
        await OnInitializedAsync();
    }

    private async Task ActivateModule(int id) // Växlar till aktiv modul.
    {
        var module = await xClient.GetAsync<IEnumerable<ModuleDto>>("api/Module");

        if (module is not null)
        {
            foreach (var mod in module)
            {
                if (mod.Id == id)
                {
                    var lmod = GetNewModObject(mod, true);
                    await xClient.PutAsync<ModuleDto>(id, lmod, "api/Module");
                    var element = modules.FirstOrDefault(e => e.Id == id);
                    if (element is not null) element = lmod;
                }
            }
        }
        await OnInitializedAsync();
    }

    private async Task ActivateActivity(int id) // Växlar till aktiv aktivitet.
    {
        var activity = await xClient.GetAsync<IEnumerable<ActivityDto>>("api/Activity");

        if (activity is not null)
        {
            foreach (var act in activity)
            {
                if (act.Id == id)
                {
                    var lact = GetNewActObject(act, true);
                    await xClient.PutAsync<ActivityDto>(id, lact, "api/Activity");
                    var element = activities.FirstOrDefault(e => e.Id == id);
                    if (element is not null) element = lact;
                }
            }
        }
        await OnInitializedAsync();
    }

    private ModuleDto GetNewModObject(ModuleDto mod, bool isactive) // Nytt modulobjekt.
    {
        var dto = new ModuleDto
            {
                Id = mod.Id,
                Name = mod.Name,
                Description = mod.Description,
                StartDate = mod.StartDate,
                EndDate = mod.EndDate,
                IsActive = isactive,
                CourseId = mod.CourseId
            };
        return dto;
    }

    private ActivityDto GetNewActObject(ActivityDto act, bool isactive) // Nytt aktivitetsobject.
    {
        var dto = new ActivityDto
            {
                Id = act.Id,
                Name = act.Name,
                Description = act.Description,
                StartDate = act.StartDate,
                EndDate = act.EndDate,
                IsActive = isactive,
                ActivityTypeId = act.ActivityTypeId,
                ModuleId = act.ModuleId
            };
        return dto;
    }

    private void StudentPage()
    {
        Navigation.NavigateTo($"/studentallstudents", true);
    }

    private void EditCourse(int id)
    {
        Navigation.NavigateTo($"/courseeditcourse/{id}", true);
    }

    private void EditModule(int id)
    {
        Navigation.NavigateTo($"/courseeditmodule/{id}", true);
    }

    private void EditActivity(int id)
    {
        Navigation.NavigateTo($"/courseeditactivity/{id}", true);
    }

    private async Task Intermission(int time, bool hide) // Paus.
    {
        if (hide)
        {
            xnav.SetReset('a');
        }
        base.StateHasChanged();
        await Task.Delay(time);
    }
}