@page "/coursedetail/{IId:int}"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppUserDtoClient appuserClient
@inject NavigationManager Navigation
@inject XLangTeacher xtea
@inject XLangDetail xdet
@inject XLangToast xtoa
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Course detail</PageTitle>

<AuthorizeView Roles="Teacher">
    <Authorized>
        <nav class="d-flex">
            <div style="width: 75%"><h3>@xdet.TxtText[1]: @CourseId @NoModules @* Administration of this course *@
                <i style="cursor: pointer" @onclick=" _ => EditCourse(CourseId)" title="@CourseDescription @xdet.TxtTitle[4]">@CourseName</i>
                </h3>
            </div>
            <div style="margin: 0 auto 0 auto">
                <h5>@CourseDate
                    <span style="position: relative; top: -2px" class="h6">
                        @if (CourseH)
                        {
                            <span style="cursor: pointer" class="oi oi-x text-danger mx-2 text-decoration-none"
                            @onclick=" _ => ShowOrHide(IId, 0, 'C')" title=@xdet.TxtTitle[11]></span>
                        }
                        else
                        {
                            <span style="cursor: pointer" class="oi oi-aperture text-primary mx-2 text-decoration-none"
                            @onclick=" _ => ShowOrHide(IId, 1, 'C')" title=@xdet.TxtTitle[12]></span>
                        }
                    </span>
                </h5>
            </div>
            <div style="margin: 0 0 0 auto">
                <button type="button" class="mb-1 text-white delbtn" @onclick="DateCheck" title=@xdet.TxtTitle[1]>DC</button>
                <button type="button" class="mb-1 text-white delbtn" @onclick="StudentPage" title=@xdet.TxtTitle[2]>S</button>
            </div>
        </nav> 
        <nav class="d-flex">
            <div style="margin: 20px 0 0 auto">
                <button type="button" class="docplusbtn"
                @onclick=" _ => DocSaveControl(IId, 2, CourseName)" title=@xdet.TxtTitle[3]>+ DOC</button>
            </div>
        </nav>

        <div class="container"> @*Eventuella dokument som ingår läggs ut här*@
            <div class="d-flex flex-wrap">
                @foreach (var doc in documents)
                {
                    <ul class="nav">
                        @if (doc.Id4Course == CourseId)
                        {
                            <li class="doclink" title="File: @doc.Description by @doc.Author @doc.TimeStamp">
                                <span @onclick=" _ => OpenFileControl(doc.NameIx, doc.DocName)">@doc.DocName</span>
                                <span class="oi oi-file text-primary text-decoration-none docicon"
                                @onclick=" _ => DocEditControl(doc.Id, 2)"></span>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div><br />

        <ToastDocumentAdd @ref="docsaveRef" /> @*Filsparfönster*@
        <ToastDocumentEdit @ref="doceditRef" /> @*Filredigeringsfönster*@
        <ToastFastModuleDate @ref="fastmodRef" /> @*Datumredigeringsfönster*@
        <ToastFastActivityDate @ref="fastactRef" /> @*Datumredigeringsfönster*@
        <ToastCopyModule @ref="copymodRef" /> @*Modulkopiering*@
        <ToastOrderModule @ref="ordermodRef" /> @*Modulordning*@

        <h5>@TestMess1</h5>
        <h5>@TestMess2</h5>

        @if (modules == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <EditForm Context="searchlmslexnet" Model="@modules" OnSubmit="OnInitializedAsync">
                <div class="input-group">
                    <InputText class="form-control" @bind-Value="searchString" placeholder="Module name" />
                    <div style="z-index: 0">
                        <button type="submit" class="btn btn-outline-dark">Search</button>
                    </div>
                    <div style="z-index: 0">
                        <button type="button" @onclick="GetCurrentModule" class="btn btn-outline-dark">Current</button>
                    </div>
                </div>
            </EditForm><br />

            @foreach (var data in modules)
            {
                if (data.Select != 0)
                {
                    if (data.StartDate < DateTime.Now && data.EndDate > DateTime.Now)
                    {
                        if (data.Select == 1 || data.Select == 10 || data.Select == 2 || data.Select == 20)
                        {
                            classModTopic = "moduleboxtopic";
                            classActTopic = "activityboxtopic";
                        }

                        if (data.Select == 3)
                        {
                            classModTopic = "module3T_boxtopic";
                            classActTopic = "activityboxtopic";
                        }

                        if (data.Select == 4)
                        {
                            classModTopic = "module4T_box";
                            classActTopic = "activitybox";
                        }

                        if (data.Select == 5)
                        {
                            classModTopic = "module4T_box";
                            classActTopic = "activity5T_box";
                        }
                    }
                    else
                    {
                        if (data.Select == 1 || data.Select == 10 || data.Select == 2 || data.Select == 20)
                        {
                            classModTopic = "modulebox";
                            classActTopic = "activitybox";
                        }

                        if (data.Select == 3)
                        {
                            classModTopic = "module3T_box";
                            classActTopic = "activity3T_box";
                        }

                        if (data.Select == 4)
                        {
                            classModTopic = "module4T_box";
                            classActTopic = "activitybox";
                        }

                        if (data.Select == 5)
                        {
                            classModTopic = "module4T_box";
                            classActTopic = "activity5T_box";
                        }
                    }

                    <section class="@classModTopic">
                        <div style="display: flex">
                            <div style="width: 85%">
                                @if (data.Select == 1 || data.Select == 10)
                                {
                                    <b title="@data.Description @xdet.TxtTitle[4]">@xdet.TxtText[8] @data.Id: @* Module *@
                                        <i style="cursor: pointer" @onclick=" _ => EditModule(data.Id)">@data.Name</i></b>
                                }
                                else
                                {
                                    if (data.Select == 3)
                                    {
                                        <b title=@xdet.TxtTitle[5]>
                                            <i style="cursor: pointer; margin-left: 10px" @onclick=" _ => EditModule(data.Id)">@data.Name</i></b>
                                    }
                                    else
                                    {
                                        <b title="@data.Description @xdet.TxtTitle[4]">@xdet.TxtText[8] @* Module *@
                                            <i style="cursor: pointer" @onclick=" _ => EditModule(data.Id)">@data.Name</i></b>
                                    }
                                }
                                <span class="order" @onclick=" _ => OrderModule(data.Id)" title=@xdet.TxtTitle[6]>@data.Morder</span>
                            </div>
                            <div style="margin: 0 0 0 auto"><b style="cursor: pointer" @onclick=" _ => ModuleDate(data.Id)"
                                title=@xdet.TxtTitle[7]>@XNavMenu.StartEndDate(data.StartDate, data.EndDate)</b>
                            </div>
                        </div>
                        <div style="display: flex">

                            @{Empty = true;}
                            @if (data.Select != 3 && data.Select != 4 && data.Select != 5)
                            {
                                <div style="width: 75%; margin-top: 20px">
                                    <button type="button" class="docplusbtn" @onclick=" _ => DocSaveControl(data.Id, 30, data.Name)"
                                    title=@xdet.TxtTitle[8]>+ DOC</button>
                                    <div class="dropdoc">
                                        <button  type="button" id="M@(data.Id)" class="docviewbtn">DOCs</button>
                                        <div class="dropdoc-content">
                                            @foreach (var doc in documents)
                                            {
                                                if (doc.ModuleId == data.Id)
                                                {
                                                    if (doc.DocName != "")
                                                    {
                                                        // Öppnar filen samt visar dokumentets formulärdata.
                                                        <a @onclick="_ => OpenFileControl(doc.NameIx, doc.DocName)"
                                                        title="File: @doc.Description by @doc.Author @doc.TimeStamp">@doc.DocName</a>
                                                    }
                                                    else
                                                    {
                                                        <a @onclick="_ => ShowMessControl(doc.Description, doc.Author, doc.TimeStamp)"
                                                        title="Mess: @doc.Description @doc.TimeStamp">By @doc.Author</a>
                                                    }
                                                    Empty = false;
                                                }
                                            }
                                        </div>
                                    </div>

                                    @if (!Empty)
                                    {
                                        if (data.Select > 8)
                                        {
                                            <NavLink style="cursor: pointer" class="oi oi-x mx-2 text-danger text-decoration-none"
                                            @onclick=" _ => ShowOrHide(data.Id, (byte) (data.Select / 10), 'M')" title=@xdet.TxtTitle[9]></NavLink>
                                        }
                                        else
                                        {
                                            <NavLink style="cursor: pointer" class="oi oi-aperture mx-2 text-primary text-decoration-none"
                                            @onclick=" _ => ShowOrHide(data.Id, (byte) (data.Select * 10), 'M')" title=@xdet.TxtTitle[10]></NavLink>
                                        }
                                    }
                                </div>
                            }
                            else
                            {
                                if (data.Select == 3)
                                {
                                    <div style="font-size: 0.8rem; text-indent: 10px; color:darkslategrey" title=@xdet.TxtTitle[14]>
                                        <em>@data.Description</em></div>
                                }
                            }

                            <div style="margin: 0 0 0 auto">
                                <NavLink style="cursor: pointer; margin-right: 2px" class="oi oi-layers text-primary text-decoration-none"
                                @onclick=" _ => CopyModule(data.Id, data.Name)" title=@xdet.TxtTitle[15]></NavLink>

                                <NavLink style="cursor: pointer; margin-right: 2px" class="oi oi-menu text-primary text-decoration-none"
                                @onclick=" _ => SelectModuleType(data.Id, 5)" title=@xdet.TxtTitle[16]></NavLink>

                                <NavLink style="cursor: pointer; margin-right: 2px" class="oi oi-list text-primary text-decoration-none"
                                @onclick=" _ => SelectModuleType(data.Id, 4)" title=@xdet.TxtTitle[17]></NavLink>

                                <NavLink style="cursor: pointer; margin-right: 2px" class="oi oi-folder text-primary text-decoration-none"
                                @onclick=" _ => SelectModuleType(data.Id, 3)" title=@xdet.TxtTitle[18]></NavLink>

                                <NavLink style="cursor: pointer; margin-right: 2px" class="oi oi-document text-primary text-decoration-none"
                                @onclick=" _ => SelectModuleType(data.Id, 1)" title=@xdet.TxtTitle[19]></NavLink>

                                <NavLink style="cursor: pointer" class="oi oi-arrow-circle-bottom mt-2 text-primary text-decoration-none"
                                @onclick=" _ => ActivateOrDisable(data.Id, 0)" title=@xdet.TxtTitle[20]></NavLink>
                            </div>
                        </div>
                    </section>

                    <article class="@classActTopic">

                        <table class="table" style="color: #555"> @*Grå text*@
                            <thead>
                                @if (data.Select == 1 || data.Select == 10)
                                {
                                    <tr>
                                        <th>@xdet.TxtText[2]</th> @* Nr *@
                                        <th title=@xdet.TxtTitle[21]>@xdet.TxtText[3]</th> @* Activity *@
                                        <th>@xdet.TxtText[5]</th> @* Type *@
                                        <th>@xdet.TxtText[6]</th> @* Date *@
                                        <th>@xdet.TxtText[7]</th> @* Appendix *@
                                    </tr>
                                }

                                @if (data.Select == 2 || data.Select == 20 || data.Select == 3)
                                {
                                    <tr>
                                        <th title=@xdet.TxtTitle[21]>@xdet.TxtText[3]</th> @* Activity *@
                                        <th>@xdet.TxtText[5]</th> @* Type *@
                                        <th>@xdet.TxtText[6]</th> @* Date *@
                                        <th>@xdet.TxtText[7]</th> @* Appendix *@
                                    </tr>
                                }

                                @if (data.Select == 4)
                                {
                                    <tr>
                                        <th title=@xdet.TxtTitle[21]>@xdet.TxtText[3]</th> @* Activity *@
                                        <th title=@xdet.TxtTitle[22]>@xdet.TxtText[4]</th> @* Description *@
                                        <th>@xdet.TxtText[7]</th> @* Appendix *@
                                    </tr>
                                }

                                @if (data.Select == 5)
                                {
                                    <tr title=@xdet.TxtTitle[22]>
                                        @* Text message (the description of the aktivity) *@
                                        <th>@xdet.TxtText[9] <u>@xdet.TxtText[10]</u> @xdet.TxtText[11]</th>
                                    </tr>
                                }
                            </thead>
                            <tbody>
                                @foreach (var act in activities)
                                {
                                    if (act.Select > 0)
                                    {
                                        <tr>
                                            @if (act.ModuleId == data.Id)
                                            {
                                                if (data.Select == 1 || data.Select == 10)
                                                {
                                                    <td>@act.Id</td>
                                                }

                                                if (data.Select != 5)
                                                {
                                                    if (data.Select == 4)
                                                    {
                                                        styleTitle = @xdet.TxtTitle[4];
                                                    }
                                                    else
                                                    {
                                                        styleTitle = @act.Description + " " + @xdet.TxtTitle[4];
                                                    }

                                                    if (act.Name.IndexOf("#r#") != -1 && !IsStyle)
                                                    {
                                                        <td><i style="cursor: pointer; color: crimson" title="@styleTitle"
                                                            @onclick=" _ => EditActivity(act.Id)">@act.Name</i></td>
                                                        IsStyle = true;
                                                    }

                                                    if (act.Name.IndexOf("#m#") != -1 && !IsStyle)
                                                    {
                                                        <td><i style="cursor: pointer; color: magenta" title="@styleTitle"
                                                            @onclick=" _ => EditActivity(act.Id)">@act.Name</i></td>
                                                        IsStyle = true;
                                                    }

                                                    if (act.Name.IndexOf("#g#") != -1 && !IsStyle)
                                                    {
                                                        <td><i style="cursor: pointer; color: darkgreen" title="@styleTitle"
                                                            @onclick=" _ => EditActivity(act.Id)">@act.Name</i></td>
                                                        IsStyle = true;
                                                    }

                                                    if (act.Name.IndexOf("#b#") != -1 && !IsStyle)
                                                    {
                                                        <td><i style="cursor: pointer; color: royalblue" title="@styleTitle"
                                                            @onclick=" _ => EditActivity(act.Id)">@act.Name</i></td>
                                                        IsStyle = true;
                                                    }

                                                    if (act.Name.IndexOf("#B#") != -1 && !IsStyle)
                                                    {
                                                        <td><i style="cursor: pointer; color: black" title="@styleTitle"
                                                            @onclick=" _ => EditActivity(act.Id)">@act.Name</i></td>
                                                        IsStyle = true;
                                                    }

                                                    if (act.Name.IndexOf("#BB#") != -1 && !IsStyle)
                                                    {
                                                        <td><i style="cursor: pointer; color: black" title="@styleTitle"
                                                            @onclick=" _ => EditActivity(act.Id)">@act.Name</i></td>
                                                        IsStyle = true;
                                                    }

                                                    if (!IsStyle)
                                                    {
                                                        <td><i style="cursor: pointer" title="@styleTitle"
                                                            @onclick=" _ => EditActivity(act.Id)">@act.Name</i></td>
                                                    }
                                                    IsStyle = false;
                                                }

                                                if (data.Select != 4 && data.Select != 5)
                                                {
                                                    <td>
                                                        @foreach (var actype in activityTypes)
                                                        {
                                                            if (actype.Id == act.ActivityTypeId)
                                                            {
                                                                @actype.Name
                                                            }
                                                        }
                                                    </td>
                                                    <td>
                                                        @* Visa eller dölja datum i aktiviteter *@
                                                        <span style="cursor: pointer" @onclick=" _ => ActivityDate(act.Id)" title=@xdet.TxtTitle[7]>
                                                            @XNavMenu.StartEndDate(act.StartDate, act.EndDate)</span>
                                                        @if (act.Select > 15)
                                                        {
                                                            <span style="cursor: pointer" class="oi oi-x text-danger mx-2 text-decoration-none"
                                                            @onclick=" _ => ShowOrHide(act.Id, 10, 'A')" title=@xdet.TxtTitle[11]></span>
                                                        }
                                                        else if (act.Select > 5)
                                                        {
                                                            <span style="cursor: pointer" class="oi oi-aperture text-primary mx-2 text-decoration-none"
                                                            @onclick=" _ => ShowOrHide(act.Id, 20, 'A')" title=@xdet.TxtTitle[12]></span>
                                                        }
                                                        else if (act.Select > 1)
                                                        {
                                                            <span style="cursor: pointer" class="oi oi-x text-danger mx-2 text-decoration-none"
                                                            @onclick=" _ => ShowOrHide(act.Id, 1, 'A')" title=@xdet.TxtTitle[11]></span>
                                                        }
                                                        else
                                                        {
                                                            <span style="cursor: pointer" class="oi oi-aperture text-primary mx-2 text-decoration-none"
                                                            @onclick=" _ => ShowOrHide(act.Id, 2, 'A')" title=@xdet.TxtTitle[12]></span>
                                                        }
                                                    </td>
                                                }
                                                else
                                                {
                                                    string des = act.Description.Replace("\n", "<br>");
                                                    MarkupString markup = new(des);

                                                    if (data.Select == 5)
                                                    {
                                                        if (act.Description.IndexOf("Ti") != -1)
                                                        {
                                                            <td style="cursor: pointer"
                                                            title="@xdet.TxtTitle[24] @act.Name @xdet.TxtTitle[4]"
                                                            @onclick=" _ => EditActivity(act.Id)">@markup
                                                            </td>
                                                        }
                                                        else if (act.Description.IndexOf("Tb") != -1)
                                                        {
                                                            <td style="cursor: pointer; color: royalblue"
                                                            title="@xdet.TxtTitle[24] @act.Name @xdet.TxtTitle[4]"
                                                            @onclick=" _ => EditActivity(act.Id)">@markup
                                                            </td>
                                                        }
                                                        else
                                                        {
                                                            <td style="cursor: pointer; color: darkorange"
                                                            title="@xdet.TxtTitle[24] @act.Name @xdet.TxtTitle[4]"
                                                            @onclick=" _ => EditActivity(act.Id)">@markup
                                                            </td>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <td>@markup</td>
                                                    }
                                                }

                                                <td>
                                                    @if (data.Select != 5)
                                                    {
                                                        <button type="button" class="docplusbtn" @onclick=" _ => DocSaveControl(act.Id, 140, act.Name)"
                                                        title=@xdet.TxtTitle[25]>+ DOC</button>
                                                        <div class="dropdoc">
                                                            <button type="button" id="A@(act.Id)" class="docviewbtn">DOCs</button>
                                                            <div class="dropdoc-content">
                                                                @{
                                                                    Empty = true;
                                                                }
                                                                @foreach (var doc in documents)
                                                                {
                                                                    if (doc.ActivityId == act.Id)
                                                                    {
                                                                        if (doc.DocName != "")
                                                                        {
                                                                            // Öppnar filen samt visar dokumentets formulärdata.
                                                                            <a @onclick="_ => OpenFileControl(doc.NameIx, doc.DocName)"
                                                                            title="File: @doc.Description by @doc.Author @doc.TimeStamp">@doc.DocName</a>
                                                                        }
                                                                        else
                                                                        {
                                                                            <a @onclick="_ => ShowMessControl(doc.Description, doc.Author, doc.TimeStamp)"
                                                                            title="Mess: @doc.Description @doc.TimeStamp">By @doc.Author</a>
                                                                        }
                                                                        Empty = false;
                                                                    }
                                                                }
                                                            </div>
                                                        </div>
                                                    }

                                                    <NavLink style="cursor: pointer" class="oi oi-arrow-circle-bottom text-primary mt-2 text-decoration-none"
                                                    @onclick=" _ => ActivateOrDisable(act.Id, 1)" title=@xdet.TxtTitle[26]></NavLink>
                                                </td>
                                                <td>
                                                    @if (!Empty && data.Select != 5)
                                                    {
                                                        @* Visa eller dölja dokument i aktiviteter *@
                                                        if (act.Select > 15)
                                                        {
                                                            <NavLink style="cursor: pointer" class="oi oi-x text-danger mt-2 text-decoration-none"
                                                            @onclick=" _ => ShowOrHide(act.Id, 2, 'A')" title=@xdet.TxtTitle[9]></NavLink>
                                                        }
                                                        else if (act.Select > 5)
                                                        {
                                                            <NavLink style="cursor: pointer" class="oi oi-x text-danger mt-2 text-decoration-none"
                                                            @onclick=" _ => ShowOrHide(act.Id, 1, 'A')" title=@xdet.TxtTitle[9]></NavLink>
                                                        }
                                                        else if (act.Select > 1)
                                                        {
                                                            <NavLink style="cursor: pointer" class="oi oi-aperture text-primary mt-2 text-decoration-none"
                                                            @onclick=" _ => ShowOrHide(act.Id, 20, 'A')" title=@xdet.TxtTitle[10]></NavLink>
                                                        }
                                                        else
                                                        {
                                                            <NavLink style="cursor: pointer" class="oi oi-aperture text-primary mt-2 text-decoration-none"
                                                            @onclick=" _ => ShowOrHide(act.Id, 10, 'A')" title=@xdet.TxtTitle[10]></NavLink>
                                                        }
                                                    }
                                                </td>
                                            }
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr style="color:#AAA; background-color:#EEE">
                                            @if (act.ModuleId == data.Id)
                                            {
                                                <td>
                                                    <i style="cursor: pointer" title="@act.Description @xdet.TxtTitle[4]"
                                                    @onclick=" _ => EditActivity(act.Id)">@act.Name</i>
                                                </td>
                                                <td>
                                                    <div style="font-weight: bold; color:red">@xdet.TxtText[12]</div> @* DISABLE *@
                                                </td>
                                                <td>@XNavMenu.StartEndDate(act.StartDate, act.EndDate)</td>
                                                <td>
                                                    <div style="margin-left: auto; margin-right: 0">
                                                        <NavLink style="cursor: pointer" class="oi oi-arrow-circle-top text-primary mt-2 text-decoration-none"
                                                        @onclick=" _ => ActivateOrDisable(act.Id, 3)" title=@xdet.TxtTitle[28]></NavLink>
                                                    </div>
                                                </td>
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>

                        @if (data.Select == 5)
                        {
                            <div style="font-family:'Courier New'; font-size: 0.8rem; font-style: italic">
                                <details>
                                    <summary title=@xdet.TxtTitle[30]>@xdet.TxtText[13]</summary>
                                    @xdet.TxtText[14] @* Info about #T#... *@
                                </details>
                            </div>
                        }
                    </article>
                }

                if (data.Select == 0)
                {
                    <section class="modulebox" style="color:grey; background-color:lightgrey">
                        <div style="display: flex">
                            <div style="width: 85%">
                                <b title="@data.Description @xdet.TxtTitle[4]">@xdet.TxtText[8] @* Module *@
                                    <i style="cursor: pointer" @onclick=" _ => EditModule(data.Id)">@data.Name</i></b>
                                <span class="order" @onclick=" _ => OrderModule(data.Id)" title=@xdet.TxtTitle[6]>@data.Morder</span>
                            </div>
                            <div style="margin-left: auto; margin-right: 0"><b>@XNavMenu.StartEndDate(data.StartDate, data.EndDate)</b></div>
                        </div>
                        <div style="display: flex">
                            <div style="font-weight: bold; color:red; margin-left: auto; margin-right: auto">@xdet.TxtText[12]</div> @* DISABLE *@
                            <div style="margin: 0 0 0 auto">
                                <NavLink style="cursor: pointer" class="oi oi-arrow-circle-top text-primary mt-2 text-decoration-none"
                                @onclick=" _ => ActivateOrDisable(data.Id, 2)" title=@xdet.TxtTitle[29]></NavLink>
                            </div>
                        </div>
                    </section>

                    <article class="activitybox" style="background-color:#EEE">

                        <table class="table" style="color:#AAA"> @*Grå text*@
                            <thead>
                                <tr>
                                    <th>@xdet.TxtText[3]</th> @* Activity *@
                                    <th>@xdet.TxtText[5]</th> @* Type *@
                                    <th>@xdet.TxtText[6]</th> @* Date *@
                                    <th>@xdet.TxtText[7]</th> @* Appendix *@
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var act in activities)
                                {
                                    <tr>
                                        @if (act.ModuleId == data.Id)
                                        {
                                            <td><i style="cursor: pointer" title="@act.Description @xdet.TxtTitle[4]"
                                                @onclick=" _ => EditActivity(act.Id)">@act.Name</i></td>
                                            <td>
                                                @foreach (var actype in activityTypes)
                                                {
                                                    if (actype.Id == act.ActivityTypeId)
                                                    {
                                                        @actype.Name
                                                    }
                                                }
                                            </td>
                                            <td>@XNavMenu.StartEndDate(act.StartDate, act.EndDate)</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>

                    </article>
                }
            }
        }

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int IId { get; set; }

    private ToastDocumentAdd? docsaveRef; // Filsparfönster.

    private async Task DocSaveControl(int id, byte doctype, string name) // Filsparfönster.
    {
        Auxx.IntId = id;
        Auxx.DocType = doctype;
        Auxx.Name4Type = name;
        await docsaveRef!.Show();
        await RefreshAfterThis(false); // Uppdaterar sidan.
    }

    private ToastDocumentEdit? doceditRef; // Filredigeringsfönster.

    private async Task DocEditControl(int id, byte doctype) // Filredigeringsfönster.
    {
        Auxx.IntId = id;
        Auxx.DocType = doctype;
        Auxx.Documents = documents;
        await doceditRef!.Show();
        await RefreshAfterThis(false); // Uppdaterar sidan.
    }

    private ToastFastModuleDate? fastmodRef; // Datumredigeringsfönster.

    private async Task ModuleDate(int id) // Datumredigeringsfönster.
    {
        Auxx.IntId = id;
        await fastmodRef!.Show();
        await RefreshAfterThis(false); // Uppdaterar sidan.
    }

    private ToastFastActivityDate? fastactRef; // Datumredigeringsfönster.

    private async Task ActivityDate(int id) // Datumredigeringsfönster.
    {
        Auxx.IntId = id;
        await fastactRef!.Show();
        await RefreshAfterThis(false); // Uppdaterar sidan.
    }

    private ToastCopyModule? copymodRef; // Modulkopiering.

    private async Task CopyModule(int id, string name) // Modulkopiering.
    {
        Auxx.IntId = id;
        Auxx.CourseId = IId;
        Auxx.Name4Type = name;
        await copymodRef!.Show();
        await RefreshAfterThis(false); // Uppdaterar sidan.
    }

    private ToastOrderModule? ordermodRef; // Modulkopiering.

    private async Task OrderModule(int id) // Modulordning.
    {
        Auxx.IntId = id;
        Auxx.CourseId = IId;
        await ordermodRef!.Show();
        await RefreshAfterThis(false); // Uppdaterar sidan.
    }

    private List<CourseDto> courses = new();

    private List<ModuleDto> modules = new();

    private List<ActivityDto> activities = new();

    private List<ActivityTypeDto> activityTypes = new();

    private List<DocumentDto> documents = new();

    private AppUserDto loggeduser = new(); // Info om den som för tillfället är inloggad.

    private string CourseName = string.Empty;
    private string NoModules = string.Empty;
    private string CourseDescription = string.Empty;
    private string CourseDate = string.Empty;
    private string classModTopic = string.Empty;
    private string classActTopic = string.Empty;
    private string styleTitle = string.Empty;
    private string searchString = string.Empty;
    private int CourseId;
    private bool Empty;
    private bool IsStyle;
    private bool CourseH;

    private string TestMess1 = string.Empty; // Test.
    private string TestMess2 = string.Empty; // Test.

    private async Task RefreshAfterThis(bool delay) // Uppdaterar efter förändring av innehåll.
    {
        while (!Auxx.Flag) await xnav.Intermission(500, false); // Nödvändigt för att kunna uppdatera sidan efteråt.
        if (delay) await xnav.Intermission(1500, false); // Undviker att ShowAvatar-metoden omgående nollställer errormenyn.
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (xdet.RenderPage != "STILL_HERE")
        {
            xnav.SetJohnDoe(false);
            xnav.MainRole = 2;
            xnav.ClassSettings = "d-block"; // Settings.
            if (await xClient.GetStorage<string>("LMS_Lang") == "EN") { xtea.SetMenu_EN(); xdet.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "SV") { xtea.SetMenu_SV(); xdet.SetLanguage_SV(); xtoa.SetLanguage_SV(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "DE") { xtea.SetMenu_DE(); xdet.SetLanguage_DE(); xtoa.SetLanguage_DE(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "FR") { xtea.SetMenu_FR(); xdet.SetLanguage_FR(); xtoa.SetLanguage_FR(); }
            else { xtea.SetMenu_EN(); xdet.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
        }

        if (!Auxx.Flag) xnav.SetReset('a');
        Auxx.Flag = false;

        courses.Clear(); // Direkt feedback kräver att listorna rensas.
        modules.Clear();
        activities.Clear();
        activityTypes.Clear();
        documents.Clear();

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.

        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");
        var activityType = await xClient.GetAsync<IEnumerable<ActivityTypeDto>>("api/Acttype");
        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        var appuser = await appuserClient.GetAsync();

        if (document is not null) documents = document.ToList(); // Hämtar alla dokument.

        if (course is not null) courses = course.ToList();

        if (course is not null)
        {
            foreach (var cour in course)
            {
                if (cour.Id == IId) // Hämtar Kursinfo.
                {
                    CourseName = cour.Name;
                    CourseDescription = cour.Description;
                    CourseId = cour.Id;
                    CourseDate = XNavMenu.StartEndDate(cour.StartDate, cour.EndDate);
                    CourseH = cour.HideDate;

                    foreach (var mod in cour.Modules) // Hämtar moduler.
                    {
                        // Sökfiltrering med IndexOf: modulnamn.
                        if (!string.IsNullOrWhiteSpace(searchString))
                        {
                            if (mod.Name.ToLower().IndexOf(searchString.ToLower()) != -1) modules.Add(mod);
                        }
                        else modules.Add(mod);

                        if (!string.IsNullOrWhiteSpace(searchString) && modules.Count < 1) CourseName = xdet.TxtText[17];

                        foreach (var act in mod.Activities) // Hämtar aktiviteter.
                        {
                            activities.Add(act);
                        }
                    }
                }
            }
        }
        else
        {
            CourseName = xdet.TxtText[18]; // No course could be find...
        }

        if (modules.Count < 1 && CourseName != xdet.TxtText[17]) // No module matched the search term...
        {
            NoModules = xdet.TxtText[19]; // No modules could be find...
            CourseName = "";
        }
        else NoModules = "";

        if (string.IsNullOrWhiteSpace(searchString) && modules.Count > 1) // Sist: sortering av moduler.
        {
            modules = OrderModules(modules);
        }

        if (activityType is not null) // Hämtar aktivitetstyper.
        {
            activityTypes = activityType.ToList();
        }

        if (appuser is not null && name is not null)
        {
            foreach (var item in appuser) // Hämtar den som för tillfället är inloggad.
            {
                if (item.Email == name) loggeduser = item;
            }
        }

        xnav.SetLogAvatar("d-none", "");

        foreach (var doc in documents) // Letar efter en avatar.
        {
            if (doc.UserId == loggeduser.Id && doc.Id4Course == -2)
            {
                xnav.SetLogAvatar("avatarlog", xClient.GetFilepath() + doc.NameIx + doc.DocName);
            }
        }

        xdet.OnChange += StateHasChanged;
        xtoa.OnChange += StateHasChanged;
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        foreach (var mod in modules)
        {
            foreach (var doc in documents)
            {
                // Byter klass på knapp om dokument hittas.
                if (mod.Id == doc.ModuleId && (mod.Select == 1 || mod.Select == 10 || mod.Select == 2 || mod.Select == 20))
                    await xClient.ChangeClass("M" + mod.Id, "docviewbtn-docs");
            }

            foreach (var act in activities)
            {
                if (act.ModuleId == mod.Id)
                {
                    foreach (var doc in documents)
                    {
                        // Byter klass på knapp om dokument hittas.
                        if (act.Id == doc.ActivityId && act.Select != 0 && mod.Select != 0 && mod.Select != 5)
                            await xClient.ChangeClass("A" + act.Id, "docviewbtn-docs");
                    }
                }
            }
        }
    }

    private List<ModuleDto> OrderModules(List<ModuleDto> modules) // Sorterar moduler efter Morder.
    {
        int i = 0;
        int over = 0;
        int number = modules.Count;
        bool IsSameName = false;
        ModuleDto[] marray = new ModuleDto[number];

        foreach (var mod1 in modules)
        {
            if (mod1.Morder > number) over++;

            foreach (var mod2 in modules)
            {
                if (mod1.Name == mod2.Name && mod1.Id != mod2.Id) IsSameName = true;
            }
        }

        if (over > 0)
        {
            if (over == 1)
            {
                xnav.SetError(xdet.TxtText[20]); // Order number is greater...
                xnav.SetReset('e');
            }
            else
            {
                xnav.SetError(xdet.TxtText[21]); // Several order number is greater...
                xnav.SetReset('e');
            }
        }

        if (IsSameName)
        {
            xnav.SetError(xdet.TxtText[22]); // Name is equal...
            xnav.SetReset('e');
        }

        do
        {
            // Lägger först in de som har fått ett ordernummer.
            foreach (var mod in modules)
            {
                if (mod.Morder == i + 1) marray[i] = mod;
            }
            i++;
        } while (i < number);

        i = 0;

        // Lägger in resterande utan något ordernummer.
        foreach (var mod in modules)
        {
            // Hoppar över de platser som är upptagna och stoppar dubletter.
            while (marray[i] is not null && i < number - 1) i++;
            if (mod.Morder == 0 || mod.Morder >= number) marray[i] = mod;
        }

        return marray.ToList();
    }

    private async Task SelectModuleType(int id, byte select) // Växlar till vald modultyp.
    {
        var module = await xClient.GetAsync<IEnumerable<ModuleDto>>("api/Module");

        if (module is not null)
        {
            foreach (var mod in module)
            {
                if (mod.Id == id)
                {
                    var lmod = GetNewModObject(mod, select);
                    await xClient.PutAsync<ModuleDto>(id, lmod, "api/Module");
                    var element = modules.FirstOrDefault(e => e.Id == id);
                    if (element is not null) element = lmod;
                }
            }
        }
        await OnInitializedAsync();
    }

    private async Task ActivateOrDisable(int id, byte value) // Sköter inaktivering och aktivering.
    {
        var module = await xClient.GetAsync<IEnumerable<ModuleDto>>("api/Module");
        var activity = await xClient.GetAsync<IEnumerable<ActivityDto>>("api/Activity");

        if (value == 0 || value == 2)
        {
            if (module is not null)
            {
                foreach (var mod in module)
                {
                    if (mod.Id == id)
                    {
                        var lmod = GetNewModObject(mod, value);
                        await xClient.PutAsync<ModuleDto>(id, lmod, "api/Module");
                        var element = modules.FirstOrDefault(e => e.Id == id);
                        if (element is not null) element = lmod;
                    }
                }
            }
        }

        if (value == 1 || value == 3)
        {
            if (activity is not null)
            {
                foreach (var act in activity)
                {
                    if (act.Id == id && value == 1)
                    {
                        var lact = GetNewActObject(act, 0);
                        await xClient.PutAsync<ActivityDto>(id, lact, "api/Activity");
                        var element = activities.FirstOrDefault(e => e.Id == id);
                        if (element is not null) element = lact;
                    }

                    if (act.Id == id && value == 3)
                    {
                        var lact = GetNewActObject(act, 1);
                        await xClient.PutAsync<ActivityDto>(id, lact, "api/Activity");
                        var element = activities.FirstOrDefault(e => e.Id == id);
                        if (element is not null) element = lact;
                    }
                }
            }
        }
        await OnInitializedAsync();
    }

    private async Task ShowOrHide(int id, byte value, char MA) // Visa eller dölja dokument eller datum?
    {
        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");
        var module = await xClient.GetAsync<IEnumerable<ModuleDto>>("api/Module");
        var activity = await xClient.GetAsync<IEnumerable<ActivityDto>>("api/Activity");

        if (MA == 'C')
        {
            if (course is not null)
            {
                foreach (var cou in course)
                {
                    if (cou.Id == id)
                    {
                        if (value == 1) CourseH = true; else CourseH = false;
                        var lcou = GetNewCouObject(cou, CourseH);
                        await xClient.PutAsync<CourseDto>(id, lcou, "api/Course");
                        var element = courses.FirstOrDefault(e => e.Id == id);
                        if (element is not null) element = lcou;
                    }
                }
            }
        }

        if (MA == 'M')
        {
            if (module is not null)
            {
                foreach (var mod in module)
                {
                    if (mod.Id == id)
                    {
                        var lmod = GetNewModObject(mod, value);
                        await xClient.PutAsync<ModuleDto>(id, lmod, "api/Module");
                        var element = modules.FirstOrDefault(e => e.Id == id);
                        if (element is not null) element = lmod;
                    }
                }
            }
        }

        if (MA == 'A')
        {
            if (activity is not null)
            {
                foreach (var act in activity)
                {
                    var lact = GetNewActObject(act, (byte) (value));
                    await xClient.PutAsync<ActivityDto>(id, lact, "api/Activity");
                    var element = activities.FirstOrDefault(e => e.Id == id);
                    if (element is not null) element = lact;
                }
            }
        }
        await OnInitializedAsync();
    }

    private CourseDto GetNewCouObject(CourseDto cou, bool hide) // Nytt kursobjekt.
    {
        var dto = new CourseDto
        {
            Id = cou.Id,
            Name = cou.Name,
            Description = cou.Description,
            StartDate = cou.StartDate,
            EndDate = cou.EndDate,
            HideDate = hide
        };
        return dto;
    }

    private ModuleDto GetNewModObject(ModuleDto mod, byte select) // Nytt modulobjekt.
    {
        var dto = new ModuleDto
        {
            Id = mod.Id,
            Morder = mod.Morder,
            Name = mod.Name,
            Description = mod.Description,
            StartDate = mod.StartDate,
            EndDate = mod.EndDate,
            Select = select,
            CourseId = mod.CourseId
        };
        return dto;
    }

    private ActivityDto GetNewActObject(ActivityDto act, byte select) // Nytt aktivitetsobject.
    {
        var dto = new ActivityDto
        {
            Id = act.Id,
            Name = act.Name,
            Description = act.Description,
            StartDate = act.StartDate,
            EndDate = act.EndDate,
            Select = select,
            ActivityTypeId = act.ActivityTypeId,
            ModuleId = act.ModuleId
        };
        return dto;
    }

    private async Task DateCheck()
    {
        string LimCheck = string.Empty;
        string EndCheck = string.Empty;
        string CourseCheck = string.Empty;
        string ModuleCheck = string.Empty;
        string ActivityCheck = string.Empty;
        int[] datearray = new int[100000000];
        string dates = string.Empty;
        int InInt = 0;
        int Count = 1;

        xnav.SetDone(xdet.TxtDateC[1]); // Perform calculation...
        xnav.SetReset('d');
        await xnav.Intermission(1, false);

        // Lägger in siffror på olika platser i arrayen. En plats som dessförinnan var ett datum.
        // Undersöker även om PlacingInArray returnerar 0, vilket indikerar beräkningsfel.
        foreach (var cour in courses)
        {
            if (cour.Id == IId) // Hämtar kursen.
            {
                // Kollar om kursens startdatum är större än slutdatumet.
                if (cour.StartDate > cour.EndDate) CourseCheck = xdet.TxtDateC[2]; // Mismatch><.

                InInt = PlacingInArray(cour.StartDate, Count, '+');
                if (InInt < 1) LimCheck = xdet.TxtDateC[3]; // Cannot calculate.
                datearray[InInt] = Count;
                InInt = PlacingInArray(cour.EndDate, Count, '-');
                if (InInt < 1) LimCheck = xdet.TxtDateC[3]; // Cannot calculate.
                datearray[InInt] = Count;
                Count++;

                foreach (var mod in cour.Modules) // Hämtar kursens moduler.
                {
                    // Kollar om båda datumen ligger utanför datumspannet för kursen.
                    if (mod.StartDate < cour.StartDate && mod.EndDate < cour.StartDate ||
                    mod.StartDate > cour.EndDate && mod.EndDate > cour.EndDate) ModuleCheck = xdet.TxtDateC[4]; // Mismatch><.

                    // Kollar om modulens startdatum är större än slutdatumet.
                    if (mod.StartDate > mod.EndDate) ModuleCheck = xdet.TxtDateC[5]; // Mismatch><.

                    InInt = PlacingInArray(mod.StartDate, Count, '+');
                    if (InInt < 1) LimCheck = xdet.TxtDateC[6]; // Cannot calculate (overloading).
                    datearray[InInt] = Count;
                    InInt = PlacingInArray(mod.EndDate, Count, '-');
                    if (InInt < 1) LimCheck = xdet.TxtDateC[6]; // Cannot calculate (overloading).
                    datearray[InInt] = Count;
                    Count++;

                    foreach (var act in mod.Activities) // Hämtar kursens aktiviteter.
                    {
                        // Kollar om båda datumen ligger utanför datumspannet för modulen.
                        if (act.StartDate < mod.StartDate && act.EndDate < mod.StartDate ||
                        act.StartDate > mod.EndDate && act.EndDate > mod.EndDate) ActivityCheck = xdet.TxtDateC[7]; // Mismatch><.

                        // Kollar om aktivitetens startdatum är större än slutdatumet.
                        if (act.StartDate > act.EndDate) ActivityCheck = xdet.TxtDateC[8]; // Mismatch><.

                        InInt = PlacingInArray(act.StartDate, Count, '+');
                        if (InInt < 1) LimCheck = xdet.TxtDateC[6]; // Cannot calculate (overloading).
                        datearray[InInt] = Count;
                        InInt = PlacingInArray(act.EndDate, Count, '-');
                        if (InInt < 1) LimCheck = xdet.TxtDateC[6]; // Cannot calculate (overloading).
                        datearray[InInt] = Count;
                        Count++;
                    }
                }
            }
        }

        foreach (var arr in datearray) // Lägger in siffror i rad i en sträng.
        {
            if (arr > 0) dates += arr.ToString();
        }

        Array.Clear(datearray, 0, datearray.Length);

        //// Endast aktuellt om datumnumren kan anta identiska värden.
        //for (int i = 1; i < Count; i++) // Kollar om både start- och slutdatumet för en post blivit överskrivet av någon annan post.
        //{
        //    if (dates.IndexOf(i.ToString()) == -1) EndCheck = "Date mismatch (entangled dates)";
        //}

        for (int i = dates.Length; i > 0; i--) // Tar successivt bort nummerpar.
        {
            if (dates.IndexOf(i.ToString() + i.ToString()) != -1) dates = dates.Replace(i.ToString() + i.ToString(), "");
        }

        if (dates.Length > 0) EndCheck = xdet.TxtDateC[9]; // Inga siffror kvar, ingen osymmetri!

        if (LimCheck == "" && CourseCheck == "" && ModuleCheck == "" && ActivityCheck == "" && EndCheck == "")
        {
            xnav.SetDone(xdet.TxtDateC[10]); // No date errors could be found.
            xnav.SetReset('d');
        }
        else
        {
            if (LimCheck != "" || CourseCheck != "" || ModuleCheck != "" || ActivityCheck != "")
            {
                if (LimCheck != "")
                {
                    xnav.SetError(LimCheck);
                    xnav.SetReset('e');
                }
                else
                {
                    xnav.SetError(CourseCheck + " " + ModuleCheck + " " + ActivityCheck);
                    xnav.SetReset('e');
                }
            }
            else
            {
                xnav.SetError(EndCheck);
                xnav.SetReset('e');
            }
        }
    }

    // Bygger ett heltal av ett datum samt skapar distans mellan dem.
    // Ex 1: 2023-01-01 --> 230101 --> 23 ++ 032 (1 x 31 + 1) ++ 000 + count(1) = 23032001.
    // Ex 2: 2023-06-20 --> 230620 --> 23 ++ 206 (6 x 31 + 20) ++ 999 - count(1) = 23206998.
    // Ex 3: 2023-12-31 --> 231231 --> 23 ++ 403 (12 x 31 + 31) ++ 000 + count(1) = 23403001.

    private int PlacingInArray(DateTime date, int count, char pm)
    {
        int number = 0;

        // Addition av månad gånger 31 plus dagen. Därtill addition med 1000.
        int m_d = 1000 + int.Parse(date.ToString().Substring(5, 2)) * 31 + int.Parse(date.ToString().Substring(8, 2));

        // Om antalet moduler och aktiviteter är större än 499.
        if (count > 499) return 0;

        // Indatumet omvandlas till en sträng, plus m_d och distansen (max 499 moduler och aktiviteter).
        // Parsar detta till ett tal för att slutligen addera eller subtrahera count.
        if (pm == '+') number = int.Parse(date.ToString().Substring(2, 2) + m_d.ToString().Substring(1, 3) + "000") + count;
        if (pm == '-') number = int.Parse(date.ToString().Substring(2, 2) + m_d.ToString().Substring(1, 3) + "999") - count;

        return number;
    }

    private void StudentPage()
    {
        Navigation.NavigateTo("/studentcourse", true);
    }

    private void EditCourse(int id)
    {
        Navigation.NavigateTo($"/courseeditcourse/{id}", true);
    }

    private void EditModule(int id)
    {
        Navigation.NavigateTo($"/courseeditmodule/{id}", true);
    }

    private void EditActivity(int id)
    {
        Navigation.NavigateTo($"/courseeditactivity/{id}", true);
    }

    private async Task OpenFileControl(int ix, string filename)
    {
        await xClient.OpenFile(ix, filename);
    }

    private void ShowMessControl(string description, string author, string timestamp)
    {
        xnav.SetMess(description + " by " + author + " Created: " + timestamp);
        xnav.SetReset('m');
    }

    private void GetCurrentModule() // Hämtar aktuell modul.
    {
        var module = new ModuleDto();
        bool FindMod = false;

        foreach (var mod in modules)
        {
            if (mod.StartDate <= DateTime.Now && mod.EndDate >= DateTime.Now)
            {
                module = mod;
                FindMod = true;
            }
        }

        if (FindMod)
        {
            modules.Clear();
            modules.Add(module);
            xnav.SetDone(xdet.TxtText[15]); // The current module.
            xnav.SetReset('d');
        }
        else
        {
            xnav.SetDone(xdet.TxtText[16]); // There is no current module.
            xnav.SetReset('d');
        }
    }
}