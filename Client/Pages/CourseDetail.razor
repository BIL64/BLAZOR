@page "/coursedetails/{IId:int}"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager Navigation
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Teacher fetch</PageTitle>

<AuthorizeView Roles="Teacher">
    <Authorized>
        <nav style="display: flex; width: 100%">
            <div style="width: 75%; text-align: left"><h3>Administration of course @CourseId: @CourseName</h3></div>
            <div style="margin-left: auto; margin-right: 0"><h5>@CourseDate</h5></div>
        </nav>

        <br />
        <p>Plats för dokument...</p>

        @if (modules == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var data in modules)
            {
                <section class="modulebox" @onclick=" _ => EditModule(data.Id)"><b title="@data.Description">Module @data.Id: <em>@data.Name &nbsp;</em></b>
                    <b style="margin-left: auto">@StartEndDate(data.StartDate, data.EndDate)</b></section>

                <section class="activitybox">

                    <table class="table" style="color: #555"> @*Grå text.*@
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Aktivity</th>
                                <th>Type</th>
                                <th>Date</th>
                                <th>Items</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var act in activities)
                            {
                                <tr @onclick=" _ => EditActivity(act.Id)">
                                    @if (act.ModuleId == data.Id)
                                    {
                                        <td>@act.Id</td>
                                        <td><em title="@act.Description">@act.Name</em></td>
                                        <td>
                                            @foreach (var actype in activityTypes)
                                            {
                                                if (actype.Id == act.ActivityTypeId)
                                                {
                                                    @actype.Name
                                                }
                                            }
                                        </td>
                                        <td>@StartEndDate(act.StartDate, act.EndDate)</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </section>
            }
        }
    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int IId { get; set; }

    private List<CourseDto> courses = new List<CourseDto>();

    private List<ModuleDto> modules = new List<ModuleDto>();

    private List<ActivityDto> activities = new List<ActivityDto>();

    private List<ActivityTypeDto> activityTypes = new List<ActivityTypeDto>();

    [Inject]
    private IXDtoClient xClient { get; set; } = default!;

    //private AppUserDto loggeduser = new AppUserDto(); // Info om den som för tillfället är inloggad.

    private string CourseName = string.Empty;
    private int CourseId;
    private string CourseDate = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        //var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        //var user = authstate.User;
        //var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.

        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");
        var activityType = await xClient.GetAsync<IEnumerable<ActivityTypeDto>>("api/Acttype");

        if (course is not null)
        {
            foreach (var cour in course)
            {
                if (cour.Id == IId) // Hämtar Kursinfo.
                {
                    CourseName = cour.Name;
                    CourseId = cour.Id;
                    CourseDate = StartEndDate(cour.StartDate, cour.EndDate);

                    foreach (var mod in cour.Modules) // Hämtar moduler.
                    {
                        modules.Add(mod);

                        foreach (var act in mod.Activities) // Hämtar aktiviteter.
                        {
                            activities.Add(act);
                        }
                    }
                }
            }
        }
        else
        {
            CourseName = "No course could be find...";
        }

        if (activityType is not null) // Hämtar aktivitetstyper.
        {
            activityTypes = activityType.ToList();
        }
    }

    private string StartEndDate(DateTime start, DateTime end) // Returnerar datumsträng.
    {
        return $"{start.ToString().Substring(0, 10)} | {end.ToString().Substring(0, 10)}";
    }

    private void EditModule(int id)
    {
        
    }

    private void EditActivity(int id)
    {

    }
}