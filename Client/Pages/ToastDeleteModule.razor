@inject NavigationManager Navigation
@inject IXDtoClient xClient
@inject XLangToast xtoa
@inject XNavMenu xnav
@attribute [Authorize]
@*Toast component by Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<AuthorizeView Roles ="Teacher">
    <Authorized>
        <div class="toast-container p-3 position-relative @showClass" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" style="width: 250px">
                <div class="toast-header">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="toast-body">
                    <button type="button" class="text-white remyes" @onclick="DeleteNow" title=@xtoa.TxtTitle[11]>@xtoa.TxtButton[2]</button> @* DELETE NOW *@
                    <button type="button" class="text-white remnot" @onclick="Close">@xtoa.TxtButton[0]</button> @* NO *@
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";

    public void Show()
    {
        xnav.SetReset('a');

        HeaderText = xtoa.TxtHead[2];
        showClass = "d-block";
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task DeleteNow()
    {
        xnav.SetDone(xtoa.TxtDone[3]);
        xnav.SetReset('d');
        await xnav.Intermission(3000, false);

        // Dokument som hör till modulens aktiviteter.
        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        var activity = await xClient.GetAsync<IEnumerable<ActivityDto>>("api/Activity");

        if (activity is not null && document is not null)
        {
            foreach (var act in activity)
            {
                if (act.ModuleId == Auxx.IntId) // Dess aktiviteter.
                {
                    foreach (var doc in document) // Dess dokument.
                    {
                        if (doc.ActivityId == act.Id)
                        {
                            await xClient.DeleteFile(doc.NameIx.ToString() + doc.DocName);
                            await xClient.RemAsync(doc.Id, "api/Document");
                        }
                    }
                }
            }
        }

        // Aktiviteter som hör till modulen.
        if (activity is not null)
        {
            foreach (var act in activity)
            {
                if (act.ModuleId == Auxx.IntId) // Dess aktiviteter.
                {
                    await xClient.RemAsync(act.Id, "api/Activity");
                }
            }
        }

        // Dokument som hör till modulen.
        if (document is not null)
        {
            foreach (var doc in document)
            {
                if (doc.ModuleId == Auxx.IntId) // Dess dokument.
                {
                    await xClient.DeleteFile(doc.NameIx.ToString() + doc.DocName);
                    await xClient.RemAsync(doc.Id, "api/Document");
                }
            }
        }

        // Modulen raderas.
        await xClient.RemAsync(Auxx.IntId, "api/Module");
        Navigation.NavigateTo($"/coursedetail/{Auxx.CourseId}", true);
        Close();
    }
}