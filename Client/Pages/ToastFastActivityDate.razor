@inject IXDtoClient xClient
@inject XLangToast xtoa
@inject XNavMenu xnav
@attribute [Authorize]
@*Toast component by Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<AuthorizeView Roles="Teacher">
    <Authorized>
        <div class="toast-container p-3 @showClass"
             style="position: fixed; top: auto; top: @(xnav.Pos_V)px; margin-left: @(xnav.Pos_H)px; z-index: 5" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show bg-white" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header" @onmouseup=" _ => xnav.Mouse(0, 'U', _)" @onmousedown=" _ => xnav.Mouse(Win_Height, 'D', _)"
                     @onmousemove=" _ => xnav.Mouse(Win_Height, 'M', _)" @onmouseout=" _ => xnav.Mouse(Win_Height, 'M', _)">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="toast-body">
                    <EditForm Model="@xClient" Context="fastdatelmslexnet" OnSubmit="HandleSubmitDates">
                        <div class="form-group row">
                            <span class="col-6">
                                <label for="Startdate">@xtoa.TxtText[18]</label>
                                <InputDate id="Startdate" class="form-control" @bind-Value="Sdate" />
                            </span>
                            <span class="col-6">
                                <label for="Enddate">@xtoa.TxtText[19]</label>
                                <InputDate id="Enddate" class="form-control" @bind-Value="Edate" />
                            </span>
                        </div><br />
                        <div>
                            <button type="submit" class="text-white rembtn" style="margin-right: 15px">@xtoa.TxtButton[6]</button> @* Save *@
                            <button type="button" class="text-white remnot" @onclick="Close">@xtoa.TxtButton[0]</button> @* NO *@
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";

    private int Win_Height;

    private List<ActivityDto> activities = new();

    private DateTime Sdate;

    private DateTime Edate;

    public async Task Show()
    {
        xnav.SetReset('a');

        var dim = await xClient.GetWindow(); // Hämtar aktuell skärmstorlek.
        Win_Height = dim.Height;
        xnav.Pos_H = (int)Math.Round(dim.Width * 0.08); // 08%
        xnav.Pos_V = (int)Math.Round(Win_Height * 0.2); // 20%

        var activity = await xClient.GetAsync<IEnumerable<ActivityDto>>("api/Activity");
        if (activity is not null) activities = activity.ToList();

        foreach (var act in activities)
        {
            if (act.Id == Auxx.IntId)
            {
                Sdate = act.StartDate;
                Edate = act.EndDate;
            }
        }

        HeaderText = xtoa.TxtHead[10];
        showClass = "d-block";
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task HandleSubmitDates()
    {
        var lact = new ActivityDto
        {
            StartDate = Sdate,
            EndDate = Edate
        };

        foreach (var act in activities)
        {
            if (act.Id == Auxx.IntId)
            {
                lact.Id = act.Id;
                lact.Name = act.Name;
                lact.Description = act.Description;
                lact.Select = act.Select;
                lact.ModuleId = act.ModuleId;
                lact.ActivityTypeId = act.ActivityTypeId;
                lact.ActivityTypeName = act.ActivityTypeName;
            }
        }

        try
        {
            await xClient.PutAsync<ActivityDto>(Auxx.IntId, lact, "api/Activity");
            xnav.SetDone(xtoa.TxtDone[29]);
            xnav.SetReset('d');
        }
        catch
        {
            xnav.SetError(xtoa.TxtError[16]);
            xnav.SetReset('e');
        }
        Auxx.Flag = true;
        Close(); // En omnavigering här nollställer alla variabler inklusive statiska.
    }
}