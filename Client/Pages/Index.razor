@page "/"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav

<PageTitle>Index</PageTitle>

<nav style="font-size: 1.1rem; padding-top: 50px; border-radius: 5px; color: white; background-color:darkturquoise">
    <span style="padding-left: 1%">Welcome to </span>
    <span style="font-weight: bold; background-color: red">Lexicon</span> LMS
</nav>

<section class="text-lg-end text-info">
    &copy June 2023 Björn Lindqvist - Version 1.03
</section>

<footer class="mt-4 p-4"> @*Hjälp vid uppstart när man har populerat Min eller Max*@
    @*Om det bara finns en enda lärare och med namnet John Doe så visas denna info om lösenord*@
    @foreach (var item in johndoe)
    {
        if (johndoe.Count < 2 && item.FirstName == "John" && item.LastName == "Doe")
        {
            <div style="color: gray">Email for the teacher John Doe:</div>
            <div>John@Doe.se</div>
            <div style="color: gray">John Doe's password:</div>
            <div>PassTeacher@Word00!</div>

            <br />
            <div style="color: gray">Password for seeded students:</div>
            <div>PassStudent@Word00!</div>
        }
    }
</footer>

@code {

    private List<DocumentDto> documents = new();

    private AppUserDto loggeduser = new(); // Info om den som för tillfället är inloggad.

    private List<AppUserDto> johndoe = new(); // De med lärarrollen.

    protected override async Task OnInitializedAsync()
    {
        xnav.SetJohnDoe(false);

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.

        var appuser = await appuserClient.GetAsync();
        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        if (document is not null) documents = document.ToList();

        if (appuser is not null)
        {
            foreach (var item in appuser)
            {
                if (item.UserRole == 2) johndoe.Add(item); // Hämtar endast användare med lärarrollen.
                if (item.Email == name) loggeduser = item; // Hämtar den som för tillfället är inloggad.
            }
        }

        xnav.SetLogAvatar("d-none", "");

        foreach (var doc in documents) // Letar efter en avatar.
        {
            if (doc.UserId == loggeduser.Id && doc.Id4Course == -2)
            {
                xnav.SetLogAvatar("avatarlog", xClient.GetFilepath() + doc.NameIx + doc.DocName);
            }
        }

        xnav.SetReset('a');
    }
}