@page "/"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XLangStudent xstu
@inject XLangTeacher xtea
@inject XLangToast xtoa
@inject XNavMenu xnav

<PageTitle>Index</PageTitle>

<nav style=@colorStyle>
    <span style="padding-left: 1%">@xstu.TxtText[21]</span>
    <span style="font-weight: bold; background-color: red">Lexicon</span> LMS
</nav>

<section class="text-lg-end text-info">
    &copy September 2023 Björn Lindqvist - Version 1.13
</section>

<section class="mt-4 p-4"> @*Hjälp vid uppstart när man har populerat Min eller Max*@
    @*Om det bara finns en enda lärare och med namnet John Doe så visas denna info om lösenord*@
    @foreach (var item in johndoe)
    {
        if (johndoe.Count < 2 && item.FirstName == "John" && item.LastName == "Doe")
        {
            <div style="color: gray">Email for the teacher John Doe:</div>
            <div>John@Doe.se</div>
            <div style="color: gray">John Doe's password:</div>
            <div>PassTeacher@Word00!</div>

            <br />
            <div style="color: gray">Password for seeded students:</div>
            <div>PassStudent@Word00!</div>
        }
    }
</section>

@*Noteringshäfte eller komihåg-block - när man önskar göra anteckningar*@
<article class="@classNotePad">
    <EditForm Context="notebooklmslexnet" Model="xClient" OnSubmit="SaveLS">
        <div class="row form-group">
            <div class="col-8 m-lg-auto">
                <img src=@xstu.TxtText[22] style="width: 162px; height: 30px" alt="Notes" />
            </div>
        </div>
        <div class="row form-group">
            <div style="width: 50px">
                @for (int i = 0; i < 20; i++)
                {
                    <img src="images/spiral.jpg" style="width: 50px; height: 25px" alt="Spiral"/>
                }
            </div>
            <div class="col-8">
                <InputTextArea class="form-control"
                    style="font-size: 1.2rem; border-left: none; border-radius: 0; background: url('images/NotesBG.jpg')" @bind-Value="MyText" rows="17" />
            </div>
        </div>
        <div class="row form-group" style="font-size: 0.9rem">
            <div class="col-8 m-lg-auto">
                <button type="button" class="oi oi-caret-left btn btn-light px-2 mx-2" @onclick="_ => Buttons(false)"></button>
                <span class="px-2 mx-2">@xstu.TxtText[23] @Pagenr @xstu.TxtText[24]</span>
                <button type="button" class="oi oi-caret-right btn btn-light px-2 mx-2" @onclick="_ => Buttons(true)"></button>
                <button type="submit" class="btn btn-light px-2 m-2" style="font-size: 0.9rem">@xstu.TxtText[25]</button>
            </div>
        </div>
    </EditForm>
</article>

@code {

    private List<DocumentDto> documents = new();

    private AppUserDto loggeduser = new(); // Info om den som för tillfället är inloggad.

    private List<AppUserDto> johndoe = new(); // De med lärarrollen.

    private string classNotePad = "d-none";

    private string Page1 = string.Empty;
    private string Page2 = string.Empty;
    private string Page3 = string.Empty;

    private string MyText = string.Empty;

    private byte Pagenr;

    private bool IsStandard;
    private byte ColorR;
    private byte ColorG;
    private byte ColorB;
    private string colorStyle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        xnav.SetJohnDoe(false);

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.

        if (name is not null && (user.IsInRole("Student") || user.IsInRole("Teacher")))
        {
            if (await xClient.GetStorage<string>("LMS_Note") == "False") classNotePad = "d-none";
            else classNotePad = "container";
        }

        if (user.IsInRole("Student") || user.IsInRole("Teacher")) xnav.ClassSettings = "d-block"; // Visar endast settings för registrerade.

        var appuser = await appuserClient.GetAsync();
        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        if (document is not null) documents = document.ToList();

        if (appuser is not null)
        {
            foreach (var item in appuser)
            {
                if (item.UserRole == 2) johndoe.Add(item); // Hämtar endast användare med lärarrollen.
                if (item.Email == name) loggeduser = item; // Hämtar den som för tillfället är inloggad.
            }
        }

        xnav.MainRole = (byte) loggeduser.UserRole; // Tilldelar rollen vilken används i MainLayout.

        // Implementerar språk för både sidor och alla toast.
        if (loggeduser.UserRole == 1 && xstu.RenderPage != "STILL_HERE")
        {
            if (await xClient.GetStorage<string>("LMS_Lang") == "EN") { xstu.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "SV") { xstu.SetLanguage_SV(); xtoa.SetLanguage_SV(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "DE") { xstu.SetLanguage_DE(); xtoa.SetLanguage_DE(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "FR") { xstu.SetLanguage_FR(); xtoa.SetLanguage_FR(); }
            else { xstu.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
        }
        if (loggeduser.UserRole == 2 && (xtea.RenderPage != "STILL_HERE" || xstu.RenderPage != "STILL_HERE"))
        {
            if (await xClient.GetStorage<string>("LMS_Lang") == "EN") { xstu.SetLanguage_EN(); xtea.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "SV") { xstu.SetLanguage_SV(); xtea.SetLanguage_SV(); xtoa.SetLanguage_SV(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "DE") { xstu.SetLanguage_DE(); xtea.SetLanguage_DE(); xtoa.SetLanguage_DE(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "FR") { xstu.SetLanguage_FR(); xtea.SetLanguage_FR(); xtoa.SetLanguage_FR(); }
            else { xstu.SetLanguage_EN(); xtea.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
        }

        if (loggeduser.UserRole != 1 && loggeduser.UserRole != 2) xstu.TxtText[21] = "Welcome to";

        xnav.SetLogAvatar("d-none", "");

        foreach (var doc in documents) // Letar efter en avatar.
        {
            if (doc.UserId == loggeduser.Id && doc.Id4Course == -2)
            {
                xnav.SetLogAvatar("avatarlog", xClient.GetFilepath() + doc.NameIx + doc.DocName);
            }
        }

        if (await xClient.GetStorage<string>("LMS_NR") is not null) // Noteringshäftet.
        {
            Pagenr = byte.Parse(await xClient.GetStorage<string>("LMS_NR"));

            Page1 = await xClient.GetStorage<string>("LMS_P1");
            Page2 = await xClient.GetStorage<string>("LMS_P2");
            Page3 = await xClient.GetStorage<string>("LMS_P3");

            if (Pagenr == 1) MyText = Page1;
            else if (Pagenr == 2) MyText = Page2;
            else if (Pagenr == 3) MyText = Page3;
            else Pagenr = 1;
        }
        else Pagenr = 1;

        // Hämtar färgkoder från lokal storage.
        if (await xClient.GetStorage<string>("LMS_C_Standard") == "False") IsStandard = false;
        else IsStandard = true;

        string LScolor = await xClient.GetStorage<string>("LMS_C-R");
        if (LScolor is not null && LScolor != "") ColorR = byte.Parse(LScolor); else ColorR = xnav.ColorRGB[0];
        LScolor = await xClient.GetStorage<string>("LMS_C-G");
        if (LScolor is not null && LScolor != "") ColorG = byte.Parse(LScolor); else ColorG = xnav.ColorRGB[1];
        LScolor = await xClient.GetStorage<string>("LMS_C-B");
        if (LScolor is not null && LScolor != "") ColorB = byte.Parse(LScolor); else ColorB = xnav.ColorRGB[2];

        if (IsStandard)
        {
            ColorR = xnav.ColorRGB[0];
            ColorG = xnav.ColorRGB[1];
            ColorB = xnav.ColorRGB[2];
        }
        colorStyle = $"font-size: 1.1rem; padding-top: 50px; border-radius: 5px; color: white; background-color: rgb({ColorR}, {ColorG}, {ColorB})";

        xnav.SetReset('a');

        xstu.OnChange += StateHasChanged;
        xtea.OnChange += StateHasChanged;
        xtoa.OnChange += StateHasChanged;
    }

    private async Task SaveLS() // Sparar anteckningar i noteringshäftet i Local Storage.
    {
        if (Pagenr == 1) Page1 = MyText;
        if (Pagenr == 2) Page2 = MyText;
        if (Pagenr == 3) Page3 = MyText;

        try
        {
            await xClient.SetStorage<string>("LMS_P1", Page1);
            await xClient.SetStorage<string>("LMS_P2", Page2);
            await xClient.SetStorage<string>("LMS_P3", Page3);
            await xClient.SetStorage<string>("LMS_NR", Pagenr.ToString());
        }
        catch
        {
            xnav.SetError(@xtoa.TxtError[20]);
            xnav.SetReset('e');
        }
    }

    private async Task Buttons(bool right) // Bläddrar blad i noteringshäftet. Max 3 blad.
    {
        if (right) Pagenr++;
        else Pagenr--;

        if (Pagenr > 3) Pagenr = 3;
        if (Pagenr < 1) Pagenr = 1;

        if (Pagenr == 1) MyText = Page1;
        if (Pagenr == 2) MyText = Page2;
        if (Pagenr == 3) MyText = Page3;

        try
        {
            await xClient.SetStorage<string>("LMS_NR", Pagenr.ToString());
        }
        catch
        {
            xnav.SetError(@xtoa.TxtError[20]);
            xnav.SetReset('e');
        }
    }
}