@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging;

@page "/courseeditactivity/{IId:int}"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager Navigation
@inject ILogger<TeacherAddCourse> Logger
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Course edit activity</PageTitle>

<AuthorizeView Roles="Teacher">
    <Authorized>
    <section class="activityeditbox"> @*Hjälptabeller vid inmatning av moduler*@
        <div style="display: flex">
            <h4 style="width: 75%">COURSE: @course.Name</h4>
            <h5 style="margin: 0 0 0 auto">@StartEndDate(course.StartDate, course.EndDate)</h5>
        </div>
        <h6>Modules...</h6>
        <table class="table">
            <thead>
                <tr>
                    <th>Module name</th>
                    <th>Module description</th>
                    <th>Module date</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            @foreach (var mod in modulelist)
            {
                <tr>
                    <td>@mod.Name</td>
                    <td>@mod.Description</td>
                    <td>@StartEndDate(mod.StartDate, mod.EndDate)</td>
                </tr>
            }
        </table>
        <br />
        <h6>Activities for module @module.Name</h6>
        <table class="table">
            <thead>
                <tr>
                    <th>Activity name</th>
                    <th>Activity type</th>
                    <th>Activity description</th>
                    <th>Activity date</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            @foreach (var act in activitylist)
            {
                <tr>
                    <td>@act.Name</td>
                    <td>@act.ActivityTypeName</td>
                    <td>@act.Description</td>
                    <td>@StartEndDate(act.StartDate, act.EndDate)</td>
                </tr>
            }
        </table>
    </section>
        <h5>@TestMess1</h5>
        <h5>@TestMess2</h5>
    <section class="activityeditbox">
        <nav style="display: flex">
            <div style="width: 50%"><h5>Edit, add or delete activity:</h5></div>
            <div style="margin: 0 0 0 auto">
                <button type="button" class="btn btn-danger btn-sm" @onclick="DeleteControll"
                title="Remove this activity and all its documents from the system">Delete immediately!</button>
            </div>
        </nav>
        <EditForm EditContext="activityContext" Context="activitylmslexnet" OnValidSubmit="HandleSubmitActivity">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group m-3">
                <label for="Name">Name</label>
                <InputText id="Name" class="form-control" @bind-Value="activity.Name" placeholder="Enter name" />
            </div>
            <div class="form-group m-3">
                <label for="Typename">Type</label>
                <InputSelect class="form-control" id="Typename" @bind-Value="activityType.Name">
                    @foreach (var acttype in activitytypelist)
                    {
                        <option value="@acttype.Name">@acttype.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group m-3">
                <label for="Description">Description</label>
                <InputTextArea id="Description" class="form-control" @bind-Value="activity.Description" placeholder="Enter description" />
            </div>
            <div class="form-group m-3">
                <label for="Startdate">Start date</label>
                <InputDate id="Startdate" class="form-control" @bind-Value="activity.StartDate" />
            </div>
            <div class="form-group m-3">
                <label for="Enddate">End date</label>
                <InputDate id="Enddate" class="form-control" @bind-Value="activity.EndDate" />
            </div>
            <div class="form-group m-3">
                <button type="button" class="btn btn-secondary btn-sm m-1" @onclick="RegretRefresh" title="Avoid edit activity">Regret</button>
                <button type="submit" class="btn btn-primary btn-sm m-1" title="Save this edit form">Save</button>
                <button type="button" class="btn btn-primary btn-sm m-1" @onclick="AddThisActivity" title="Add this activity">Add this activity</button>
            </div>
        </EditForm>
    </section>

        <div class="container" @onmouseover="DeleteRefresh"> @*Eventuella dokument som ingår läggs ut här*@
            <div class="d-flex flex-wrap">
                @foreach (var doc in documents)
                {
                    <ul class="nav">
                        @if (doc.ActivityId == IId)
                        {
                            if (doc.DocName != "")
                            {
                                if (DateTime.Parse(doc.TimeStamp).AddDays(1) > DateTime.Now)
                                {
                                    <li class="doclink" style="box-shadow: 0 0 10px plum"
                                        title="File: @doc.Description by @doc.Author @doc.TimeStamp">
                                        <span @onclick=" _ => OpenFileControl(doc.NameIx, doc.DocName)">@doc.DocName</span>
                                        <span class="oi oi-file text-primary text-decoration-none docicon"
                                        @onclick=" _ => DocEditControl(doc.Id, 4)"></span>
                                    </li>
                                }
                                else
                                {
                                    <li class="doclink" title="File: @doc.Description by @doc.Author @doc.TimeStamp">
                                        <span @onclick=" _ => OpenFileControl(doc.NameIx, doc.DocName)">@doc.DocName</span>
                                        <span class="oi oi-file text-primary text-decoration-none docicon"
                                        @onclick=" _ => DocEditControl(doc.Id, 4)"></span>
                                    </li>
                                }
                            }
                            else
                            {
                                if (DateTime.Parse(doc.TimeStamp).AddDays(1) > DateTime.Now)
                                {
                                    <li class="oi oi-file text-danger text-decoration-none docicon"
                                        style="position: relative; top: 10px; margin-right: 22px; text-shadow: 0 0 10px plum"
                                        @onmouseover=" _ => ShowMessControl(doc.Description, doc.Author, doc.TimeStamp)"
                                        @onclick=" _ => DeleteMess(doc.Id)">
                                    </li>
                                }
                                else
                                {
                                    <li class="oi oi-file text-danger text-decoration-none docicon"
                                        style="position: relative; top: 10px; margin-right: 22px"
                                        @onmouseover=" _ => ShowMessControl(doc.Description, doc.Author, doc.TimeStamp)"
                                        @onclick=" _ => DeleteMess(doc.Id)">
                                    </li>
                                }
                            }
                        }
                    </ul>
                }
            </div>
        </div>

        <footer style="display: flex">
            <div style="margin: 0 0 0 auto">
                <button type="button" class="text-white delbtn" @onclick="DeleteAllDocs" title="Delete all non-mandatory documents and messages">E</button>
            </div>
        </footer>

    <DeleteAllDocActivities @ref="deletealldocRef" /> @*Delete-fönster*@
    <DeleteMess @ref="deleteRef" /> @*Delete-fönster*@
    <DocumentEdit @ref="doceditRef" /><br /><br /> @*Filredigeringsfönster*@

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int IId { get; set; }

    private DeleteAllDocActivities? deletealldocRef; // Delete-fönster.

    private void DeleteAllDocs() // Delete-fönster.
    {
        Auxx.IntId = IId;
        Auxx.Documents = documents;
        deletealldocRef!.Show();
    }

    private DeleteMess? deleteRef; // Delete-fönster.

    private void DeleteMess(int id) // Delete-fönster.
    {
        Auxx.IntId = id;
        deleteRef!.Show();
    }

    private async Task DeleteRefresh() // Uppdaterar efter förändring av innehållet.
    {
        if (Auxx.Flag) await OnInitializedAsync();
    }

    private DocumentEdit? doceditRef; // Filredigeringsfönster.

    private void DocEditControl(int id, byte doctype) // Filredigeringsfönster.
    {
        Auxx.IntId = id;
        Auxx.DocType = doctype;
        Auxx.Documents = documents;
        doceditRef!.Show();
    }

    private EditContext activityContext = default!; // Formulärkontexter.

    private CourseDto course = new();

    private ModuleDto module = new();

    private ActivityDto activity = new();

    private ActivityTypeDto activityType = new();

    private List<ModuleDto> modulelist = new();

    private List<ActivityDto> activitylist = new();

    private List<ActivityTypeDto> activitytypelist = new();

    private List<DocumentDto> documents = new();

    private string DefaultType = string.Empty;
    private string TestMess1 = string.Empty; // Test.
    private string TestMess2 = string.Empty; // Test.

    private int CourseID; // Kursens id.

    protected override async Task OnInitializedAsync()
    {
        if (!Auxx.Flag) xnav.SetReset('a');
        else Auxx.Flag = false;

        modulelist.Clear();
        activitylist.Clear();
        activitytypelist.Clear();
        documents.Clear();

        activityContext = new EditContext(activity); // Formulärkontext.

        var allact = await xClient.GetAsync<IEnumerable<ActivityDto>>("api/Activity");

        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        if (document is not null) documents = document.ToList(); // Hämtar alla dokument.

        if (allact is not null)
        {
            foreach (var act in allact)
            {
                if (act.Id == IId) // Denna aktivitet.
                {
                    activity.Id = act.Id;
                    activity.Name = act.Name;
                    activity.Description = act.Description;
                    activity.StartDate = act.StartDate;
                    activity.EndDate = act.EndDate;
                    activity.IsActive = act.IsActive;
                    activity.ModuleId = act.ModuleId;
                    activity.ActivityTypeId = act.ActivityTypeId;
                }
            }
        }

        var allacttype = await xClient.GetAsync<IEnumerable<ActivityTypeDto>>("api/Acttype");

        if (allacttype is not null) // Hämtar aktivitetstyper.
        {
            activitytypelist = allacttype.ToList();
        }

        var firstacttype = new ActivityTypeDto();
        firstacttype = activitytypelist.ElementAt(0);
        DefaultType = firstacttype.Name; // Laddar default med den första aktivitetstypen.

        if (allact is not null)
        {
            foreach (var act in allact) // Alla aktiviteter som hör till modulen.
            {
                if (act.ModuleId == activity.ModuleId)
                {
                    foreach (var acttype in activitytypelist) // Aktivitetstypen som hör till en specifik aktivitet.
                    {
                        if (acttype.Id == activity.ActivityTypeId) activityType.Name = acttype.Name; // Select-namn.

                        if (acttype.Id == act.ActivityTypeId)
                        {
                            act.ActivityTypeName = acttype.Name;
                            activitylist.Add(act);
                        }
                    }
                }
            }
        }

        var allmod = await xClient.GetAsync<IEnumerable<ModuleDto>>("api/Module");

        if (allmod is not null)
        {
            foreach (var mod in allmod) // Denna modul.
            {
                if (mod.Id == activity.ModuleId)
                {
                    CourseID = mod.CourseId;
                    module.Name = mod.Name;
                }
            }

            foreach (var mod in allmod) // Alla moduler som hör till kursen.
            {
                if (mod.CourseId == CourseID) modulelist.Add(mod);
            }
        }

        var allcourse = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");

        if (allcourse is not null)
        {
            foreach (var cour in allcourse) // Kursen som hör till modulerna.
            {
                if (cour.Id == CourseID)
                {
                    course.Name = cour.Name;
                    course.StartDate = cour.StartDate;
                    course.EndDate = cour.EndDate;
                }
            }
        }
    }

    private async Task RegretRefresh()
    {
        xnav.SetDone("xnavdone", "The activity was NOT edited or created.");
        xnav.SetReset('d');
        await Intermission(500, false);
        Navigation.NavigateTo($"/coursedetail/{CourseID}", true);
    }

    private async Task HandleSubmitActivity()
    {
        int ActTypeId = 0;

        Logger.LogInformation("HandleSubmit called");

        if (activity.StartDate > activity.EndDate)
        {
            await Intermission(100, true);
            xnav.SetError("xnaverror", "Date mismatch (start date is greater than end date).");
            xnav.SetReset('e');
        }
        else
        {
            foreach (var acttype in activitytypelist) // Hämtar från formuläret.
            {
                if (acttype.Name == activityType.Name) ActTypeId = acttype.Id;
            }

            var lact = new ActivityDto
                {
                    Id = activity.Id,
                    Name = activity.Name,
                    Description = activity.Description,
                    StartDate = activity.StartDate,
                    EndDate = activity.EndDate,
                    ModuleId = activity.ModuleId,
                    IsActive = activity.IsActive,
                    ActivityTypeId = ActTypeId,
                    ActivityTypeName = activityType.Name
                };

            lact.ActivityTypeName = activityType.Name; // Om ingen typ valdes.
            if (lact.ActivityTypeName == "")
            {
                lact.ActivityTypeName = DefaultType;
                lact.ActivityTypeId = 1;
            }

            await xClient.PutAsync<ActivityDto>(IId, lact, "api/Activity");
            await CreateAndRefresh();
        }
    }

    private async Task AddThisActivity()
    {
        int ActTypeId = 0;

        foreach (var acttype in activitytypelist) // Hämtar från formuläret.
        {
            if (acttype.Name == activityType.Name) ActTypeId = acttype.Id;
        }

        var lact = new ActivityDto
            {
                Name = activity.Name,
                Description = activity.Description,
                StartDate = activity.StartDate,
                EndDate = activity.EndDate,
                ModuleId = activity.ModuleId,
                IsActive = activity.IsActive,
                ActivityTypeId = ActTypeId,
                ActivityTypeName = activityType.Name
            };

        lact.ActivityTypeName = activityType.Name; // Om ingen typ valdes.
        if (lact.ActivityTypeName == "")
        {
            lact.ActivityTypeName = DefaultType;
            lact.ActivityTypeId = 1;
        };

        if (activity.StartDate > activity.EndDate)
        {
            xnav.SetError("xnaverror", "Date mismatch (start date is greater than end date).");
            xnav.SetReset('e');
        }
        else
        {
            await xClient.PostAsync<ActivityDto>(lact, "api/Activity");
            await CreateAndRefresh();
        }
    }

    private async Task CreateAndRefresh()
    {
        xnav.SetDone("xnavdone", "Your activity is edited or added.");
        xnav.SetReset('d');
        await Intermission(2000, false);
        Navigation.NavigateTo($"/coursedetail/{CourseID}", true);
    }

    private async Task DeleteControll()
    {
        xnav.SetDone("xnavdone", "This activity and all its documents were deleted.");
        xnav.SetReset('d');
        await Intermission(1000, false);

        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");

        if (document is not null)
        {
            foreach (var doc in document)
            {
                if (doc.ActivityId == IId) // Dess dokument.
                {
                    await xClient.DeleteFile(doc.NameIx.ToString() + doc.DocName);
                    await xClient.RemAsync(doc.Id, "api/Document");
                }
            }
        }

        await xClient.RemAsync(IId, "api/Activity");
        Navigation.NavigateTo($"/coursedetail/{CourseID}", true);
    }

    private string StartEndDate(DateTime start, DateTime end) // Returnerar datumsträng.
    {
        return $"{start.ToString().Substring(0, 10)} | {end.ToString().Substring(0, 10)}";
    }

    private async Task OpenFileControl(int ix, string filename)
    {
        await xClient.OpenFile(ix, filename);
    }

    private void ShowMessControl(string description, string author, string timestamp)
    {
        xnav.SetMess("xnavmess", description + " by " + author + " Created: " + timestamp);
        xnav.SetReset('m');
    }

    private async Task Intermission(int time, bool hide) // Paus.
    {
        if (hide)
        {
            xnav.SetReset('a');
        }
        base.StateHasChanged();
        await Task.Delay(time);
    }
}


