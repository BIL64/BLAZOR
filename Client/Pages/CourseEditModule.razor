@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging;

@page "/courseeditmodule/{IId:int}"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppUserDtoClient appuserClient
@inject NavigationManager Navigation
@inject ILogger<TeacherAddCourse> Logger
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Course edit module</PageTitle>

<AuthorizeView Roles="Teacher">
    <Authorized>
    <section class="activityeditbox"> @*Hjälptabeller vid inmatning av moduler*@
        <div style="display: flex">
            <h4 style="width: 75%">COURSE: @course.Name</h4>
            <h5 style="margin: 0 0 0 auto">@StartEndDate(course.StartDate, course.EndDate)</h5>
        </div>
        <h6>Modules...</h6>
        <table class="table">
            <thead>
                <tr>
                    <th>Module name</th>
                    <th>Module description</th>
                    <th>Module date</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            @foreach (var mod in modulelist)
            {
                <tr>
                    <td>@mod.Name</td>
                    <td>@mod.Description</td>
                    <td>@StartEndDate(mod.StartDate, mod.EndDate)</td>
                </tr>
            }
        </table>
    </section>

    <section class="moduleeditbox">
        <h5>Edit or add module:</h5>
        <EditForm EditContext="moduleContext" Context="modulelmslexnet" OnValidSubmit="HandleSubmitModule">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group m-3">
                <label for="Name">Name</label>
                <InputText id="Name" class="form-control" @bind-Value="module.Name" placeholder="Enter name" />
            </div>
            <div class="form-group m-3">
                <label for="Description">Description</label>
                <InputTextArea id="Description" class="form-control" @bind-Value="module.Description" placeholder="Enter description" />
            </div>
            <div class="form-group m-3">
                <label for="Startdate">Start date</label>
                <InputDate id="Startdate" class="form-control" @bind-Value="module.StartDate" />
            </div>
            <div class="form-group m-3">
                <label for="Enddate">End date</label>
                <InputDate id="Enddate" class="form-control" @bind-Value="module.EndDate" />
            </div>
            <div class="form-group m-3">
                <button type="button" class="btn btn-secondary btn-sm m-1" @onclick="RegretRefresh" title="Avoid edit module">Regret</button>
                <button type="submit" class="btn btn-primary btn-sm m-1" title="Save this edit form">Save</button>
                <button type="button" class="btn btn-primary btn-sm m-1" @onclick="AddThisModule" title="Add this module with one blank activity">Add this module</button>
                <button type="button" class="btn btn-danger btn-sm" @onclick=" _ => DeleteModule()"
                    title="Remove this module, all activities, and all its documents">Delete module</button>
            </div>
        </EditForm>
    </section>

    <DeleteModule @ref="deletemodRef" /> @*Delete-fönster*@

        <div class="container"> @*Eventuella dokument som ingår läggs ut här*@
            <div class="d-flex flex-wrap">
                @foreach (var doc in documents)
                {
                    <ul class="nav">
                        @if (doc.ModuleId == IId)
                        {
                            if (doc.DocName != "")
                            {
                                <li class="doclink" title="File: @doc.Description by @doc.Author @doc.TimeStamp">
                                    <span @onclick=" _ => OpenFileControl(doc.NameIx, doc.DocName)">@doc.DocName</span>
                                    <span class="oi oi-file text-primary text-decoration-none docicon"
                                    @onclick=" _ => DocEditControl(doc.Id, 3)"></span>
                                </li>
                            }
                            else
                            {
                                <li class="oi oi-file text-danger text-decoration-none docicon"
                                    style="position: relative; top: 10px; margin-right: 22px"
                                    @onmouseover=" _ => ShowMessControl(doc.Description, doc.Author, doc.TimeStamp)"
                                    @onclick=" _ => DeleteMess(doc.Id)">
                                </li>
                            }
                        }
                    </ul>
                }
            </div>
        </div><br />

    <DeleteMess @ref="deleteRef" /> @*Delete-fönster*@
    <DocumentEdit @ref="doceditRef" /><br /><br /> @*Filredigeringsfönster*@

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int IId { get; set; }

    private DeleteMess? deleteRef; // Delete-fönster.

    private async Task DeleteMess(int id) // Delete-fönster.
    {
        Auxx.IntId = id;
        await deleteRef!.Show();
        await RefreshAfterThis(); // Uppdaterar sidan.
    }

    private DeleteModule? deletemodRef; // Delete-fönster.

    private async Task DeleteModule() // Delete-fönster.
    {
        Auxx.CourseId = CourseID;
        Auxx.IntId = ModuleID;
        deletemodRef!.Show();
        await RefreshAfterThis(); // Uppdaterar sidan.
    }

    private DocumentEdit? doceditRef; // Filredigeringsfönster.

    private async Task DocEditControl(int id, byte doctype) // Filredigeringsfönster.
    {
        Auxx.IntId = id;
        Auxx.DocType = doctype;
        Auxx.Documents = documents;
        await doceditRef!.Show();
        await RefreshAfterThis(); // Uppdaterar sidan.
    }

    private EditContext moduleContext = default!; // Formulärkontexter.

    private CourseDto course = new();

    private ModuleDto module = new();

    private List<ModuleDto> modulelist = new();

    private List<DocumentDto> documents = new();

    private AppUserDto loggeduser = new(); // Info om den som för tillfället är inloggad.

    private int ModuleID; // Modulens Id.
    private int CourseID; // Kursens id.

    private async Task RefreshAfterThis() // Uppdaterar efter förändring av innehåll.
    {
        while (!Auxx.Flag) await Intermission(1000, false);
        Auxx.Flag = false;
        await Intermission(1000, false);
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        xnav.SetReset('a');

        modulelist.Clear();
        documents.Clear();

        moduleContext = new EditContext(module); // Formulärkontext.

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.
        var appuser = await appuserClient.GetAsync();

        var allmod = await xClient.GetAsync<IEnumerable<ModuleDto>>("api/Module");

        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        if (document is not null) documents = document.ToList(); // Hämtar alla dokument.

        if (allmod is not null)
        {
            foreach (var mod in allmod) // Alla moduler som hör till kursen.
            {
                if (mod.Id == IId)
                {
                    ModuleID = mod.Id;
                    module.Id = mod.Id;
                    module.Name = mod.Name;
                    module.Description = mod.Description;
                    module.StartDate = mod.StartDate;
                    module.EndDate = mod.EndDate;
                    module.Select = mod.Select;
                    module.CourseId = mod.CourseId;
                }
            }
        }

        var allcourse = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");

        if (allcourse is not null)
        {
            foreach (var cour in allcourse) // Kursen som hör till modulerna.
            {
                if (cour.Id == module.CourseId)
                {
                    course.Name = cour.Name;
                    course.StartDate = cour.StartDate;
                    course.EndDate = cour.EndDate;
                    CourseID = cour.Id;

                    foreach (var mod in cour.Modules)
                    {
                        modulelist.Add(mod);
                    }
                }
            }
        }

        if (appuser is not null && name is not null)
        {
            foreach (var item in appuser) // Hämtar den som för tillfället är inloggad.
            {
                if (item.Email == name) loggeduser = item;
            }
        }

        xnav.SetLogAvatar("d-none", "");

        foreach (var doc in documents) // Letar efter en avatar.
        {
            if (doc.UserId == loggeduser.Id && doc.Id4Course == -2)
            {
                xnav.SetLogAvatar("avatarlog", xClient.GetFilepath() + doc.NameIx + doc.DocName);
            }
        }
    }

    private async Task RegretRefresh()
    {
        xnav.SetDone("xnavdone", "The module was NOT edited or created.");
        xnav.SetReset('d');
        base.StateHasChanged();
        await Task.Delay(500);
        Navigation.NavigateTo($"/coursedetail/{CourseID}", true);
    }

    private async Task HandleSubmitModule()
    {
        Logger.LogInformation("HandleSubmit called");

        if (module.StartDate > module.EndDate)
        {
            await Intermission(100, true);
            xnav.SetError("xnaverror", "Date mismatch (start date is greater than end date).");
            xnav.SetReset('e');
        }
        else
        {
            await xClient.PutAsync<ModuleDto>(IId, module, "api/Module");
            await CreateAndRefresh();
        }
    }

    private async Task AddThisModule()
    {
        var lmod = new ModuleDto
        {
            Name = module.Name,
            Description = module.Description,
            StartDate = module.StartDate,
            EndDate = module.EndDate,
            Select = module.Select,
            CourseId = module.CourseId
        };

        if (module.StartDate > module.EndDate)
        {
            await Intermission(100, true);
            xnav.SetError("xnaverror", "Date mismatch (start date is greater than end date).");
            xnav.SetReset('e');
        }
        else
        {
            await xClient.PostAsync<ModuleDto>(lmod, "api/Module");

            var allmod = await xClient.GetAsync<IEnumerable<ModuleDto>>("api/Module");

            if (allmod is not null)
            {
                foreach (var mod in allmod)
                {
                    if (mod.Name == lmod.Name && mod.StartDate == lmod.StartDate && mod.EndDate == lmod.EndDate) ModuleID = mod.Id;
                }
            }

            var lact = new ActivityDto
            {
                Name = "Not yet a name",
                Description = "Not yet a description",
                StartDate = DateTime.Now,
                EndDate = DateTime.Now,
                Select = 1,
                ActivityTypeId = 1,
                ModuleId = ModuleID
            };

            await xClient.PostAsync<ActivityDto>(lact, "api/Activity");
            await CreateAndRefresh();
        }
    }

    private async Task CreateAndRefresh()
    {
        xnav.SetDone("xnavdone", "Your module is edited or added.");
        xnav.SetReset('d');
        await Intermission(2000, false);
        Navigation.NavigateTo($"/coursedetail/{CourseID}", true);
    }

    private string StartEndDate(DateTime start, DateTime end) // Returnerar datumsträng.
    {
        return $"{start.ToString().Substring(0, 10)} | {end.ToString().Substring(0, 10)}";
    }

    private async Task OpenFileControl(int ix, string filename)
    {
        await xClient.OpenFile(ix, filename);
    }

    private void ShowMessControl(string description, string author, string timestamp)
    {
        xnav.SetMess("xnavmess", description + " by " + author + " Created: " + timestamp);
        xnav.SetReset('m');
    }

    private async Task Intermission(int time, bool hide) // Paus.
    {
        if (hide)
        {
            xnav.SetReset('a');
        }
        base.StateHasChanged();
        await Task.Delay(time);
    }
}

