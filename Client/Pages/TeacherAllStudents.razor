@page "/teacherallstudents"
@using System.Diagnostics;
@inject NavigationManager Navigation
@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Teacher all students</PageTitle>

<AuthorizeView Roles ="Teacher">
    <Authorized>
<h4 class="@Emptydbcolor">@Emptydb</h4>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Context="searchlmslexnet" Model="@students" OnSubmit="OnInitializedAsync">
        <span class="nav m-lg-auto input-group">
            <InputText class="form-control" @bind-Value="searchString" placeholder="First name, last name or course" />
            <span class="nav m-lg-auto input-group-append">
                <InputSelect class="form-select" aria-label="Default select example" @bind-Value="searchType">
                    <option value="1">Name</option>
                    <option value="2">Course</option>
                </InputSelect>
            </span>
            <span class="nav m-lg-auto input-group-append">
                <button type="submit" class="btn m-lg-auto btn-outline-dark">Search</button>
            </span>
            <span class="nav m-lg-auto input-group-append">
                <button type="button" @onclick="SortName" class="btn m-lg-auto btn-outline-dark">Sort names</button>
            </span>
            <span class="nav m-lg-auto input-group-append">
                <button type="button" @onclick="SortCourse" class="btn m-lg-auto btn-outline-dark">Sort courses</button>
            </span>
            <span class="nav m-lg-auto input-group-append">
                <button type="button" @onclick="PagControl" class="btn m-lg-auto btn-outline-dark" title="Pagination settings">P</button>
            </span>
        </span>
    </EditForm>

    <Pagination @ref="paginationRef" /> @*Pagineringsfönster*@

    <table class="table">
        <thead>
            <tr>
                <th>Student</th>
                <th>Email</th>
                <th>Phone number</th>
                <th>Course</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in students)
            {
                if (PagProceed()) // Paginering.
                {
                    <tr style="color: darkblue">
                        <td>@data.FirstName @data.LastName</td>
                        <td>@data.Email</td>
                        <td>@data.PhoneNumber</td>
                        <td>
                            @foreach (var item in courses) // Hämtar kursen för användaren.
                            {
                                if (item.Id == data.CourseId)
                                {
                                    IsCourse = true;
                                    <span>@item.Name</span>
                                }
                            }
                            @if (!IsCourse)
                            {
                                <span>No course yet...</span>         
                            }
                            @{IsCourse = false;}
                        </td>
                        <td class="noline">
                            @if (data.Id is not null)
                            {
                                <button type="button" class="text-white coursebtn" @onclick="Explorer"
                                title="Add document to student">DOC</button> // CSS!
 
                                <button type="button" class="text-white coursebtn" @onclick="OpenCloseCourse"
                                title="Add/change course for student">Course</button> // CSS!
                                <div class="dropdown">
                                    <button type="button" class="@CourseClass">+</button>
                                    <div class="dropdown-content">
                                        @foreach (var item in courses)
                                        {
                                            <a @onclick="_ => GetCourse(data.Id, item.Id)">@item.Name</a> // Lägger in en ny kurs för användaren.
                                        }
                                    </div>
                                </div>

                                <button type="button" class="oi oi-circle-x text-white delbtn" @onclick=" _ => DeletePage(data.Id)"
                                title="Delete or redirect user"></button> // CSS!
                            }
                        </td>
                    </tr>
                }
                Auxx.PagCount++;
            }
        </tbody>
    </table>

    if (Auxx.PagOn) // Paginering.
    {
        <section class="@Auxx.classPag">
            <div style="margin-left: auto; margin-right: auto">
                @{var Pnum = new List<int>(); string classBtn; Auxx.PagCount = 0;} @*Skapar en lista för att kunna välja en sida*@
                @for (int i = 1; i <= (int)Math.Ceiling((decimal)this.students.Count / Auxx.PagRows); i++) Pnum.Add(i); @*Antal sidor beräknas*@
                <span><button class="oi oi-caret-left btn btn-dark px-2 mx-2" @onclick=" _ => PagBtnSet(Auxx.PagPage - 1, 0)"></button></span> @*>>>Sidoknapp*@
                @foreach (var n in Pnum) // Radar upp sidnummerknappar och markerar numret man klickar på.
                {
                    if (n == Auxx.PagPage) classBtn = "pagbtnact"; else classBtn = "pagbtn"; @*Nummerknappar*@
                    <span><button type="button" class="@classBtn" @onclick=" _ => PagBtnSet(n, 0)">@n</button></span>
                }
                <span><button class="oi oi-caret-right btn btn-dark px-2 mx-2" @onclick=" _ => PagBtnSet(Auxx.PagPage + 1, Pnum.Count)"></button> @*<<<Sidoknapp*@
                <span class="pagfind">&lsaquo;@students.Count&rsaquo;</span></span>  @*Antal hittade*@
                @{Auxx.classPag = "dflex";} @*Förhindrar att sidoknapparna syns vid reloading*@
            </div>
        </section>
    }
    else
    {
        <footer class="dflex"> @*Antal hittade*@
            <div class="pagfind">&lsaquo;@students.Count&rsaquo;</div>
        </footer>
    }
}

<DeleteStudent @ref="deleteRef" /> @*Delete-fönster*@

</Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private Pagination paginationRef; // Pagineringsfönster.

    private DeleteStudent deleteRef; // Delete-fönster.

    private void PagControl() // Pagineringsfönster.
    {
        paginationRef.Show("");
    }

    private async Task DeletePage(string id) // Delete-fönster.
    {
        Auxx.GuidId = id;
        await deleteRef.Show("");

        if (Auxx.DelFlag)
        {
            await OnInitializedAsync();
            Auxx.DelFlag = false;
        }
    }

    private List<AppUserDto> students = new();

    private List<CourseDto> courses = new();

    private string Emptydb = "List of students";

    private string CourseClass = "text-white coursebtn hide";

    private string Emptydbcolor = "headeroff";

    private bool IsCourse;
    private bool sortName;
    private bool sortCourse;

    private string searchString = string.Empty;
    private byte searchType = 1;

    protected override async Task OnInitializedAsync()
    {
        xnav.SetReset('a');
        Emptydb = "List of students";

        if (Auxx.PagRows == 0) // Paginering.
        {
            try // Alla variabler till pagineringen är statiska.
            {
                Auxx.PagOn = bool.Parse(await xClient.GetStorage<string>("Pag1On"));
                Auxx.PagRows = int.Parse(await xClient.GetStorage<string>("Pag1Rows"));
                Auxx.PagCount = 0;
                Auxx.PagPage = 1;
                Auxx.classPag = "dflex";
            }
            catch
            {
                xnav.SetError("xnaverror", "An error occurred while trying to open local storage.");
                xnav.SetReset('e');
                base.StateHasChanged();
                await Task.Delay(3000);
                Auxx.PagOn = false;
                Auxx.PagCount = 0;
                Auxx.PagRows = 10; // Noll ger "division by zero"
                Auxx.PagPage = 1;
                Auxx.classPag = "dflex";
            }
        }
        else if (!Auxx.DelFlag) Auxx.classPag = "hide"; // Förhindrar att knapparna synliggörs.

        students.Clear(); // Sökfunktionen kräver att listorna rensas.
        courses.Clear();

        if (searchType == 1) // Sökning med namn.
        {
            var appuser = await appuserClient.GetAsync();

            if (appuser is not null)
            {
                foreach (var item in appuser)
                {
                    // Sökfiltrering med IndexOf: förnamn eller efternamn.
                    if (!string.IsNullOrWhiteSpace(searchString))
                    {
                        if (item.UserRole == 1 && (item.FirstName.ToLower().IndexOf(searchString.ToLower()) != -1 ||
                        item.LastName.ToLower().IndexOf(searchString.ToLower()) != -1)) students.Add(item);
                    }
                    else
                    {
                        if (item.UserRole == 1) students.Add(item);
                    }
                }
                if (students.Count < 1) Emptydb = "No students !";
                if (!string.IsNullOrWhiteSpace(searchString) && students.Count < 1) Emptydb = "There is no student with that name...";
            }
            else
            {
                Emptydb = "No students !";
            }

            var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");

            if (course is not null)
            {
                courses = course.ToList();
            }
        }

        if (searchType == 2) // Sökning med kurs.
        {
            var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");

            if (course is not null)
            {
                courses = course.ToList();
            }

            var appuser = await appuserClient.GetAsync();

            if (course is not null)
            {
                foreach (var item in course)
                {
                    // Sökfiltrering med IndexOf: kurs.
                    if (!string.IsNullOrWhiteSpace(searchString))
                    {
                        if (item.Name.ToLower().IndexOf(searchString.ToLower()) != -1)
                        {
                            if (appuser is not null)
                            {
                                foreach (var app in appuser) // Letar efter den student (1) som har den kursen.
                                {
                                    if (app.UserRole == 1 && app.CourseId == item.Id) students.Add(app);
                                }
                            }
                        }
                    }
                }

                if (appuser is not null && string.IsNullOrWhiteSpace(searchString))
                {
                    foreach (var app in appuser)
                    {
                        if (app.UserRole == 1) students.Add(app);
                    }
                }

                if (courses.Count < 1) Emptydb = "No courses !";
                if (!string.IsNullOrWhiteSpace(searchString) && courses.Count < 1) Emptydb = "There is no course with that name...";
            }
            else
            {
                Emptydb = "No courses !";
            }
        }

        if (sortName) students = students.OrderBy(o => o.FirstName).ToList(); // Sorterar efter namn.

        if (sortCourse) // Sorterar efter kurs.
        {
            courses = courses.OrderBy(c => c.Name).ToList();
            var StudList = new List<AppUserDto>();

            foreach (var cour in courses)
            {
                foreach (var stud in students)
                {
                    if (stud.CourseId == cour.Id) StudList.Add(stud);
                }
            }
            students = StudList;
        }
    }

    private void Explorer()
    {
        Process.Start("explorer.exe", @"C:\Users");
    }

    private void OpenCloseCourse() // Öppnar/stänger +knapp. CSS!
    {
        if (CourseClass == "text-white coursebtn hide")
        {
            CourseClass = "text-white coursebtn show";
        }
        else
        {
            CourseClass = "text-white coursebtn hide";
        }
    }

    private async Task GetCourse(string id, int courseId) // Lägger in ny kurs + feedback.
    {
        courseId = courseId + 100;
        await appuserClient.PreAsync(id, courseId);
        Emptydb = "This student has now been updated...";
        Emptydbcolor = "headeron";
        await Intermission(1000, false);
        Emptydb = "List of students";
        Emptydbcolor = "headeroff";
        await OnInitializedAsync();
    }

    private async Task SortName() // Sorterar studenter efter deras namn.
    {
        if (sortName) sortName = false; else sortName = true;
        await OnInitializedAsync();
    }

    private async Task SortCourse() // Sorterar studenter efter deras kurs.
    {
        if (sortCourse) sortCourse = false; else sortCourse = true;
        await OnInitializedAsync();
    }

    private bool PagProceed() // Paginering.
    {
        bool Proceed = true;

        // Om man söker ett objekt på en sida med ett högt nummer.
        if (Auxx.PagPage > (int)Math.Ceiling((decimal)this.students.Count / Auxx.PagRows)) Auxx.PagPage = 1;

        if ((Auxx.PagCount >= Auxx.PagRows * (Auxx.PagPage - 1) && Auxx.PagCount < Auxx.PagRows * Auxx.PagPage) || !Auxx.PagOn) Proceed = true;
        else Proceed = false;

        return Proceed;
    }

    private async Task PagBtnSet(int page, int pnum) // Paginering.
    {
        if (page < 1) page = 1; // Förhindrar 0-sidor och sidor högre än förekommande.
        if (page > pnum && pnum != 0) page = pnum;

        Auxx.PagPage = page;
        Auxx.classPag = "hide";

        await OnInitializedAsync();
    }

    private async Task Intermission(int time, bool hide) // Paus.
    {
        if (hide)
        {
            xnav.SetReset('a');
        }
        base.StateHasChanged();
        await Task.Delay(time);
    }
}
