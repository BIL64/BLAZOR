@page "/teacherallunregistered"
@using System.Diagnostics;
@inject NavigationManager Navigation
@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XLangTeacher xtea
@inject XLangToast xtoa
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Teacher all unregistered</PageTitle>

<AuthorizeView Roles ="Teacher">
    <Authorized>
<h4>@Emptydb</h4>

@if (visitors == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Context="searchlmslexnet" Model="@visitors" OnSubmit="OnInitializedAsync">
        <span class="nav m-lg-auto input-group">
            <InputText class="form-control" @bind-Value="searchString" placeholder="First or last name" />
            <span class="nav m-lg-auto input-group-append">
                <button type="submit" class="btn m-lg-auto btn-outline-dark">Search</button>
            </span>
            <span class="nav m-lg-auto input-group-append">
                <button type="button" class="btn m-lg-auto btn-outline-dark" @onclick="DeleteAllVisitors">Delete all</button>
            </span>
        </span>
    </EditForm>

    <ToastDeleteUnregistered @ref="deleteRef" /> @*Delete-fönster*@
    <ToastDeleteAllVisitors @ref="deleteAll" /> @*Delete-fönster*@

    <table class="table">
        <thead>
            <tr>
                <th>@xtea.TxtText[65]</th>
                <th>@xtea.TxtText[66]</th>
                <th>@xtea.TxtText[67]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in visitors)
            {
                <tr>
                    <td>@data.FirstName @data.LastName</td>
                    <td>@data.Email</td>
                    <td>@data.PhoneNumber</td>
                    <td class="noline">
                        @if (@data.UserRole == 0) // CSS!
                        {
                            if (data.Id is not null)
                            {
                                <button type="button" class="text-white regbtn" @onclick=" _ => GetRegistered(data.Id)"
                                    title=@xtea.TxtTitle[38]>@xtea.TxtButton[13]</button>
                            }
                        }
                        @if (data.Id is not null)
                        {
                            <button type="button" class="oi oi-circle-x text-white delbtn" @onclick=" _ => DeleteUser(data.Id)"
                                title=@xtea.TxtTitle[35]></button> // CSS!
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

</Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private ToastDeleteUnregistered? deleteRef; // Delete-fönster.

    private async Task DeleteUser(string id) // Delete-fönster.
    {
        Auxx.GuidId = id;
        await deleteRef!.Show();

        if (Auxx.Flag)
        {
            await OnInitializedAsync();
            Auxx.Flag = false;
        }
    }

    private ToastDeleteAllVisitors? deleteAll; // Delete-fönster.

    private async Task DeleteAllVisitors() // Delete-fönster.
    {
        await deleteAll!.Show();
    }

    private List<AppUserDto> visitors = new();

    private string Emptydb = string.Empty;

    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (xtea.RenderPage != "STILL_HERE")
        {
            xnav.SetJohnDoe(false);
            xnav.MainRole = 2;
            xnav.ClassSettings = "d-block"; // Settings.
            if (await xClient.GetStorage<string>("LMS_Lang") == "EN") { xtea.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "SV") { xtea.SetLanguage_SV(); xtoa.SetLanguage_SV(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "DE") { xtea.SetLanguage_DE(); xtoa.SetLanguage_DE(); }
            else if (await xClient.GetStorage<string>("LMS_Lang") == "FR") { xtea.SetLanguage_FR(); xtoa.SetLanguage_FR(); }
            else { xtea.SetLanguage_EN(); xtoa.SetLanguage_EN(); }
        }

        xnav.SetReset('a');

        visitors.Clear(); // Sökfunktionen kräver att listan rensas.

        Emptydb = xtea.TxtText[57];

        var appuser = await appuserClient.GetAsync();

        if (appuser is not null)
        {
            foreach (var item in appuser)
            {
                // Sökfiltrering med IndexOf: förnamn, efternamn och kurs.
                if (!string.IsNullOrWhiteSpace(searchString))
                {
                    if (item.UserRole == 0 && (item.FirstName.ToLower().IndexOf(searchString.ToLower()) != -1 ||
                    item.LastName.ToLower().IndexOf(searchString.ToLower()) != -1 ||
                    item.LastName.ToLower().IndexOf(searchString.ToLower()) != -1)) visitors.Add(item);
                }
                else
                {
                    if (item.UserRole == 0) visitors.Add(item);
                }
            }
            if (visitors.Count < 1) Emptydb = xtea.TxtText[58];
            if (!string.IsNullOrWhiteSpace(searchString) && visitors.Count < 1) Emptydb = xtea.TxtText[59];
        }
        else
        {
            Emptydb = xtea.TxtText[58];
        }

        xtea.OnChange += StateHasChanged;
        xtoa.OnChange += StateHasChanged;
    }

    private async Task GetRegistered(string id) // Registrerar den oregistrerade.
    {
        await xnav.Intermission(500, true);
        xnav.SetDone(xtea.TxtDone[6]);
        xnav.SetReset('d');
        await appuserClient.PreAsync(id, 1);
    }
}
