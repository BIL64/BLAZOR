@page "/teacherallunregistered"
@using System.Diagnostics;
@inject NavigationManager Navigation
@inject IAppUserDtoClient appuserClient
@inject HttpClient Http
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Teacher all unregistered</PageTitle>

<AuthorizeView Roles ="Teacher">
    <Authorized>
<h4>@Emptydb</h4>

@if (visitors == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Context="searchlmslexnet" Model="@visitors" OnSubmit="OnInitializedAsync">
        <span class="nav m-lg-auto input-group">
            <InputText class="form-control" @bind-Value="searchString" placeholder="First or last name" />
            <span class="nav m-lg-auto input-group-append">
                <button type="submit" class="btn m-lg-auto btn-outline-dark">Search</button>
            </span>
            <span class="nav m-lg-auto input-group-append">
                <button type="button" class="btn m-lg-auto btn-outline-dark" @onclick="DeleteAllVisitors">Delete all or set REG</button>
            </span>
        </span>
    </EditForm>

    <DeleteAllVisitors @ref="deleteAll" /> @*Delete-fönster*@

    <table class="table">
        <thead>
            <tr>
                <th>Visitor</th>
                <th>Email</th>
                <th>Phone number</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in visitors)
            {
                <tr>
                    <td>@data.FirstName @data.LastName</td>
                    <td>@data.Email</td>
                    <td>@data.PhoneNumber</td>
                    <td class="noline">
                        @if (@data.UserRole == 0) // CSS!
                        {
                            if (data.Id is not null)
                            {
                                <button type="button" class="text-white regbtn" @onclick=" _ => GetRegistered(data.Id)"
                                    title="Not yet authorized student">Register now!</button>
                            }
                        }
                        @if (data.Id is not null)
                        {
                            <button type="button" class="oi oi-circle-x text-white delbtn" @onclick=" _ => DeleteUser(data.Id)"
                                title="Delete or redirect user"></button> // CSS!
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<DeleteUnregistered @ref="deleteRef" /> @*Delete-fönster*@

</Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private DeleteUnregistered? deleteRef; // Delete-fönster.

    private async Task DeleteUser(string id) // Delete-fönster.
    {
        Auxx.GuidId = id;
        await deleteRef!.Show();

        if (Auxx.Flag)
        {
            await OnInitializedAsync();
            Auxx.Flag = false;
        }
    }

    private DeleteAllVisitors? deleteAll; // Delete-fönster.

    private async Task DeleteAllVisitors() // Delete-fönster.
    {
        await deleteAll!.Show();
    }

    private List<AppUserDto> visitors = new();

    private string Emptydb = "List of unregistered";

    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        xnav.SetJohnDoe(false);
        xnav.SetReset('a');

        visitors.Clear(); // Sökfunktionen kräver att listan rensas.

        var appuser = await appuserClient.GetAsync();

        Emptydb = "List of unregistered";

        if (appuser is not null)
        {
            foreach (var item in appuser)
            {
                // Sökfiltrering med IndexOf: förnamn, efternamn och kurs.
                if (!string.IsNullOrWhiteSpace(searchString))
                {
                    if (item.UserRole == 0 && (item.FirstName.ToLower().IndexOf(searchString.ToLower()) != -1 ||
                    item.LastName.ToLower().IndexOf(searchString.ToLower()) != -1 ||
                    item.LastName.ToLower().IndexOf(searchString.ToLower()) != -1)) visitors.Add(item);
                }
                else
                {
                    if (item.UserRole == 0) visitors.Add(item);
                }
            }
            if (visitors.Count < 1) Emptydb = "No unregistered !";
            if (!string.IsNullOrWhiteSpace(searchString) && visitors.Count < 1) Emptydb = "There is no visitor with that name...";
        }
        else
        {
            Emptydb = "No unregistered !";
        }
    }

    private async Task GetRegistered(string id) // Registrerar den oregistrerade.
    {
        await xnav.Intermission(500, true);
        xnav.SetDone("This visitor was registered. Press “Search” for refreshing.");
        xnav.SetReset('d');
        await appuserClient.PreAsync(id, 1);
    }
}
