@page "/studentallstudents"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Både studenter och lärare har åtkomst hit*@

<PageTitle>Student all students</PageTitle>

<AuthorizeView Roles="Student, Teacher">
    <Authorized>
<h4>@Emptydb</h4>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Context="searchlmslexnet" Model="@students" OnSubmit="OnInitializedAsync">
        <span class="nav m-lg-auto input-group">
            <InputText class="form-control" @bind-Value="searchString" placeholder="First or last name" />
            <span class="nav m-lg-auto input-group-append">
                <button type="submit" class="btn m-lg-auto btn-outline-dark">Search</button>
            </span>
            <span class="nav m-lg-auto input-group-append">
                <button type="button" @onclick="SortName" class="btn m-lg-auto btn-outline-dark">Sort names</button>
            </span>
        </span>
    </EditForm>

    <DocumentAdd @ref="docsaveRef" /> @*Filsparfönster*@

    <table class="table">
        <thead>
            <tr>
                <th>Student</th>
                <th>Email</th>
                <th>Phone number</th>
                <th>Course</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in students)
            {
                if (data.UserRole == 2)
                {
                    <tr style="color: darkred">                    
                        <td>@data.FirstName @data.LastName (teacher)</td>
                        <td>@data.Email</td>
                        <td>@data.PhoneNumber</td>
                        <td>
                            @foreach (var item in courses) // Hämtar kursen som motsvarar dess id.
                            {
                                if (item.Id == data.CourseId)
                                {
                                    IsCourse = true;
                                    <span>@item.Name</span>
                                }
                            }
                            @if (!IsCourse)
                            {
                                <span>No course yet...</span>
                            }
                            @{IsCourse = false;}
                        </td>
                        <td class="noline">
                            @if (data.Id is not null)
                            {
                                <button type="button" class="text-white coursebtn" @onclick=" _ => DocSaveControl(data.Id, 10, data.FirstName + ' ' + data.LastName)"
                                title="Add document to student">+Doc</button> // CSS!
                            }
                        </td>
                    </tr>
                }

                if (data.UserRole == 1)
                {
                    <tr style="color: darkblue">                    
                        <td>@data.FirstName @data.LastName</td>
                        <td>@data.Email</td>
                        <td>@data.PhoneNumber</td>
                        <td>
                            @foreach (var item in courses) // Hämtar kursen som motsvarar dess id.
                            {
                                if (item.Id == data.CourseId)
                                {
                                    IsCourse = true;
                                    <span>@item.Name</span>
                                }
                            }
                            @if (!IsCourse)
                            {
                                <span>No course yet...</span>
                            }
                            @{IsCourse = false;}
                        </td>
                        <td class="noline">
                            @if (data.Id is not null)
                            {
                                <button type="button" class="text-white coursebtn" @onclick=" _ => DocSaveControl(data.Id, 10, data.FirstName + ' ' + data.LastName)"
                                title="Add document to student">+Doc</button> // CSS!
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <footer class="d-flex"> @*Antal hittade*@
        <div class="pagfind">&lsaquo;@students.Count&rsaquo;</div>
    </footer>
}
</Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private DocumentAdd? docsaveRef; // Filsparfönster.

    private async Task DocSaveControl(string id, byte doctype, string name) // Filsparfönster.
    {
        Auxx.GuidId = id;
        Auxx.DocType = doctype;
        Auxx.Name4Type = name;
        await docsaveRef!.Show();
    }

    private List<AppUserDto> students = new();

    private List<CourseDto> courses = new();

    private AppUserDto loggeduser = new(); // Info om den som för tillfället är inloggad.

    private string Emptydb = "List of students";
    private string searchString = string.Empty;

    private bool IsCourse;

    protected override async Task OnInitializedAsync()
    {
        xnav.SetReset('a');
        Emptydb = "List of students";

        students.Clear(); // Sökfunktionen kräver att listorna rensas.
        courses.Clear();

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.

        var appuser = await appuserClient.GetAsync();

        if (appuser is not null && name is not null)
        {
            foreach (var item in appuser) // Hämtar den som för tillfället är inloggad.
            {
                if (item.Email == name) loggeduser = item;
            }

            foreach (var item in appuser)
            {
                // Sökfiltrering med IndexOf: förnamn eller efternamn + filtrering av studener knutna till den kurs som den som för tillfället är inloggad.
                if (!string.IsNullOrWhiteSpace(searchString))
                {
                    if (item.CourseId == loggeduser.CourseId && (item.FirstName.ToLower().IndexOf(searchString.ToLower()) != -1 ||
                    item.LastName.ToLower().IndexOf(searchString.ToLower()) != -1)) students.Add(item);
                }
                else
                {
                    if (item.CourseId == loggeduser.CourseId) students.Add(item);
                }
            }
            if (students.Count < 1) Emptydb = "No students !";
        }
        else
        {
            Emptydb = "No students !";
        }

        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");

        if (course is not null)
        {
            courses = course.ToList();
        }
    }

    private void SortName() // Sorterar studenter efter deras namn.
    {
        students = students.OrderBy(o => o.FirstName).ToList();
    }
}
