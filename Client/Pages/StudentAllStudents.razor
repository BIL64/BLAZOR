@page "/studentallstudents"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager Navigation
@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Både studenter och lärare har åtkomst hit*@

<PageTitle>Student all students</PageTitle>

<AuthorizeView Roles="Student, Teacher">
    <Authorized>
        <nav style="display: flex; width: 100%">
            <div style="width: 75%; text-align: left"><h3>@loggeduser.FirstName, this is your course: @CourseName</h3></div>
            <div style="margin-left: auto; margin-right: 0"><h5>@CourseDate</h5></div>
        </nav>
        <br />
        <p>Plats för dokument...</p>

        @if (modules == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var data in modules)
            {
                <section class="modulebox">
                    <div style="display: flex; width: 100%">
                        <div style="width: 75%; text-align: left">
                            <b title="@data.Description">Module @data.Id: <em>@data.Name &nbsp;</em></b>
                        </div>
                        <div style="margin-left: auto; margin-right: 0"><b>@StartEndDate(data.StartDate, data.EndDate)</b></div>
                    </div>
                    <div style="display: flex; width: 100%">
                        <div style="width: 75%; text-align: left"><button type="button" class="documentbtn">Documents Module</button></div>
                    </div>
                </section>

                <article class="activitybox">

                    <table class="table" style="color: #555">@*Grå text*@
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Aktivity</th>
                                <th>Type</th>
                                <th>Date</th>
                                <th>Items</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var act in activities)
                            {
                                <tr>
                                    @if (act.ModuleId == data.Id)
                                    {
                                        <td>@act.Id</td>
                                        <td><em title="@act.Description">@act.Name</em></td>
                                        <td>
                                            @foreach (var actype in activityTypes)
                                            {
                                                if (actype.Id == act.ActivityTypeId)
                                                {
                                                    @actype.Name
                                                }
                                            }
                                        </td>
                                        <td>@StartEndDate(act.StartDate, act.EndDate)</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div><button type="button" class="documentbtn">Documents Activity</button></div>

                </article>
            }
        }

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private List<CourseDto> courses = new();

    private List<ModuleDto> modules = new();

    private List<ActivityDto> activities = new();

    private List<ActivityTypeDto> activityTypes = new();

    private AppUserDto loggeduser = new(); // Info om den som för tillfället är inloggad.

    private string CourseName = string.Empty;
    private int CourseId;
    private string CourseDate = string.Empty;
    private bool DeleteFlag;

    protected override async Task OnInitializedAsync()
    {
        xnav.SetDone("hide", "");
        xnav.SetError("hide", "");

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.

        var appuser = await appuserClient.GetAsync();

        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");
        var activityType = await xClient.GetAsync<IEnumerable<ActivityTypeDto>>("api/Acttype");

        if (course is not null && appuser is not null)
        {
            foreach (var item in appuser) // Hämtar den som för tillfället är inloggad.
            {
                if (item.Email == name) loggeduser = item;
            }

            foreach (var cour in course)
            {
                if (cour.Id == loggeduser.CourseId) // Hämtar Kursinfo.
                {
                    CourseName = cour.Name;
                    CourseId = cour.Id;
                    CourseDate = StartEndDate(cour.StartDate, cour.EndDate);

                    foreach (var mod in cour.Modules) // Hämtar moduler.
                    {
                        modules.Add(mod);

                        foreach (var act in mod.Activities) // Hämtar aktiviteter.
                        {
                            activities.Add(act);
                        }
                    }
                }
            }
        }
        else
        {
            CourseName = "No course could be find...";
        }

        if (activityType is not null) // Hämtar aktivitetstyper.
        {
            activityTypes = activityType.ToList();
        }
    }

    private string StartEndDate(DateTime start, DateTime end) // Returnerar datumsträng.
    {
        return $"{start.ToString().Substring(0, 10)} | {end.ToString().Substring(0, 10)}";
    }
}
