@page "/studentallstudents"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav
@inject XPagination xpag
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Både studenter och lärare har åtkomst hit*@

<PageTitle>Student all students</PageTitle>

<AuthorizeView Roles="Student, Teacher">
    <Authorized>
<h4>@Emptydb</h4>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Context="searchlmslexnet" Model="@students" OnSubmit="OnInitializedAsync">
        <span class="nav m-lg-auto input-group">
            <InputText class="form-control" @bind-Value="searchString" placeholder="First or last name" />
            <span class="nav m-lg-auto input-group-append">
                <button type="submit" class="btn m-lg-auto btn-outline-dark">Search</button>
            </span>
            <span class="nav m-lg-auto input-group-append">
                <button type="button" @onclick="SortName" class="btn m-lg-auto btn-outline-dark">Sort names</button>
            </span>
        </span>
    </EditForm>

    <DocumentAdd @ref="docsaveRef" /> @*Filsparfönster*@

    <table class="table">
        <thead>
            <tr>
                @if (xpag.ClassPag == "d-flex") // Eliminerar visuella störningar.
                {
                    <th>Student</th>
                    <th>Email</th>
                    <th>Phone number</th>
                    <th>Course</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var data in students)
            {
                if (xpag.PagProceed(students)) // Paginering.
                {
                    if (data.UserRole == 2)
                    {
                        <tr style="color: darkred">
                            @{classAvatar = "";}
                            @foreach (var doc in documents)
                            {
                                if (doc.UserId == data.Id && doc.Id4Course == -2) classAvatar = "avatar";
                            }
                            <td class="@classAvatar" @onmouseover=" _ => ShowAvatar(data.Id)">@data.FirstName @data.LastName (teacher)</td>
                            <td>@data.Email</td>
                            <td>@data.PhoneNumber</td>
                            <td>
                                @foreach (var item in courses) // Hämtar kursen som motsvarar dess id.
                                {
                                    if (item.Id == data.CourseId)
                                    {
                                        IsCourse = true;
                                        <span>@item.Name</span>
                                    }
                                }
                                @if (!IsCourse)
                                {
                                    <span>No course yet...</span>
                                }
                                @{IsCourse = false;}
                            </td>
                            <td class="noline">
                                @if (data.Id is not null)
                                {
                                    <button type="button" class="text-white coursebtn" @onclick=" _ => DocSaveControl(data.Id, 10, data.FirstName + ' ' + data.LastName)"
                                    title="Add document to student">+Doc</button> // CSS!
                                }
                            </td>
                        </tr>
                    }

                    if (data.UserRole == 1)
                    {
                        <tr style="color: darkblue">
                            @{classAvatar = "";}
                            @foreach (var doc in documents)
                            {
                                if (doc.UserId == data.Id && doc.Id4Course == -2) classAvatar = "avatar";
                            }
                            <td class="@classAvatar" @onmouseover=" _ => ShowAvatar(data.Id)">@data.FirstName @data.LastName</td>
                            <td>@data.Email</td>
                            <td>@data.PhoneNumber</td>
                            <td>
                                @foreach (var item in courses) // Hämtar kursen som motsvarar dess id.
                                {
                                    if (item.Id == data.CourseId)
                                    {
                                        IsCourse = true;
                                        <span>@item.Name</span>
                                    }
                                }
                                @if (!IsCourse)
                                {
                                    <span>No course yet...</span>
                                }
                                @{IsCourse = false;}
                            </td>
                            <td class="noline">
                                @if (data.Id is not null)
                                {
                                    <button type="button" class="text-white coursebtn" @onclick=" _ => DocSaveControl(data.Id, 10, data.FirstName + ' ' + data.LastName)"
                                    title="Add document to student">+Doc</button> // CSS!
                                }
                            </td>
                        </tr>
                    }
                }
                xpag.PagCount++;
            }
        </tbody>
    </table>

    if (xpag.PagOn) // PAGINERING.
    {
        var Pnum = new List<int>(); xpag.PagCount = 0; // Skapar en lista för att kunna välja en sida.
        for (int i = 1; i <= (int)Math.Ceiling((decimal)this.students.Count / xpag.PagRows); i++) Pnum.Add(i); // Antal sidor beräknas.

        if ((xpag.PagOn && !xpag.PagAuto) || (xpag.PagOn && xpag.PagAuto && @students.Count > xpag.PagRows)) // Villkor som styrs av den automatiska pagineringen.
        {
            <section class="@xpag.ClassPag"> @*Grafiken för paginering*@
                <div style="margin: 0 auto 0 auto">
                    <span><button class="oi oi-caret-left btn btn-dark px-2 mx-2" @onclick=" _ => PagSet(xpag.PagPage - 1, 0)"></button></span> @*<<Sidoknapp*@
                    @foreach (var n in Pnum) // Radar upp sidnummerknappar och markerar numret man klickar på.
                    {
                        if (n == xpag.PagPage) // Markering av sidnummer.
                        {
                            <span><button type="button" class="pagbtnact" @onclick=" _ => PagSet(n, 0)">@n</button></span>
                        }
                        else
                        if (n % xpag.PagRed == 0) // Övriga sidor med eller utan reduktion.
                        {
                            <span><button type="button" class="pagbtn" @onclick=" _ => PagSet(n, 0)">@n</button></span>
                        }
                        if (xpag.PagRed > 1) // Mellanslag vid reduktion.
                        {
                            <span>&nbsp;</span>
                        }
                    }
                    <span><button class="oi oi-caret-right btn btn-dark px-2 mx-2" @onclick=" _ => PagSet(xpag.PagPage + 1, Pnum.Count)"></button></span> @*>>Sidoknapp*@
                    <span class="pagfind">&lsaquo;@students.Count&rsaquo;</span> @*Antal hittade*@
                </div>
            </section>
        }
        else
        {
            <aside class="@xpag.ClassPag"> @*Antal hittade*@
                <div class="pagfind">&lsaquo;@students.Count&rsaquo;</div>
            </aside>
        }
        xpag.ClassPag = "d-flex"; // Förhindrar att sidoknapparna syns vid reloading.
    }
}
</Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private DocumentAdd? docsaveRef; // Filsparfönster.

    private async Task DocSaveControl(string id, byte doctype, string name) // Filsparfönster.
    {
        Auxx.GuidId = id;
        Auxx.DocType = doctype;
        Auxx.Name4Type = name;
        await docsaveRef!.Show();
    }

    private List<AppUserDto> students = new();

    private List<CourseDto> courses = new();

    private List<DocumentDto> documents = new();

    private AppUserDto loggeduser = new(); // Info om den som för tillfället är inloggad.

    private string Emptydb = "List of students";
    private string searchString = string.Empty;
    private string classAvatar = "";

    private bool IsCourse;

    private async Task PagSet(int page, int pnum) // Paginering.
    {
        xpag.PagBtnSet(page, pnum);
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        xnav.SetReset('a');
        Emptydb = "List of students";

        await xpag.InitPag(0, students); // Pagineringskontroll.

        students.Clear(); // Sökfunktionen kräver att listorna rensas.
        courses.Clear();
        documents.Clear();

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.

        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        if (document is not null) documents = document.ToList(); // Hämtar alla dokument.

        var appuser = await appuserClient.GetAsync();

        if (appuser is not null && name is not null)
        {
            foreach (var item in appuser) // Hämtar den som för tillfället är inloggad.
            {
                if (item.Email == name) loggeduser = item;
            }

            foreach (var item in appuser)
            {
                // Sökfiltrering med IndexOf: förnamn eller efternamn + filtrering av studener knutna till den kurs som den som för tillfället är inloggad.
                if (!string.IsNullOrWhiteSpace(searchString))
                {
                    if (item.CourseId == loggeduser.CourseId && (item.FirstName.ToLower().IndexOf(searchString.ToLower()) != -1 ||
                    item.LastName.ToLower().IndexOf(searchString.ToLower()) != -1)) students.Add(item);
                }
                else
                {
                    if (item.CourseId == loggeduser.CourseId) students.Add(item);
                }
            }
            if (students.Count < 1) Emptydb = "No students !";
            if(!string.IsNullOrWhiteSpace(searchString) && students.Count < 1) Emptydb = "There is no student or teacher with that name...";
        }
        else
        {
            Emptydb = "No students !";
        }

        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");

        if (course is not null)
        {
            courses = course.ToList();
        }
    }

    private void SortName() // Sorterar studenter efter deras namn.
    {
        students = students.OrderBy(o => o.FirstName).ToList();
    }

    private void ShowAvatar(string? id)
    {
        bool FindAvatar = false;

        @foreach (var doc in documents)
        {
            if (doc.UserId == id && doc.Id4Course == -2)
            {
                xnav.SetMessAvatar("xnavavatar", xClient.GetFilepath() + doc.NameIx + doc.DocName);
                xnav.SetReset('v');
                FindAvatar = true;
            }
        }

        if (!FindAvatar)
        {
            xnav.SetMessAvatar("d-none", "");
            xnav.SetReset('v');
        }
    }
}
