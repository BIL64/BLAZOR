@using System.Net.Http.Headers
@using System.Text.Json
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppUserDtoClient appuserClient
@inject ILogger<CourseDetail> Logger
@inject IXDtoClient xClient
@inject XLangToast xtoa
@inject XNavMenu xnav
@attribute [Authorize]
@*Toast component by Björn Lindqvist*@
@*Både studenter och lärare har åtkomst hit*@

<AuthorizeView Roles ="Student, Teacher">
    <Authorized>
        <div class="toast-container p-3 @showClass"
             style="position: fixed; top: auto; top: @(xnav.Pos_V)px; margin-left: @(xnav.Pos_H)px; z-index: 5" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show bg-white" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header" @onmouseup=" _ => xnav.Mouse('U', _)" @onmousedown=" _ => xnav.Mouse('D', _)"
                     @onmousemove=" _ => xnav.Mouse('M', _)" @onmouseout=" _ => xnav.Mouse('M', _)">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="toast-body">
                    <EditForm Model="@document" Context="documentaddlmslexnet" OnValidSubmit="HandleSubmitDocument">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div style="font-size: 0.8rem; color:darkblue"><em>For @Auxx.Name4Type...</em></div>
                        <div class="@classFile">
                            <InputFile class="form-control text-white" style="background-color:blueviolet" OnChange="@OnInputFileChange" />
                        </div>
                        <div class="form-group m-3">
                            <label for="Description">@xtoa.TxtText[10]</label>
                            <InputTextArea id="Description" class="form-control" @bind-Value="document.Description" placeholder="Enter description / message" />
                        </div>
                        <div class="@classFile">
                            <label for="Author">@xtoa.TxtText[11]</label>
                            <InputText id="Author" class="form-control" @bind-Value="document.Author" />
                        </div>
                        <div class="form-group m-3">
                            <button type="submit" class="text-white rembtn" style="margin-right: 15px">@xtoa.TxtButton[15]</button> @* Send *@
                            <button type="button" class="text-white remnot" @onclick="Close">@xtoa.TxtButton[0]</button> @* NO *@
                            <button type="button" class="@classBtn" @onclick="ToggleFileMess" title=@xtoa.TxtTitle[15]>@xtoa.TxtButton[9]</button> @* File / Message *@
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";

    private int NameIndex;
    private bool Upload;
    private bool IsMan; // För särskiljning av obligatoriska dokument.
    private string classFile = "form-group m-md-3";
    private string classBtn = "d-none";
    private string DocFileName = string.Empty;

    MultipartFormDataContent content = new();

    DocumentDto document = new();

    List<UploadResult> uploadResults = new();

    List<AppUserDto> users = new();

    AppUserDto loggeduser = new(); // Info om den som för tillfället är inloggad.

    public async Task Show()
    {
        xnav.SetReset('a');

        var dim = await xClient.GetWindow(); // Hämtar aktuell skärmstorlek.
        xnav.Pos_H = (int)Math.Round(dim.Width * 0.08); // 08%
        xnav.Pos_V = (int)Math.Round(dim.Height * 0.2); // 20%

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.
        var appuser = await appuserClient.GetAsync();
        if (appuser is not null) users = appuser.ToList();

        if (appuser is not null && name is not null)
        {
            foreach (var item in appuser) // Hämtar den som för tillfället är inloggad.
            {
                if (item.Email == name) loggeduser = item;
            }
        }

        Upload = false;
        IsMan = false;

        if (Auxx.DocType > 100) // Ska listningen av dokumenten kunna urskilja obligatoriska filer?
        {
            IsMan = true;
            Auxx.DocType -= 100;
        }

        if (Auxx.DocType == 1) HeaderText = xtoa.TxtHead[17]; // Add MEMBER document file...
        if (Auxx.DocType == 2) HeaderText = xtoa.TxtHead[18]; // Add COURSE document file...
        if (Auxx.DocType == 3) HeaderText = xtoa.TxtHead[19]; // Add MODULE document file...
        if (Auxx.DocType == 4) HeaderText = xtoa.TxtHead[20]; // Add ACTIVITY document file...
        if (Auxx.DocType == 10) HeaderText = xtoa.TxtHead[24]; // Add MEMBER file or message...
        if (Auxx.DocType == 20) HeaderText = xtoa.TxtHead[25]; // Add COURSE file or message...
        if (Auxx.DocType == 30) HeaderText = xtoa.TxtHead[26]; // Add MODULE file or message...
        if (Auxx.DocType == 40) HeaderText = xtoa.TxtHead[27]; // Add ACTIVITY file or message...
        if (Auxx.DocType > 5) classBtn = "text-white rembtn";
        uploadResults = new();
        content = new();
        document = new();
        document.Author = loggeduser.FirstName + ' ' + loggeduser.LastName;
        NameIndex = 0;
        showClass = "d-block";
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e) // Sparar en eller flera filer på servern.
    {
        List<File> files = new();
        int maxAllowedFiles = 1; // Max 1 fil!
        long maxFileSize; // Maximal filstorlek.

        var auxiliary = await xClient.GetAsync<AuxiliaryDto>(1, "api/Auxiliary");
        if (auxiliary is not null) maxFileSize = auxiliary.MaxFileSize; else maxFileSize = 1000448;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var response = new ExistDto();

            do // Ökar filnamsindexet tills filnamnet är unikt.
            {
                NameIndex++;
                response = await xClient.ExistFile<ExistDto>(NameIndex + file.Name, "Filesave");
            } while (response is not null && response.IsFile);

            if (response is not null)
            {
                if (uploadResults.SingleOrDefault(f => f.FileName == file.Name) is null)
                {
                    try
                    {
                        files.Add(new() { Name = file.Name });
                        DocFileName = file.Name;

                        var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                        fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                        content.Add(content: fileContent, name: "\"files\"", fileName: NameIndex + file.Name);
                        Upload = true;

                        xnav.SetDone(xtoa.TxtDone[18]);
                        xnav.SetReset('d');
                    }
                    catch (Exception ex)
                    {
                        Logger.LogInformation("{file.Name} not selected (Err: 6): {ex.Message}", file.Name, ex.Message);

                        uploadResults.Add(
                            new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });

                        Upload = false;
                        xnav.SetError(file.Name + xtoa.TxtError[9] + ex.Message);
                        xnav.SetReset('e');
                    }
                }
            }
            else
            {
                Logger.LogInformation("{file.Name} error on upload (Err: 3).", file.Name);
                uploadResults.Add(
                    new()
                    {
                        FileName = file.Name,
                        ErrorCode = 3,
                        Uploaded = false
                    });

                Upload = false;
                xnav.SetError(xtoa.TxtError[10]);
                xnav.SetReset('e');
            }
        }
    }

    private async Task HandleSubmitDocument()
    {
        Logger.LogInformation("HandleSubmit called");

        if (Upload && classFile == "form-group m-md-3")
        {
            await UploadFile();

            var ldoc = new DocumentDto
            {
                NameIx = NameIndex,
                DocName = DocFileName,
                Description = document.Description,
                Author = document.Author,
                TimeStamp = DateTime.Now.ToString(),
                UserId = "",
                Id4Course = 0,
                ModuleId = 0,
                ActivityId = 0
            };

            if (Auxx.DocType == 1 || Auxx.DocType == 10) ldoc.UserId = Auxx.GuidId;
            if (Auxx.DocType == 2 || Auxx.DocType == 20) ldoc.Id4Course = Auxx.IntId;
            if (Auxx.DocType == 3 || Auxx.DocType == 30) ldoc.ModuleId = Auxx.IntId;
            if (Auxx.DocType == 4 || Auxx.DocType == 40)
            {
                if (loggeduser.Id is not null) Auxx.GuidId = loggeduser.Id;
                ldoc.UserId = Auxx.GuidId;
                ldoc.ActivityId = Auxx.IntId;
            }
            if (IsMan) ldoc.Id4Course = -1; // Kursid sätts till -1 vilket markerar särskiljning.

            await xClient.PostAsync<DocumentDto>(ldoc, "api/Document");
            xnav.SetDone(xtoa.TxtDone[19]);
            xnav.SetReset('d');
            Auxx.Flag = true;
            Close();
        }
        else
        {
            if (classFile == "form-group m-md-3")
            {
                xnav.SetError(xtoa.TxtError[14]);
                xnav.SetReset('e');
            }
        }

        if (classFile == "d-none")
        {
            var ldoc = new DocumentDto
            {
                NameIx = 0,
                DocName = "",
                Description = document.Description,
                Author = loggeduser.FirstName + ' ' + loggeduser.LastName,
                TimeStamp = DateTime.Now.ToString(),
                UserId = "",
                Id4Course = 0,
                ModuleId = 0,
                ActivityId = 0
            };

            if (Auxx.DocType == 10) ldoc.UserId = Auxx.GuidId;
            if (Auxx.DocType == 20) ldoc.Id4Course = Auxx.IntId;
            if (Auxx.DocType == 30) ldoc.ModuleId = Auxx.IntId;
            if (Auxx.DocType == 40)
            {
                if (loggeduser.Id is not null) Auxx.GuidId = loggeduser.Id;
                ldoc.UserId = Auxx.GuidId;
                ldoc.ActivityId = Auxx.IntId;
            }
            if (IsMan) ldoc.Id4Course = -1; // Kursid sätts till -1 vilket markerar särskiljning.

            await xClient.PostAsync<DocumentDto>(ldoc, "api/Document");
            xnav.SetDone(xtoa.TxtDone[20]);
            xnav.SetReset('d');
            Auxx.Flag = true;
            Close();
        }
    }

    private async Task UploadFile()
    {
        var response = await xClient.PostFile(content); // Postoperationen!

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
            };

            using var responseStream = await response.Content.ReadAsStreamAsync();

            var newUploadResults = await JsonSerializer
                .DeserializeAsync<IList<UploadResult>>(responseStream, options);

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
            }
        }
    }

    private void ToggleFileMess()
    {
        if (classFile == "form-group m-md-3")
        {
            classFile = "d-none";
            HeaderText = xtoa.TxtText[27];
        }
        else
        {
            classFile = "form-group m-md-3";
            HeaderText = xtoa.TxtText[28];
        }
    }
}