@inject IXDtoClient xClient
@inject XLangToast xtoa
@inject XNavMenu xnav
@inject XPagination xpag
@attribute [Authorize]
@*Toast component by Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<AuthorizeView Roles ="Teacher">
    <Authorized>
        <div class="toast-container p-3 @showClass"
             style="position: fixed; top: auto; top: @(xnav.Pos_V)px; margin-left: @(xnav.Pos_H)px; z-index: 5" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show bg-white" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header" @onmouseup=" _ => xnav.Mouse('U', _)" @onmousedown=" _ => xnav.Mouse('D', _)"
                     @onmousemove=" _ => xnav.Mouse('M', _)" @onmouseout=" _ => xnav.Mouse('M', _)">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="toast-body">
                    <EditForm Model="@xClient" Context="paginationlmslexnet" OnSubmit="HandleSubmitPagination">
                        <div class="form-group m-md-3">
                            <InputCheckbox id="switch" class="control-label checkbox" type="checkbox" @bind-Value="PagOn" />
                            <label class="control-label toggle" for="switch"></label>
                            @if (PagOn)
                            {
                                <span style="position: relative; top: -3px"> Pagination ON</span>
                            }
                            else
                            {
                                <span style="position: relative; top: -3px"> Pagination OFF</span>
                            }
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            <InputCheckbox id="autoswitch" class="control-label checkbox" type="checkbox" @bind-Value="PagAuto" />
                            <label class="control-label toggle" for="autoswitch"></label>
                            @if (PagAuto)
                            {
                                <span style="position: relative; top: -3px"> Auto ON</span>
                            }
                            else
                            {
                                <span style="position: relative; top: -3px"> Auto OFF</span>
                            }
                        </div>
                        <div class="form-group row">
                            <span class="col-6">
                                <label for="Rows">@xtoa.TxtText[25]</label>
                                <InputNumber id="Rows" class="form-control" @bind-Value="PagRows" Min="1"
                                    title=@xtoa.TxtTitle[17] placeholder="Enter rows" />
                            </span>
                            <span class="col-6">
                                <label for="Red">@xtoa.TxtText[26]</label>
                                <InputNumber id="Red" class="form-control" @bind-Value="PagRed" Min="1"
                                    title=@xtoa.TxtTitle[18] placeholder="Enter reducing nr" />
                            </span>
                        </div><br />
                        <div>
                            <button type="submit" class="text-white rembtn" style="margin-right: 15px">@xtoa.TxtButton[7]</button> @* Save settings *@
                            <button type="button" class="text-white remnot" @onclick="Close">@xtoa.TxtButton[0]</button> @* NO *@
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";

    private bool PagOn;

    private bool PagAuto;

    private int PagRows;

    private int PagRed;

    public async Task Show()
    {
        xnav.SetReset('a');

        var dim = await xClient.GetWindow(); // Hämtar aktuell skärmstorlek.
        xnav.Pos_H = (int)Math.Round(dim.Width * 0.08); // 08%
        xnav.Pos_V = (int)Math.Round(dim.Height * 0.2); // 20%

        PagOn = xpag.PagOn;
        PagAuto = xpag.PagAuto;
        PagRows = xpag.PagRows;
        PagRed = xpag.PagRed;
        HeaderText = xtoa.TxtHead[16];
        showClass = "d-block";
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task HandleSubmitPagination()
    {
        try
        {
            xpag.PagOn = PagOn;
            xpag.PagAuto = PagAuto;
            xpag.PagRows = PagRows;
            xpag.PagRed = PagRed;
            await xClient.SetStorage<string>($"Pag{xpag.PagId}On", PagOn.ToString());
            await xClient.SetStorage<string>($"Pag{xpag.PagId}Auto", PagAuto.ToString());
            await xClient.SetStorage<string>($"Pag{xpag.PagId}Rows", PagRows.ToString());
            await xClient.SetStorage<string>($"Pag{xpag.PagId}Red", PagRed.ToString());
            Auxx.Flag = true;
        }
        catch
        {
            xnav.SetError(xtoa.TxtError[20]);
            xnav.SetReset('e');
        }
        Close(); // En omnavigering här nollställer alla variabler inklusive statiska.
    }
}