@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XLangToast xtoa
@inject XNavMenu xnav
@attribute [Authorize]
@*Toast component by Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<AuthorizeView Roles ="Teacher">
    <Authorized>
        <div class="toast-container p-3 @showClass"
            style="position: fixed; top: auto; top: @(xnav.Pos_V)px; margin-left: @(xnav.Pos_H)px; z-index: 5" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show bg-white" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header" @onmouseup=" _ => xnav.Mouse(0, 'U', _)" @onmousedown=" _ => xnav.Mouse(Win_Height, 'D', _)"
                     @onmousemove=" _ => xnav.Mouse(Win_Height, 'M', _)" @onmouseout=" _ => xnav.Mouse(Win_Height, 'M', _)">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="toast-body">
                    <button type="button" class="text-white remyes" @onclick="DeleteNow" title=@xtoa.TxtTitle[8]>@xtoa.TxtButton[2]</button> @* DELETE NOW *@
                    <button type="button" class="text-white remnot" @onclick="Close">@xtoa.TxtButton[0]</button> @* NO *@
                    <button type="button" class="text-white remnot" @onclick="Redirect" title=@xtoa.TxtTitle[10]>@xtoa.TxtButton[11]</button> @* To student *@
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";

    private int Win_Height;

    private List<DocumentDto> documents = new();

    private List<ThumbDto> thumbs = new();

    private List<AppUserDto> users = new();

    public async Task Show()
    {
        xnav.SetReset('a');

        var dim = await xClient.GetWindow(); // Hämtar aktuell skärmstorlek.
        Win_Height = dim.Height;
        xnav.Pos_H = (int)Math.Round(dim.Width * 0.08); // 08%
        xnav.Pos_V = (int)Math.Round(Win_Height * 0.2); // 20%
        HeaderText = xtoa.TxtHead[7];
        showClass = "d-block";
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task DeleteNow()
    {
        bool FindDoc = false;
        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        var thumb = await xClient.GetAsync<IEnumerable<ThumbDto>>("api/Thumb");
        var appuser = await appuserClient.GetAsync();

        if (document is not null) documents = document.ToList();
        if (thumb is not null) thumbs = thumb.ToList();
        if (appuser is not null) users = appuser.ToList();

        foreach (var use in users)
        {
            if (use.Id == Auxx.GuidId)
            {
                foreach (var doc in documents)
                {
                    if (doc.UserId == use.Id) FindDoc = true;
                }
            }
        }

        if (!FindDoc) // Alla tumma upp/ned tas bort.
        {
            foreach (var thu in thumbs)
            {
                if (thu.Id4User == Auxx.GuidId) await xClient.RemAsync(thu.Id, "api/Thumb");
            }
        }

        if (!FindDoc)
        {
            xnav.SetDone(xtoa.TxtDone[14]);
            xnav.SetReset('d');
            await appuserClient.RemAsync(Auxx.GuidId);
            Auxx.Flag = true;
        }
        else
        {
            xnav.SetError(xtoa.TxtError[8]);
            xnav.SetReset('e');
        }
        Close();
    }

    private async Task Redirect()
    {
        xnav.SetDone(xtoa.TxtDone[15]);
        xnav.SetReset('d');

        await appuserClient.PreAsync(Auxx.GuidId, 11);
        Auxx.Flag = true;
        Close();
    }
}