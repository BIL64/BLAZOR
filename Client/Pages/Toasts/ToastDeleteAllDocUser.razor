@inject IXDtoClient xClient
@inject XLangToast xtoa
@inject XNavMenu xnav
@attribute [Authorize]
@*Toast component by Björn Lindqvist*@
@*Både studenter och lärare har åtkomst hit*@

<AuthorizeView Roles ="Student, Teacher">
    <Authorized>
        <div class="toast-container p-3 @showClass"
             style="position: fixed; top: auto; top: @(xnav.Pos_V)px; margin-left: @(xnav.Pos_H)px; z-index: 5" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show bg-white" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header" @onmouseup=" _ => xnav.Mouse(0, 'U', _)" @onmousedown=" _ => xnav.Mouse(Win_Height, 'D', _)"
                    @onmousemove=" _ => xnav.Mouse(Win_Height, 'M', _)" @onmouseout=" _ => xnav.Mouse(Win_Height, 'M', _)">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>
                <div class="toast-body">
                    <button type="button" class="text-white remnot" @onclick="Proceed">@xtoa.TxtButton[5]</button> @* YES *@
                    <button type="button" class="text-white remnot" @onclick="Close">@xtoa.TxtButton[0]</button> @* NO *@
                </div>
                <div class="@classProceed">
                    <EditForm Model="@xClient" Context="deletealllmslexnet" OnSubmit="HandleSubmitDeleteAll">
                        <div class="form-group m-3">
                            <label for="Email">@xtoa.TxtText[9]</label>
                            <InputText id="Email" class="form-control" @bind-Value="Email" title=@xtoa.TxtTitle[7] />
                        </div>
                        <div class="form-group m-3">
                            <button type="submit" class="text-white remyes" title=@xtoa.TxtTitle[4]>@xtoa.TxtButton[2]</button> @* DELETE NOW *@
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";

    private int Win_Height;

    public string classProceed = "d-none";
    public string Email = string.Empty;

    public async Task Show()
    {
        xnav.SetReset('a');

        var dim = await xClient.GetWindow(); // Hämtar aktuell skärmstorlek.
        Win_Height = dim.Height;
        xnav.Pos_H = (int)Math.Round(dim.Width * 0.08); // 08%
        xnav.Pos_V = (int)Math.Round(Win_Height * 0.2); // 20%
        HeaderText = xtoa.TxtHead[3];
        classProceed = "d-none";
        showClass = "d-block";
        StateHasChanged();
    }

    private void Proceed()
    {
        classProceed = "d-block";
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task HandleSubmitDeleteAll()
    {
        bool FindDoc = false;

        if (Auxx.Loggeduser.Email == Email)
        {
            var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");

            if (document is not null)
            {
                foreach (var doc in document)
                {
                    if (doc.UserId == Auxx.Loggeduser.Id && doc.Id4Course != -2 && doc.ActivityId == 0)
                    {
                        await xClient.RemAsync(doc.Id, "api/Document");
                        await xClient.DeleteFile(doc.NameIx.ToString() + doc.DocName);
                        FindDoc = true;
                    }
                }
            }

            if (FindDoc)
            {
                HeaderText = string.Empty;
                showClass = "d-none";
                StateHasChanged();
                xnav.SetDone(xtoa.TxtDone[5]);
                xnav.SetReset('d');
                Auxx.Flag = true;
            }
            else
            {
                xnav.SetDone(xtoa.TxtDone[4]);
                xnav.SetReset('d');
            }

        }
        else
        {
            xnav.SetError(xtoa.TxtError[6]);
            xnav.SetReset('e');
        }
    }
}