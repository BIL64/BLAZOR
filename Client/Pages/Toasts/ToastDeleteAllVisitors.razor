@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XLangToast xtoa
@inject XNavMenu xnav
@attribute [Authorize]
@*Toast component by Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<AuthorizeView Roles ="Teacher">
    <Authorized>
        <div class="toast-container p-3 @showClass"
             style="position: fixed; top: auto; top: @(xnav.Pos_V)px; margin-left: @(xnav.Pos_H)px; z-index: 5" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show bg-white" role="alert" aria-live="assertive" aria-atomic="true" style="width: 250px">
                <div class="toast-header" @onmouseup=" _ => xnav.Mouse('U', _)" @onmousedown=" _ => xnav.Mouse('D', _)"
                     @onmousemove=" _ => xnav.Mouse('M', _)" @onmouseout=" _ => xnav.Mouse('M', _)">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="toast-body">
                    <button type="button" class="text-white remyes" @onclick="DeleteNow" title=@xtoa.TxtTitle[5]>@xtoa.TxtButton[2]</button> @* DELETE NOW *@
                    <button type="button" class="text-white remnot" @onclick="Close">@xtoa.TxtButton[0]</button> @* NO *@
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";

    public async Task Show()
    {
        xnav.SetReset('a');

        var dim = await xClient.GetWindow(); // Hämtar aktuell skärmstorlek.
        xnav.Pos_H = (int)Math.Round(dim.Width * 0.08); // 08%
        xnav.Pos_V = (int)Math.Round(dim.Height * 0.2); // 20%
        HeaderText = xtoa.TxtHead[5];
        showClass = "d-block";
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task DeleteNow()
    {
        xnav.SetDone(xtoa.TxtDone[6]);
        xnav.SetReset('d');

        var appuser = await appuserClient.GetAsync();

        if (appuser is not null)
        {
            HeaderText = xtoa.TxtError[29];

            foreach (var item in appuser)
            {
                if (item.UserRole == 0 && item.Id is not null) await appuserClient.RemAsync(item.Id);
            }
        }
        HeaderText = string.Empty;
        Close();
    }
}