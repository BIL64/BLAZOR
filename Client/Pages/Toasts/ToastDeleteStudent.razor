@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XLangToast xtoa
@inject XNavMenu xnav
@attribute [Authorize]
@*Toast component by Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<AuthorizeView Roles ="Teacher">
    <Authorized>
        <div class="toast-container p-3 @showClass"
            style="position: fixed; top: auto; top: @(xnav.Pos_V)px; margin-left: @(xnav.Pos_H)px; z-index: 5" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show bg-white" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header" @onmouseup=" _ => xnav.Mouse('U', _)" @onmousedown=" _ => xnav.Mouse('D', _)"
                     @onmousemove=" _ => xnav.Mouse('M', _)" @onmouseout=" _ => xnav.Mouse('M', _)">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="toast-body">
                    <button type="button" class=@preRemove @onclick="PreDelete" title=@xtoa.TxtTitle[8]>@xtoa.TxtButton[2]</button> @* DELETE NOW *@
                    <button type="button" class=@irrRemove @onclick="DeleteNow" title=@xtoa.TxtTitle[8]>@xtoa.TxtButton[16]</button> @* PRESS TWICE *@
                    <button type="button" class="text-white remnot" @onclick="Close">@xtoa.TxtButton[0]</button> @* NO *@
                    <button type="button" class="text-white remnot" @onclick="Redirect" title=@xtoa.TxtTitle[9]>@xtoa.TxtButton[10]</button> @* To teacher *@
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";
    private string preRemove = "text-white remyes";
    private string irrRemove = "d-none";

    private List<DocumentDto> documents = new();

    private List<ThumbDto> thumbs = new();

    private List<ForumDto> forums = new();

    private List<AppUserDto> users = new();

    public async Task Show()
    {
        xnav.SetReset('a');

        var dim = await xClient.GetWindow(); // Hämtar aktuell skärmstorlek.
        xnav.Pos_H = (int)Math.Round(dim.Width * 0.08); // 08%
        xnav.Pos_V = (int)Math.Round(dim.Height * 0.2); // 20%
        HeaderText = xtoa.TxtHead[7];
        showClass = "d-block";
        preRemove = "text-white remyes";
        irrRemove = "d-none";
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private void PreDelete()
    {
        irrRemove = "text-white remyes";
        preRemove = "d-none";
    }

    private async Task DeleteNow()
    {
        bool FindDoc = false;
        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        var thumb = await xClient.GetAsync<IEnumerable<ThumbDto>>("api/Thumb");
        var appuser = await appuserClient.GetAsync();

        if (document is not null) documents = document.ToList();
        if (thumb is not null) thumbs = thumb.ToList();
        if (appuser is not null) users = appuser.ToList();

        foreach (var use in users)
        {
            if (use.Id == Auxx.GuidId)
            {
                foreach (var doc in documents)
                {
                    if (doc.UserId == use.Id) FindDoc = true;
                }
            }
        }

        if (!FindDoc) // Alla tumma upp/ned tas bort.
        {
            foreach (var thu in thumbs)
            {
                if (thu.Id4User == Auxx.GuidId) await xClient.RemAsync(thu.Id, "api/Thumb");
            }
        }

        if (!FindDoc) // Söker och eliminerar studentens alla ev skapade trådar.
        {
            bool IsPthread;
            do
            {
                IsPthread = false;
                string Tname = "";

                var forum1 = await xClient.GetAsync<IEnumerable<ForumDto>>("api/Forum");
                if (forum1 is not null) forums = forum1.ToList();

                foreach (var fum1 in forums)
                {
                    if (fum1.Id4User == Auxx.GuidId && fum1.Select == 0)
                    {
                        Tname = fum1.ThreadName;
                        IsPthread = true;
                    }
                }

                if (IsPthread) // En funnen tråd elimineras.
                {
                    foreach (var fum2 in forums)
                    {
                        if (fum2.ThreadName == Tname)
                            await xClient.RemAsync(fum2.Id, "api/Forum");
                    }
                }
            } while (IsPthread);
        }


        if (!FindDoc) // Tar bort alla övriga inlägg.
        {
            var forum2 = await xClient.GetAsync<IEnumerable<ForumDto>>("api/Forum");
            if (forum2 is not null) forums = forum2.ToList();

            foreach (var fum3 in forums)
            {
                if (fum3.Id4User == Auxx.GuidId)
                    await xClient.RemAsync(fum3.Id, "api/Forum");
            }
        }

        if (!FindDoc)
        {
            xnav.SetDone(xtoa.TxtDone[9]);
            xnav.SetReset('d');
            await appuserClient.RemAsync(Auxx.GuidId);
            Auxx.Flag = true;
        }
        else
        {
            xnav.SetError(xtoa.TxtError[7]);
            xnav.SetReset('e');
        }
        Close();
    }

    private async Task Redirect()
    {
        xnav.SetDone(xtoa.TxtDone[10]);
        xnav.SetReset('d');

        await appuserClient.PreAsync(Auxx.GuidId, 12);
        Auxx.Flag = true;
        Close();
    }
}