@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XLangToast xtoa
@inject XNavMenu xnav
@attribute [Authorize]
@*Toast component by Björn Lindqvist*@
@*Både studenter och lärare har åtkomst hit*@

<AuthorizeView Roles ="Student, Teacher">
    <Authorized>
        <div class="toast-container p-3 @showClass"
             style="position: fixed; top: auto; top: @(xnav.Pos_V)px; margin-left: @(xnav.Pos_H)px; z-index: 5" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show bg-white" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header" @onmouseup=" _ => xnav.Mouse('U', _)" @onmousedown=" _ => xnav.Mouse('D', _)"
                     @onmousemove=" _ => xnav.Mouse('M', _)" @onmouseout=" _ => xnav.Mouse('M', _)">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="toast-body">
                    <EditForm Model="xClient" Context="editthreadstudlmslexnet" OnSubmit="HandleSubmitAE">
                        <div class="form-group m-3">
                            <InputTextArea class="form-control" @bind-Value="Posttext" />
                        </div>
                        <div class="form-group m-3">
                            <label for="Auxpost">@xtoa.TxtText[57]</label> @* Header... *@
                            <InputText id="Auxpost" class="form-control" @bind-Value="Auxtext" />
                        </div>
                         <InputRadioGroup Name="EditRadio" @bind-Value="EditSelect">
                            <div class="form-group m-1">
                                <InputRadio id="Select0" class="form-check-inline" Value="0" />
                                <label for="Select0">@xtoa.TxtText[58]</label> @* Just edit the text *@
                            </div>
                            <div class="form-group m-1">
                                <InputRadio id="Select1" class="form-check-inline" Value="1" />
                                <label for="Select1" style="color: red">@xtoa.TxtText[61]</label> @* Permit to delete post from the data base *@
                            </div>
                        </InputRadioGroup>
                        <div class="form-group m-3">
                            @if (EditSelect == 0)
                            {
                                <button type="submit" class="text-white rembtn"
                                title=@xtoa.TxtTitle[25] style="margin-right: 15px">@xtoa.TxtButton[6]</button> @* Save *@
                            }
                            @if (EditSelect == 1)
                            {
                                <button type="button" class="text-white remyes"
                                title=@xtoa.TxtTitle[26] style="margin-right: 15px" @onclick="DeletePost">@xtoa.TxtButton[1]</button> @* DELETE *@
                            }
                            <button type="button" class="text-white remnot" @onclick="Close">@xtoa.TxtButton[0]</button> @* NO *@
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";
    private string Posttext = string.Empty;
    private string Posttemptext = string.Empty;
    private string Auxtext = string.Empty;
    private string Auxtemptext = string.Empty;
    private int EditSelect; // Måste vara int!

    public async Task Show()
    {
        xnav.SetReset('a');

        var dim = await xClient.GetWindow(); // Hämtar aktuell skärmstorlek.
        xnav.Pos_H = (int)Math.Round(dim.Width * 0.08); // 08%
        xnav.Pos_V = (int)Math.Round(dim.Height * 0.2); // 20%

        EditSelect = 0;

        var forum = await xClient.GetAsync<IEnumerable<ForumDto>>("api/Forum");

        if (forum is not null)
        {
            foreach (var fum in forum)
            {
                if (fum.Id == Auxx.IntId)
                {
                    Posttext = fum.Text;
                    Posttemptext = Posttext;
                    Auxtext = fum.AuxHead;
                    Auxtemptext = Auxtext;
                }
            }
        }
        HeaderText = xtoa.TxtHead[37];
        showClass = "d-block";
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task HandleSubmitAE()
    {
        bool IsEdit = false;

        if (Auxtext != Auxtemptext) IsEdit = true;

        if (Posttext != Posttemptext || IsEdit) // Om texten eller rubriken har ändrats så måste posten redigeras.
        {
            IsEdit = true;
            int editnr;

            var forum = await xClient.GetAsync<IEnumerable<ForumDto>>("api/Forum");
            var appuser = await appuserClient.GetAsync();

            if (forum is not null)
            {
                foreach (var fum in forum)
                {
                    if (fum.Id == Auxx.IntId)
                    {
                        editnr = fum.Edited;
                        editnr++; // Öka med ett.

                        if (appuser is not null)
                        {
                            foreach (var use in appuser)
                            {
                                if (use.Id == fum.Id4User)
                                {
                                    await xClient.PutAsync<ForumDto>(fum.Id, GetEditPost(fum.Id, fum.ThreadName, fum.Date, Posttext, Auxtext,
                                        use.Id, editnr, fum.Pmail, fum.IsMan, fum.Select, fum.Id4Course), "api/Forum");
                                }
                            }
                        }
                    }
                }
            }
            xnav.SetDone(xtoa.TxtDone[40]);
            xnav.SetReset('d');
            Auxx.Flag = true;
        }

        if (!IsEdit)
        {
            xnav.SetDone(xtoa.TxtDone[41]);
            xnav.SetReset('d');
        }

        Close();
    }

    private async Task DeletePost()
    {
        bool IsFind = false;

        var forum = await xClient.GetAsync<IEnumerable<ForumDto>>("api/Forum");

        if (forum is not null)
        {
            foreach (var fum in forum)
            {
                // Raderar posten för den specifika användaren från databasen.
                if (fum.Id == Auxx.IntId && fum.Id4User == Auxx.GuidId)
                {
                    await xClient.RemAsync(fum.Id, "api/Forum");
                    IsFind = true;
                }
            }
            xnav.SetDone(xtoa.TxtDone[46]);
            xnav.SetReset('d');
            Auxx.Flag = true;
        }

        if (!IsFind)
        {
            xnav.SetError(xtoa.TxtError[29]);
            xnav.SetReset('e');
        }

        Close();
    }

    private ForumDto GetEditPost(int id, string tname, DateTime date, string text, string aux, string? userid,
        int edit, string pmail, bool isman, byte select, int cid) // Nytt postobjekt.
    {
        var dto = new ForumDto
        {
            Id = id,
            ThreadName = tname,
            Date = date,
            Text = text,
            AuxHead = aux,
            Id4User = userid,
            Edited = edit,
            Pmail = pmail,
            IsMan = isman,
            Select = select,
            Id4Course = cid
        };
        return dto;
    }
}