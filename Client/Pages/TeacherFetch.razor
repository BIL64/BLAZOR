@page "/teacherfetch"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager Navigation
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Teacher fetch</PageTitle>

<AuthorizeView Roles="Teacher">
    <Authorized>
        <h4>@TeacherName</h4>
        <br />
        <p>Plats för dokument...</p>

        @if (courses == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var data in courses)
            {
                <section class="coursebox" @onclick=" _ => RedirectToCourse(data.Id)">@data.Id.&nbsp; <em title="@data.Description">@data.Name &nbsp;</em>
                    <b style="margin-left: auto">@StartEndDate(data.StartDate, data.EndDate);</b></section>
            }
        }
    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private List<CourseDto> courses = new List<CourseDto>();

    [Inject]
    private IXDtoClient xClient { get; set; } = default!;

    [Inject]
    private IAppUserDtoClient appuserClient { get; set; } = default!;

    private AppUserDto loggeduser = new AppUserDto(); // Info om den som för tillfället är inloggad.

    private string TeacherName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        var name = user.Identity?.Name!; // Email för den som för tillfället är inloggad.

        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");
        var appuser = await appuserClient.GetAsync();

        if (course is not null)
        {
            courses = course.ToList();
        }

        if (appuser is not null && name is not null)
        {
            foreach (var item in appuser) // Hämtar den som för tillfället är inloggad.
            {
                if (item.Email == name) loggeduser = item;
            }
        }

        TeacherName = $"Hello, {loggeduser.FirstName} {loggeduser.LastName}!";
    }

    private string StartEndDate(DateTime start, DateTime end) // Returnerar datumsträng.
    {
        return $"{start.ToString().Substring(0, 10)} | {end.ToString().Substring(0, 10)}";
    }

    private void RedirectToCourse(int id)
    {
        Navigation.NavigateTo($"/coursedetails/{id}", true);
    }
}