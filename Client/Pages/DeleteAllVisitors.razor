@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Sukhrob Ilyosbekov - Stack Overflow*@
@*Endast lärare har åtkomst hit*@

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<AuthorizeView Roles ="Teacher">
    <Authorized>
    <div class="toast-container p-3 position-relative @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body">
            @BodyText
            <button type="button" class="text-white remyes" @onclick="DeleteNow" title="Remove all visitors from the system">DELETE NOW</button>
            <button type="button" class="text-white remnot" @onclick="Close">NO</button>
            <button type="button" class="text-white rembtn" @onclick="RegOnOff" title="Set register for visitors ON/OFF">REG ON/OFF</button>
        </div>
    </div>
</div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? BodyText { get; set; }

    public void Show(string bodyText, string headerText = "Remove all visitors or set register on/off")
    {
        xnav.SetReset('a');

        HeaderText = headerText;
        BodyText = bodyText;
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        BodyText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    private async Task DeleteNow()
    {
        xnav.SetDone("xnavdone", "All unregistered visitors were deleted.");
        xnav.SetReset('d');

        var appuser = await appuserClient.GetAsync();

        if (appuser is not null)
        {
            HeaderText = "Working...";

            foreach (var item in appuser)
            {
                if (item.UserRole == 0 && item.Id is not null) await appuserClient.RemAsync(item.Id);
            }
        }
        HeaderText = string.Empty;
        Close();
    }

    private async Task RegOnOff()
    {
        bool failure = false;

        try
        {
            var regist = await xClient.GetAsync<RegisterDto>(1, "api/Register");
            if (regist is not null && regist.RegClass == "d-none") xnav.classReg = "d-block";
            if (regist is not null && regist.RegClass == "d-block") xnav.classReg = "d-none";
        }
        catch
        {
            xnav.SetError("xnaverror", "The register value in DB is not reachable.");
            xnav.SetReset('e');
            failure = true;
        }

        if (!failure && xnav.classReg == "d-block")
        {
            var lreg = new RegisterDto
            {
                Id = 1,
                RegClass = "d-block"
            };
            await xClient.PutAsync<RegisterDto>(1, lreg, "api/Register");

            xnav.SetDone("xnavdone", "Register for visitors is activated.");
            xnav.SetReset('d');
            xnav.SetReg(true);
        }

        if (!failure && xnav.classReg == "d-none")
        {
            var lreg = new RegisterDto
                {
                    Id = 1,
                    RegClass = "d-none"
                };
            await xClient.PutAsync<RegisterDto>(1, lreg, "api/Register");

            xnav.SetDone("xnavdone", "Register for visitors is disable.");
            xnav.SetReset('d');
            xnav.SetReg(false);
        }

        if (!failure && xnav.classReg != "d-block" && xnav.classReg != "d-none")
        {
            xnav.SetError("xnaverror", "The register value in DB is corrupted. Id = 1 and RegClass = ”d-block” or RegClass = ”d-none”");
            xnav.SetReset('e');
        }

        Close();
    }
}