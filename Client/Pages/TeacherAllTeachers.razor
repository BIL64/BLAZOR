@page "/teacherallteachers"
@using System.Diagnostics;
@inject NavigationManager Navigation
@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Teacher all teachers</PageTitle>

<AuthorizeView Roles="Teacher">
    <Authorized>
<h4 class="@Emptydbcolor">@Emptydb</h4>

@if (teachers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Context="searchlmslexnet" Model="@teachers" OnSubmit="OnInitializedAsync">
        <span class="nav m-lg-auto input-group">
            <InputText class="form-control" @bind-Value="searchString" placeholder="First or last name" />
            <span class="nav m-lg-auto input-group-append">
                <button type="submit" class="btn m-lg-auto btn-outline-dark">Search</button>
            </span>
            <span class="nav m-lg-auto input-group-append">
                <button type="button" @onclick="SortName" class="btn m-lg-auto btn-outline-dark">Sort names</button>
            </span>
            <span class="nav m-lg-auto input-group-append">
                <button type="button" @onclick="PagControl" class="btn m-lg-auto btn-outline-dark" title="Pagination settings">P</button>
            </span>
        </span>
    </EditForm>

    <Pagination @ref="paginationRef" /> @*Pagineringsfönster*@
    <DeleteMess @ref="messRef" /> @*Delete-fönster*@
    <DocumentAdd @ref="docsaveRef" /> @*Filsparfönster*@
    <DocumentEdit @ref="doceditRef" /> @*Filredigeringsfönster*@

    <table class="table">
        <thead>
            <tr>
                <th>Teacher</th>
                <th>Email</th>
                <th>Phone number</th>
                <th>Course</th>
            </tr>
        </thead>
        <tbody @onmouseover="DeleteRefresh">
            @foreach (var data in teachers)
            {
                if (PagProceed()) // Paginering.
                {
                    <tr style="color: darkred">
                        @{classAvatar = "";}
                        @foreach (var doc in documents)
                        {
                            if (doc.UserId == data.Id && doc.Id4Course == -2) classAvatar = "avatar";
                        }
                        <td class="@classAvatar" @onmouseover=" _ => ShowAvatar(data.Id)">@data.FirstName @data.LastName</td>
                        <td>@data.Email</td>
                        <td>@data.PhoneNumber</td>
                        <td>
                            @foreach (var item in courses) // Hämtar kursen för användaren.
                            {
                                if (item.Id == data.CourseId)
                                {
                                    IsCourse = true;
                                    <span>@item.Name</span>
                                }
                            }
                            @if (!IsCourse)
                            {
                                <span>No course yet...</span>
                            }
                            @{IsCourse = false;}
                        </td>
                        <td class="noline">
                        @if (data.Id is not null)
                        {
                            // Laddar upp ett privat dokument till en särskild lärare.
                            <button type="button" class="text-white coursebtn" @onclick=" _ => LoadFile(data.Id, 10, data.FirstName + ' ' + data.LastName)"
                            title="Add document to teacher">+Doc</button> // CSS!
                            <div class="dropdoc">
                                <button type="button" class="@DocClass">Docs</button>
                                <div class="dropdoc-content">
                                    @foreach (var doc in documents)
                                    {
                                        if (doc.UserId == data.Id && doc.Id4Course != -2 && doc.ActivityId == 0)
                                        {
                                            if (doc.DocName != "")
                                            {
                                                <a @onclick="_ => DocEditControl(doc.Id, 1)"
                                                title="File: @doc.Description by @doc.Author @doc.TimeStamp">@doc.DocName</a> // Öppnar filen (dokumentet).
                                            }
                                            else
                                            {
                                                <a @onmouseover="_ => ShowMessControl(doc.Description, doc.Author, doc.TimeStamp)" @onclick="_ => DeleteMess(doc.Id)"
                                                title="Mess: @doc.Description by @doc.Author @doc.TimeStamp">From @doc.Author</a> // Visar meddelandet.
                                            }
                                        }
                                    }
                                </div>
                            </div>

                            <button type="button" class="text-white coursebtn" @onclick="OpenCloseCourse"
                            title="Add/change course for student">Course</button> // CSS!
                            <div class="dropuse">
                                <button type="button" class="@CourseClass">+</button>
                                <div class="dropuse-content">
                                    @foreach (var item in courses)
                                    {
                                        <a @onclick="_ => GetCourse(data.Id, item.Id)">@item.Name</a> // Lägger in en ny kurs för användaren.
                                    }
                                </div>
                            </div>

                            <button type="button" class="oi oi-circle-x text-white delbtn"
                            @onclick=" _ => DeleteUser(data.Id)" title="Delete or redirect user"></button> // CSS!
                        }
                        </td>
                    </tr>
                }
                Auxx.PagCount++;
            }
        </tbody>
    </table>

    if (Auxx.PagOn) // PAGINERING.
    {
        var Pnum = new List<int>(); Auxx.PagCount = 0; // Skapar en lista för att kunna välja en sida.
        for (int i = 1; i <= (int)Math.Ceiling((decimal)this.teachers.Count / Auxx.PagRows); i++) Pnum.Add(i); // Antal sidor beräknas.

        if ((Auxx.PagOn && !Auxx.PagAuto) || (Auxx.PagOn && Auxx.PagAuto && @teachers.Count > Auxx.PagRows)) // Villkor som styrs av den automatiska pagineringen.
        {
            <section class="@Auxx.classPag"> @*Grafiken för paginering*@
                <div style="margin: 0 auto 0 auto">
                    <span><button class="oi oi-caret-left btn btn-dark px-2 mx-2" @onclick=" _ => PagBtnSet(Auxx.PagPage - 1, 0)"></button></span> @*<<Sidoknapp*@
                    @foreach (var n in Pnum) // Radar upp sidnummerknappar och markerar numret man klickar på.
                    {
                        if (n == Auxx.PagPage) // Markering av sidnummer.
                        {
                            <span><button type="button" class="pagbtnact" @onclick=" _ => PagBtnSet(n, 0)">@n</button></span>
                        }
                        else
                        if (n % Auxx.PagRed == 0) // Övriga sidor med eller utan reduktion.
                        {
                            <span><button type="button" class="pagbtn" @onclick=" _ => PagBtnSet(n, 0)">@n</button></span>
                        }
                        if (Auxx.PagRed > 1) // Mellanslag vid reduktion.
                        {
                            <span>&nbsp;</span>
                        }
                    }
                    <span><button class="oi oi-caret-right btn btn-dark px-2 mx-2" @onclick=" _ => PagBtnSet(Auxx.PagPage + 1, Pnum.Count)"></button></span> @*>>Sidoknapp*@
                    <span class="pagfind">&lsaquo;@teachers.Count&rsaquo;</span> @*Antal hittade*@
                </div>
            </section>
        }
        else
        {
            <aside class="@Auxx.classPag"> @*Antal hittade*@
                <div class="pagfind">&lsaquo;@teachers.Count&rsaquo;</div>
            </aside>
        }
        Auxx.classPag = "d-flex"; // Förhindrar att sidoknapparna syns vid reloading.
    }
    else
    {
        <footer class="d-flex"> @*Antal hittade*@
            <div class="pagfind">&lsaquo;@teachers.Count&rsaquo;</div>
        </footer>
    }
}

    <DeleteTeacher @ref="deleteRef" /> @*Delete-fönster*@

</Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private Pagination? paginationRef; // Pagineringsfönster.

    private DeleteMess? messRef; // Delete-fönster.

    private DeleteTeacher? deleteRef; // Delete-fönster.

    private void PagControl() // Pagineringsfönster.
    {
        Auxx.PagId = 2; // <-- samma identitetsvärde!
        paginationRef!.Show();
    }

    private async Task LoadPag()  // Pagineringsinställningar.
    {
        try // Alla variabler till pagineringen är statiska.
        {
            Auxx.PagOn = bool.Parse(await xClient.GetStorage<string>("Pag2On")); // <-- samma identitetsvärde!
            Auxx.PagAuto = bool.Parse(await xClient.GetStorage<string>("Pag2Auto")); // <-- samma identitetsvärde!
            Auxx.PagRows = int.Parse(await xClient.GetStorage<string>("Pag2Rows")); // <-- samma identitetsvärde!
            Auxx.PagRed = int.Parse(await xClient.GetStorage<string>("Pag2Red")); // <-- samma identitetsvärde!
            Auxx.PagCount = 0;
            Auxx.PagPage = 1;
            Auxx.classPag = "d-flex";
        }
        catch
        {
            xnav.SetError("xnaverror", "An error occurred while trying to open local storage.");
            xnav.SetReset('e');
            base.StateHasChanged();
            await Task.Delay(3000);
            Auxx.PagOn = false;
            Auxx.PagAuto = true;
            Auxx.PagCount = 0;
            Auxx.PagRows = 10; // Noll ger "division by zero"
            Auxx.PagRed = 1; // Noll ger "division by zero"
            Auxx.PagPage = 1;
            Auxx.classPag = "d-flex";
        }
    }

    private void DeleteMess(int id) // Delete-fönster.
    {
        Auxx.IntId = id;
        messRef!.Show();
    }

    private async Task DeleteUser(string id) // Delete-fönster.
    {
        Auxx.GuidId = id;
        await deleteRef!.Show();
    }

    private async Task DeleteRefresh() // Uppdaterar efter förändring av innehållet.
    {
        if (Auxx.Flag)
        {
            Auxx.Flag = false;
            await OnInitializedAsync();
        }
    }

    private DocumentAdd? docsaveRef; // Filsparfönster.

    private async Task DocSaveControl(string id, byte doctype, string name) // Filsparfönster.
    {
        Auxx.GuidId = id;
        Auxx.DocType = doctype;
        Auxx.Name4Type = name;
        await docsaveRef!.Show();
    }

    private DocumentEdit? doceditRef; // Filredigeringsfönster.

    private void DocEditControl(int id, byte doctype) // Filredigeringsfönster.
    {
        Auxx.IntId = id;
        Auxx.DocType = doctype;
        Auxx.Documents = documents;
        doceditRef!.Show();
    }

    private List<AppUserDto> teachers = new();

    private List<CourseDto> courses = new();

    private List<DocumentDto> documents = new();

    private string Emptydb = "List of teachers";

    private string DocClass = "d-none";
    private string CourseClass = "d-none";
    private string classAvatar = "";

    private string Emptydbcolor = "headeroff";

    private bool IsCourse;

    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        xnav.SetReset('a');

        if (Auxx.PagRows == 0 || Auxx.PagRed == 0 || teachers.Count < 1) await LoadPag(); // Paginering.
        else
        {
            if (!Auxx.Flag) Auxx.classPag = "d-none"; // Förhindrar att knapparna synliggörs.
            Auxx.Flag = false;
        }

        teachers.Clear(); // Sökfunktionen kräver att listorna rensas.
        courses.Clear();
        documents.Clear();

        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        if (document is not null) documents = document.ToList(); // Hämtar alla dokument.

        var appuser = await appuserClient.GetAsync();

        if (appuser is not null)
        {
            foreach (var item in appuser)
            {
                // Sökfiltrering med IndexOf: förnamn eller efternamn.
                if (!string.IsNullOrWhiteSpace(searchString))
                {
                    if (item.UserRole == 2 && (item.FirstName.ToLower().IndexOf(searchString.ToLower()) != -1 ||
                    item.LastName.ToLower().IndexOf(searchString.ToLower()) != -1)) teachers.Add(item);
                }
                else
                {
                    if (item.UserRole == 2) teachers.Add(item);
                }
            }
            if (teachers.Count < 1) Emptydb = "No teachers !";
            if (!string.IsNullOrWhiteSpace(searchString) && teachers.Count < 1) Emptydb = "There is no teacher with that name...";
        }
        else
        {
            Emptydb = "No teachers !";
        }

        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");

        if (course is not null)
        {
            courses = course.ToList();
        }
    }

    private async Task LoadFile(string id, byte doctype, string name) // Öppnar filsparfönster.
    {
        if (DocClass == "text-white coursebtn") DocClass = "d-none"; // Stänger dokumentvisning.
        else
        {
            DocClass = "text-white coursebtn";
            await DocSaveControl(id, doctype, name);
        }
    }

    private void OpenCloseCourse() // Öppnar/stänger +knapp. CSS!
    {
        if (CourseClass == "d-none")
        CourseClass = "text-white coursebtn";
        else CourseClass = "d-none";
    }

    private void SortName() // Sorterar studenter efter deras namn.
    {
        teachers = teachers.OrderBy(o => o.FirstName).ToList();
    }

    private async Task GetCourse(string id, int courseId) // Lägger in ny kurs + feedback.
    {
        courseId = courseId + 100;
        await appuserClient.PreAsync(id, courseId);
        Emptydb = "This teacher has now been updated...";
        Emptydbcolor = "headeron";
        await Intermission(1000, false);
        Emptydb = "List of teachers";
        Emptydbcolor = "headeroff";
        Auxx.Flag = true;
        await OnInitializedAsync();
    }

    private bool PagProceed() // Paginering.
    {
        bool Proceed = false;

        // Om man söker ett objekt på en sida med ett högt nummer.
        if (Auxx.PagPage > (int)Math.Ceiling((decimal)this.teachers.Count / Auxx.PagRows)) Auxx.PagPage = 1;

        if ((Auxx.PagCount >= Auxx.PagRows * (Auxx.PagPage - 1) && Auxx.PagCount < Auxx.PagRows * Auxx.PagPage) || !Auxx.PagOn) Proceed = true;

        return Proceed;
    }

    private async Task PagBtnSet(int page, int pnum) // Paginering.
    {
        if (page < 1) page = 1; // Förhindrar 0-sidor och sidor högre än förekommande.
        if (page > pnum && pnum != 0) page = pnum;

        Auxx.PagPage = page;
        Auxx.classPag = "d-none";

        await OnInitializedAsync();
    }

    private void ShowMessControl(string description, string author, string timestamp)
    {
        xnav.SetMess("xnavmess", description + " by " + author + " Created: " + timestamp);
        xnav.SetReset('m');
    }

    private void ShowAvatar(string? id)
    {
        bool FindAvatar = false;

        @foreach (var doc in documents)
        {
            if (doc.UserId == id && doc.Id4Course == -2)
            {
                xnav.SetMessAvatar("xnavavatar", xClient.GetFilepath() + doc.NameIx + doc.DocName);
                xnav.SetReset('v');
                FindAvatar = true;
            }
        }

        if (!FindAvatar)
        {
            xnav.SetMessAvatar("d-none", "");
            xnav.SetReset('v');
        }
    }

    private async Task Intermission(int time, bool hide) // Paus.
    {
        if (hide)
        {
            xnav.SetReset('a');
        }
        base.StateHasChanged();
        await Task.Delay(time);
    }
}
