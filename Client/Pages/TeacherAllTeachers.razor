@page "/teacherallteachers"

@using System.Diagnostics;
@inject NavigationManager Navigation
@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Björn Lindqvist*@
@*Endast lärare har åtkomst hit*@

<PageTitle>Teacher all teachers</PageTitle>

<AuthorizeView Roles="Teacher">
    <Authorized>
<h4 class="@Emptydbcolor">@Emptydb</h4>

@if (teachers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Context="searchlmslexnet" Model="@teachers" OnSubmit="OnInitializedAsync">
        <span class="nav m-lg-auto input-group">
            <InputText class="form-control" @bind-Value="searchString" placeholder="First or last name" />
            <span class="nav m-lg-auto input-group-append">
                <button type="submit" class="btn m-lg-auto btn-outline-dark">Search</button>
            </span>
            <span class="nav m-lg-auto input-group-append">
                <button type="button" @onclick="SortName" class="btn m-lg-auto btn-outline-dark">Sort names</button>
            </span>
        </span>
    </EditForm>

    <DocumentAdd @ref="docsaveRef" /> @*Filsparfönster*@
    <DocumentEdit @ref="doceditRef" /> @*Filredigeringsfönster*@

    <table class="table">
        <thead>
            <tr>
                <th>Teacher</th>
                <th>Email</th>
                <th>Phone number</th>
                <th>Course</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in teachers)
            {
                <tr style="color: darkred">
                    <td>@data.FirstName @data.LastName</td>
                    <td>@data.Email</td>
                    <td>@data.PhoneNumber</td>
                    <td>
                        @foreach (var item in courses) // Hämtar kursen för användaren.
                        {
                            if (item.Id == data.CourseId)
                            {
                                IsCourse = true;
                                <span>@item.Name</span>
                            }
                        }
                        @if (!IsCourse)
                        {
                            <span>No course yet...</span>
                        }
                        @{IsCourse = false;}
                    </td>
                    <td class="noline">
                    @if (data.Id is not null)
                    {
                        // Laddar upp ett privat dokument till en särskild lärare.
                        <button type="button" class="text-white coursebtn" @onclick=" _ => LoadFile(data.Id, 10, data.FirstName + ' ' + data.LastName)"
                        title="Add document to teacher">+Doc</button> // CSS!
                        <div class="dropdoc">
                            <button type="button" class="@DocClass">Docs</button>
                            <div class="dropdoc-content">
                                @foreach (var doc in documents)
                                {
                                    if (doc.UserId == data.Id)
                                    {
                                        <a @onclick="_ => DocEditControl(doc.Id, 1)"
                                        title="File: @doc.Description by @doc.Author @doc.TimeStamp">@doc.Id. @doc.DocName</a> // Öppnar filen (dokumentet).
                                    }
                                }
                            </div>
                        </div>

                        <button type="button" class="text-white coursebtn" @onclick="OpenCloseCourse"
                        title="Add/change course for student">Course</button> // CSS!
                        <div class="dropuse">
                            <button type="button" class="@CourseClass">+</button>
                            <div class="dropuse-content">
                                @foreach (var item in courses)
                                {
                                    <a @onclick="_ => GetCourse(data.Id, item.Id)">@item.Name</a> // Lägger in en ny kurs för användaren.
                                }
                            </div>
                        </div>

                        <button type="button" class="oi oi-circle-x text-white delbtn" @onclick=" _ => DeletePage(data.Id)"
                        title="Delete or redirect user"></button> // CSS!
                    }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<DeleteTeacher @ref="deleteRef" /> @*Delete-fönster*@

</Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    private DeleteTeacher? deleteRef; // Delete-fönster.

    private async Task DeletePage(string id) // Delete-fönster.
    {
        Auxx.GuidId = id;
        await deleteRef!.Show();

        if (Auxx.Flag)
        {
            await OnInitializedAsync();
            Auxx.Flag = false;
        }
    }

    private DocumentAdd? docsaveRef; // Filsparfönster.

    private async Task DocSaveControl(string id, byte doctype, string name) // Filsparfönster.
    {
        Auxx.GuidId = id;
        Auxx.DocType = doctype;
        Auxx.Name4Type = name;
        await docsaveRef!.Show();
    }

    private DocumentEdit? doceditRef; // Filredigeringsfönster.

    private async Task DocEditControl(int id, byte doctype) // Filredigeringsfönster.
    {
        Auxx.IntId = id;
        Auxx.DocType = doctype;
        Auxx.documents = documents;
        doceditRef!.Show();

        if (Auxx.Flag)
        {
            await OnInitializedAsync();
            Auxx.Flag = false;
        }
    }

    private List<AppUserDto> teachers = new();

    private List<CourseDto> courses = new();

    private List<DocumentDto> documents = new();

    private string Emptydb = "List of teachers";

    private string DocClass = "d-none";
    private string CourseClass = "d-none";

    private string Emptydbcolor = "headeroff";

    private bool IsCourse;

    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        xnav.SetReset('a');

        var document = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        if (document is not null) documents = document.ToList(); // Hämtar alla dokument.

        teachers.Clear(); // Sökfunktionen kräver att listorna rensas.
        courses.Clear();

        var appuser = await appuserClient.GetAsync();

        if (appuser is not null)
        {
            foreach (var item in appuser)
            {
                // Sökfiltrering med IndexOf: förnamn eller efternamn.
                if (!string.IsNullOrWhiteSpace(searchString))
                {
                    if (item.UserRole == 2 && (item.FirstName.ToLower().IndexOf(searchString.ToLower()) != -1 ||
                    item.LastName.ToLower().IndexOf(searchString.ToLower()) != -1)) teachers.Add(item);
                }
                else
                {
                    if (item.UserRole == 2) teachers.Add(item);
                }
            }
            if (teachers.Count < 1) Emptydb = "No teachers !";
            if (!string.IsNullOrWhiteSpace(searchString) && teachers.Count < 1) Emptydb = "There is no teacher with that name...";
        }
        else
        {
            Emptydb = "No teachers !";
        }

        var course = await xClient.GetAsync<IEnumerable<CourseDto>>("api/Course");

        if (course is not null)
        {
            courses = course.ToList();
        }
    }

    private async Task LoadFile(string id, byte doctype, string name) // Öppnar filsparfönster.
    {
        if (DocClass == "text-white coursebtn") DocClass = "d-none"; // Stänger dokumentvisning.
        else
        {
            DocClass = "text-white coursebtn";
            await DocSaveControl(id, doctype, name);
        }
    }

    private void OpenCloseCourse() // Öppnar/stänger +knapp. CSS!
    {
        if (CourseClass == "d-none")
        CourseClass = "text-white coursebtn";
        else CourseClass = "d-none";
    }

    private void SortName() // Sorterar studenter efter deras namn.
    {
        teachers = teachers.OrderBy(o => o.FirstName).ToList();
    }

    private async Task GetCourse(string id, int courseId) // Lägger in ny kurs + feedback.
    {
        courseId = courseId + 100;
        await appuserClient.PreAsync(id, courseId);
        Emptydb = "This teacher has now been updated...";
        Emptydbcolor = "headeron";
        await Intermission(1000, false);
        Emptydb = "List of teachers";
        Emptydbcolor = "headeroff";
        Auxx.Flag = true;
        await OnInitializedAsync();
    }

    private async Task Intermission(int time, bool hide) // Paus.
    {
        if (hide)
        {
            xnav.SetReset('a');
        }
        base.StateHasChanged();
        await Task.Delay(time);
    }
}
