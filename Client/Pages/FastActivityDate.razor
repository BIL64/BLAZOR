@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Sukhrob Ilyosbekov - Stack Overflow*@
@*Endast lärare har åtkomst hit*@

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<AuthorizeView Roles="Teacher">
    <Authorized>
        <div class="toast-container p-3 position-relative @showClass" data-bs-autohide="true" data-bs-delay="5000">
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">@HeaderText</strong>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                </div>

                <div class="toast-body">
                    <EditForm Model="@xClient" Context="fastdatelmslexnet" OnSubmit="HandleSubmitDates">
                        <div class="form-group row">
                            <span class="col-6">
                                <label for="Startdate">Set start date</label>
                                <InputDate id="Startdate" class="form-control" @bind-Value="Sdate" />
                            </span>
                            <span class="col-6">
                                <label for="Enddate">Set end date</label>
                                <InputDate id="Enddate" class="form-control" @bind-Value="Edate" />
                            </span>
                        </div>
                        <div class="form-group m-3">
                            <button type="submit" class="text-white rembtn" style="margin-right: 15px">Save dates</button>
                            <button type="button" class="text-white remnot" @onclick="Close">NO</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    private List<ActivityDto> activities = new();

    private DateTime Sdate;

    private DateTime Edate;

    public async Task Show()
    {
        xnav.SetReset('a');

        var activity = await xClient.GetAsync<IEnumerable<ActivityDto>>("api/Activity");
        if (activity is not null) activities = activity.ToList();

        foreach (var act in activities)
        {
            if (act.Id == Auxx.IntId)
            {
                Sdate = act.StartDate;
                Edate = act.EndDate;
            }
        }

        HeaderText = "Edit dates for this activity...";
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    private async Task HandleSubmitDates()
    {
        var lact = new ActivityDto();
        lact.StartDate = Sdate;
        lact.EndDate = Edate;

        foreach (var act in activities)
        {
            if (act.Id == Auxx.IntId)
            {
                lact.Id = act.Id;
                lact.Name = act.Name;
                lact.Description = act.Description;
                lact.IsActive = act.IsActive;
                lact.ModuleId = act.ModuleId;
                lact.ActivityTypeId = act.ActivityTypeId;
                lact.ActivityTypeName = act.ActivityTypeName;
            }
        }

        try
        {
            await xClient.PutAsync<ActivityDto>(Auxx.IntId, lact, "api/Activity");
            xnav.SetDone("xnavdone", "The dates were saved.");
            xnav.SetReset('d');
        }
        catch
        {
            xnav.SetError("xnaverror", "An error occurred while saving to activity.");
            xnav.SetReset('e');
        }
        Auxx.Flag = true;
        Close(); // Ingen omnavigering eftersom det nollställer alla statiska variabler.
    }
}