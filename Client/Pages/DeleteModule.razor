@inject NavigationManager Navigation
@inject IXDtoClient xClient
@inject XNavMenu xnav
@attribute [Authorize]
@*Av Sukhrob Ilyosbekov - Stack Overflow*@
@*Endast lärare har åtkomst hit*@

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<AuthorizeView Roles ="Teacher">
    <Authorized>
    <div class="toast-container p-3 position-relative @showClass" data-bs-autohide="true" data-bs-delay="5000">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">@HeaderText</strong>
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
            </div>

            <div class="toast-body">
                <button type="button" class="text-white remyes" @onclick="DeleteNow" title="Remove this module and all its activities from the system">DELETE NOW</button>
                <button type="button" class="text-white remnot" @onclick="Close">NO</button>
            </div>
        </div>
    </div>

    </Authorized>
    <NotAuthorized>
        <h5 style="font-weight: bold; color: red">You are not authorized to visit this page...</h5>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    public void Show()
    {
        xnav.SetReset('a');

        HeaderText = "Remove this module...";
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    private async Task DeleteNow()
    {
        xnav.SetDone("xnavdone", "This module and all its documents and activities were deleted.");
        xnav.SetReset('d');
        StateHasChanged();
        await Task.Delay(3000);

        // Dokument som hör till modulens aktiviteter.
        var document1 = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");
        var activity1 = await xClient.GetAsync<IEnumerable<ActivityDto>>("api/Activity");

        if (activity1 is not null && document1 is not null)
        {
            foreach (var act in activity1)
            {
                if (act.ModuleId == Auxx.IntId) // Dess aktiviteter.
                {
                    foreach (var doc in document1) // Dess dokument.
                    {
                        if (doc.ActivityId == act.Id)
                        {
                            await xClient.DeleteFile(doc.NameIx.ToString() + doc.DocName);
                            await xClient.RemAsync(doc.Id, "api/Document");
                        }
                    }
                }
            }
        }

        // Aktiviteter som hör till modulen.
        var activity2 = await xClient.GetAsync<IEnumerable<ActivityDto>>("api/Activity");

        if (activity2 is not null)
        {
            foreach (var act in activity2)
            {
                if (act.ModuleId == Auxx.IntId) // Dess aktiviteter.
                {
                    await xClient.RemAsync(act.Id, "api/Activity");
                }
            }
        }

        // Dokument som hör till modulen.
        var document2 = await xClient.GetAsync<IEnumerable<DocumentDto>>("api/Document");

        if (document2 is not null)
        {
            foreach (var doc in document2)
            {
                if (doc.ModuleId == Auxx.IntId) // Dess dokument.
                {
                    await xClient.DeleteFile(doc.NameIx.ToString() + doc.DocName);
                    await xClient.RemAsync(doc.Id, "api/Document");
                }
            }
        }

        await xClient.RemAsync(Auxx.IntId, "api/Module");
        Navigation.NavigateTo($"/coursedetail/{Auxx.CourseId}", true);
        Close();
    }
}