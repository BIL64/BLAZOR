@inject IXDtoClient xClient
@inject XLangDetail xdet
@inject XLangEdit xedi
@inject XLangStudent xstu
@inject XLangTeacher xtea
@inject XLangToast xtoa
@inject XNavMenu xnav
@*Toast component by Björn Lindqvist*@
@*Endast för lärare*@

<div class="toast-container p-3 @showClass"
    style="position: fixed; top: auto; top: @(xnav.Pos_V)px; margin-left: @(xnav.Pos_H)px; z-index: 5" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" style="background-color: rgb(@ColorR, @ColorG, @ColorB)">
        <div class="toast-header" @onmouseup=" _ => xnav.Mouse('U', _)" @onmousedown=" _ => xnav.Mouse('D', _)"
            @onmousemove=" _ => xnav.Mouse('M', _)" @onmouseout=" _ => xnav.Mouse('M', _)">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body">
            <EditForm Model="@xClient" Context="teachersettingslmslexnet" OnSubmit="HandleSubmitCopy">
                <div class="form-group text-white m-3">
                    <InputCheckbox id="Register" class="form-check-inline" @bind-Value="IsReg" />
                    <label for="Register">Allow visitors to register</label>
                </div>
                <div class="form-group text-white m-3">
                    <InputCheckbox id="Notes" class="form-check-inline" @bind-Value="IsNote" />
                    <label for="Notes">Show notepad</label>
                </div>
                <fieldset class="form-group" style="border: 1px solid white">
                    <legend class="text-white w-auto" style="font-size: 0.9rem; font-style: italic;
                        position: relative; top: -11px; left: 60px; background-color: rgb(@ColorR, @ColorG, @ColorB)">
                        &nbsp;language selection&nbsp;
                    </legend>
                    <InputRadioGroup Name="DocRadio" @bind-Value="LangSelect">
                        <div class="form-group text-white" style="margin: 0 0 5px 15px">
                            <InputRadio id="Select0" class="form-check-inline" Value="0" />
                            <label for="Select0">English</label>
                        </div>
                        <div class="form-group text-white" style="margin: 0 0 5px 15px">
                            <InputRadio id="Select1" class="form-check-inline" Value="1" />
                            <label for="Select1">Swedish</label>
                        </div>
                        @* <div class="form-group text-white" style="margin: 0 0 5px 15px">
                            <InputRadio id="Select2" class="form-check-inline" Value="2" />
                            <label for="Select2">Deutsch</label>
                        </div>
                        <div class="form-group text-white" style="margin: 0 0 5px 15px">
                            <InputRadio id="Select3" class="form-check-inline" Value="3" />
                            <label for="Select3">Français</label>
                        </div> *@
                    </InputRadioGroup>
                </fieldset><br />
                <fieldset class="form-group" style="border: 1px solid white">
                    <legend class="text-white w-auto" style="font-size: 0.9rem; font-style: italic;
                        position: relative; top: -11px; left: 60px; background-color: rgb(@ColorR, @ColorG, @ColorB)">
                        &nbsp;color selection RGB&nbsp;
                    </legend>
                    <div class="form-group text-white m-1">
                        <InputNumber id="rgb-r" class="form-control-inline col-2 mx-2" style="font-size: 0.75rem"
                            @bind-Value="ColorR" min="0" max="225" />
                        <label for="rgb-r">Sidebar Color - Red</label>
                    </div>
                    <div class="form-group text-white m-1">
                        <InputNumber id="rgb-g" class="form-control-inline col-2 mx-2" style="font-size: 0.75rem"
                            @bind-Value="ColorG" min="0" max="225" />
                        <label for="rgb-g">Sidebar Color - Green</label>
                    </div>
                    <div class="form-group text-white m-1">
                        <InputNumber id="rgb-b" class="form-control-inline col-2 mx-2" style="font-size: 0.75rem"
                            @bind-Value="ColorB" min="0" max="225" />
                        <label for="rgb-r">Sidebar Color - Blue</label>
                    </div>
                    <div class="form-group text-white m-3">
                        <InputCheckbox id="Standard" class="form-check-inline" @bind-Value="IsStandard" />
                        <label for="Standard">Standard settings</label>
                    </div>
                </fieldset>
                <div class="form-group text-white m-2">
                    <label for="filesize">Maximum file size: </label>
                    <InputNumber id="filesize" class="form-control-inline col-3 mx-2" style="font-size: 0.75rem"
                    @bind-Value="maxFileSize" min="5120" />
                </div>
                <div class="form-group text-white m-2">
                    <InputCheckbox id="onemegabyte" class="form-check-inline" @bind-Value="IsFSize" />
                    <label for="onemegabyte">Standard value (1Mb)</label>
                </div>
                <div class="form-group text-white m-2">
                    <label for="avatarsize">Maximum avatar size: </label>
                    <InputNumber id="avatarsize" class="form-control-inline col-3 mx-2" style="font-size: 0.75rem"
                    @bind-Value="maxAvatarSize" min="2048" />
                </div>
                <div class="form-group text-white m-2">
                    <InputCheckbox id="hundredkilos" class="form-check-inline" @bind-Value="IsASize" />
                    <label for="hundredkilos">Standard value (100kb)</label>
                </div><br />
                <div>
                    <button type="submit" class="text-white rembtn" style="margin-right: 15px"
                        title=@xtoa.TxtTitle[1]>@xtoa.TxtButton[6]</button> @* Save *@
                    <button type="button" class="text-white remnot" @onclick="Close">@xtoa.TxtButton[0]</button> @* NO *@
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    private string HeaderText = string.Empty;
    private string showClass = "d-none";
    private int LangSelect; // Måste vara int!
    private bool IsReg;
    private bool IsNote;
    private bool IsFSize;
    private bool IsASize;

    private bool IsStandard;
    private int ColorR;
    private int ColorG;
    private int ColorB;
    private long maxFileSize;
    private long maxAvatarSize;

    public async Task Show()
    {
        xnav.SetReset('a');

        var dim = await xClient.GetWindow(); // Hämtar aktuell skärmstorlek.
        xnav.Pos_H = (int)Math.Round(dim.Width * 0.08); // 08%
        xnav.Pos_V = (int)Math.Round(dim.Height * 0.2); // 20%

        var auxiliary = await xClient.GetAsync<AuxiliaryDto>(1, "api/Auxiliary");
        if (auxiliary is not null)
        {
            // Hämtar maximal filstorlek.
            if (auxiliary.MaxFileSize == 1000448) IsFSize = true; else IsFSize = false;
            maxFileSize = auxiliary.MaxFileSize;
            // Hämtar maximal avatarstorlek.
            if (auxiliary.MaxAvatarSize == 100352) IsASize = true; else IsASize = false;
            maxAvatarSize = auxiliary.MaxAvatarSize;
        }

        if (xnav.ClassRegStatus == "regon") IsReg = true; else IsReg = false;

        if (await xClient.GetStorage<string>("LMS_Note") == "False") IsNote = false;
        else IsNote = true;

        if (await xClient.GetStorage<string>("LMS_Lang") == "EN") LangSelect = 0;
        else if (await xClient.GetStorage<string>("LMS_Lang") == "SV") LangSelect = 1;
        else if (await xClient.GetStorage<string>("LMS_Lang") == "DE") LangSelect = 2;
        else if (await xClient.GetStorage<string>("LMS_Lang") == "FR") LangSelect = 3;
        else LangSelect = 0;

        // Hämtar färgkoder från lokal storage.
        if (await xClient.GetStorage<string>("LMS_C_Standard") == "False") IsStandard = false;
        else IsStandard = true;

        string LScolor = await GetLS("LMS_C-R");
        if (LScolor is not null && LScolor != "") ColorR = byte.Parse(LScolor); else ColorR = xnav.ColorRGB[0];
        LScolor = await GetLS("LMS_C-G");
        if (LScolor is not null && LScolor != "") ColorG = byte.Parse(LScolor); else ColorG = xnav.ColorRGB[1];
        LScolor = await GetLS("LMS_C-B");
        if (LScolor is not null && LScolor != "") ColorB = byte.Parse(LScolor); else ColorB = xnav.ColorRGB[2];

        if (IsStandard)
        {
            ColorR = xnav.ColorRGB[0];
            ColorG = xnav.ColorRGB[1];
            ColorB = xnav.ColorRGB[2];
        }

        HeaderText = "Options...";
        showClass = "d-block";
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        showClass = "d-none";
        StateHasChanged();
    }

    private async Task HandleSubmitCopy()
    {
        var laux = new AuxiliaryDto
        {
            Id = 1,
            RegClass = "d-block",
            MaxFileSize = maxFileSize,
            MaxAvatarSize = maxAvatarSize
        };

        if (IsFSize)
        {
            laux.MaxFileSize = 1000448;
            try
            {
                await xClient.PutAsync<AuxiliaryDto>(1, laux, "api/Auxiliary");
            }
            catch
            {
                xnav.SetError("DB max file size falure. Id = 1 and MaxFileSize = 1000448");
                xnav.SetReset('e');
            }
        }

        if (!IsFSize)
        {
            laux.MaxFileSize = maxFileSize;
            try
            {
                await xClient.PutAsync<AuxiliaryDto>(1, laux, "api/Auxiliary");
            }
            catch
            {
                xnav.SetError("DB max file size falure. Id = 1 and MaxFileSize = long integer");
                xnav.SetReset('e');
            }
        }

        if (IsASize)
        {
            laux.MaxAvatarSize = 100352;
            try
            {
                await xClient.PutAsync<AuxiliaryDto>(1, laux, "api/Auxiliary");
            }
            catch
            {
                xnav.SetError("DB max avatar size falure. Id = 1 and MaxAvatarSize = 100352");
                xnav.SetReset('e');
            }
        }

        if (!IsASize)
        {
            laux.MaxAvatarSize = maxAvatarSize;
            try
            {
                await xClient.PutAsync<AuxiliaryDto>(1, laux, "api/Auxiliary");
            }
            catch
            {
                xnav.SetError("DB max avatar size falure. Id = 1 and MaxAvatarSize = long integer");
                xnav.SetReset('e');
            }
        }

        if (IsReg)
        {
            laux.RegClass = "d-block";
            try
            {
                await xClient.PutAsync<AuxiliaryDto>(1, laux, "api/Auxiliary");
            }
            catch
            {
                xnav.SetError("DB register falure. Id = 1 and RegClass = ”d-block” or RegClass = ”d-none”");
                xnav.SetReset('e');
            }
            xnav.SetReg(true);
        }

        if (!IsReg)
        {
            laux.RegClass = "d-none";
            try
            {
                await xClient.PutAsync<AuxiliaryDto>(1, laux, "api/Auxiliary");
            }
            catch
            {
                xnav.SetError("DB register falure. Id = 1 and RegClass = ”d-block” or RegClass = ”d-none”");
                xnav.SetReset('e');
            }
            xnav.SetReg(false);
        }

        try
        {
            await xClient.SetStorage("LMS_Note", IsNote.ToString());
        }
        catch
        {
            xnav.SetError("An error occurred while saving to local storage.");
            xnav.SetReset('e');
        }

        try
        {
            if (LangSelect == 0)
            {
                await xClient.SetStorage("LMS_Lang", "EN");
                xdet.SetLanguage_EN();
                xedi.SetLanguage_EN();
                xstu.SetLanguage_EN();
                xtea.SetLanguage_EN();
                xtoa.SetLanguage_EN();
            }
            if (LangSelect == 1)
            {
                await xClient.SetStorage("LMS_Lang", "SV");
                xdet.SetLanguage_SV();
                xedi.SetLanguage_SV();
                xstu.SetLanguage_SV();
                xtea.SetLanguage_SV();
                xtoa.SetLanguage_SV();
            }
            if (LangSelect == 2)
            {
                await xClient.SetStorage("LMS_Lang", "DE");
                xdet.SetLanguage_DE();
                xedi.SetLanguage_DE();
                xstu.SetLanguage_DE();
                xtea.SetLanguage_DE();
                xtoa.SetLanguage_DE();
            }
            if (LangSelect == 3)
            {
                await xClient.SetStorage("LMS_Lang", "FR");
                xdet.SetLanguage_FR();
                xedi.SetLanguage_FR();
                xstu.SetLanguage_FR();
                xtea.SetLanguage_FR();
                xtoa.SetLanguage_FR();
            }
        }
        catch
        {
            xnav.SetError("An error occurred while saving to local storage.");
            xnav.SetReset('e');
        }

        try
        {
            await xClient.SetStorage("LMS_C_Standard", IsStandard.ToString());
            await xClient.SetStorage("LMS_C-R", ColorR.ToString());
            await xClient.SetStorage("LMS_C-G", ColorG.ToString());
            await xClient.SetStorage("LMS_C-B", ColorB.ToString());
        }
        catch
        {
            xnav.SetError("An error occurred while saving to local storage.");
            xnav.SetReset('e');
        }

        Close(); // En omnavigering här nollställer alla variabler inklusive statiska.
    }

    private async Task<string> GetLS(string target) // Hämtar från LocalStorage.
    {
        var response = await xClient.GetStorage<string>(target);
        if (response is not null) return response;
        else return string.Empty;
    }
}