@inherits LayoutComponentBase
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IAppUserDtoClient appuserClient
@inject IXDtoClient xClient
@inject XNavMenu xnav

<div class="page">
    <div class="sidebar" style="@colorStyle">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 auth">
            <LoginDisplay />
            @*<a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>*@
        </div>

        <article class="content px-4">
            @Body
            <ToastStudentSettings @ref="setting1Ref" /> @*Inställningar för studenter*@
            <ToastTeacherSettings @ref="setting2Ref" /> @*Inställningar för lärare*@
            @if (xnav.IsClickSett) // När man klickar på inställningar.
            {
                if (xnav.MainRole == 1) setting1Ref!.Show().GetAwaiter(); // GetAwaiter istället för await här!
                if (xnav.MainRole == 2) setting2Ref!.Show().GetAwaiter();
                xnav.SetClickSett(false);
            }
        </article>

        @if (xnav.JohnDoe) // Hjälp vid uppstart när man har populerat Min eller Max.
        {
            // Om det bara finns en enda lärare och med namnet John Doe så visas denna info om lösenord.
            <footer class="mt-4 p-4">
                @foreach (var item in johndoe)
                {
                    if (johndoe.Count < 2 && item.FirstName == "John" && item.LastName == "Doe")
                    {
                        <div style="color: gray">Email for the teacher John Doe:</div>
                        <div>John@Doe.se</div>
                        <div style="color: gray">John Doe's password:</div>
                        <div>PassTeacher@Word00!</div><br />
                        <div style="color: gray">Password for seeded students:</div>
                        <div>PassStudent@Word00!</div>
                    }
                }
            </footer>
        }
    </main>
</div>

@code {

    private ToastStudentSettings? setting1Ref; // Iställningar student.
    private ToastTeacherSettings? setting2Ref; // Iställningar lärare.

    private List<AppUserDto> johndoe = new(); // De med lärarrollen.

    private bool IsStandard;
    private byte ColorR;
    private byte ColorG;
    private byte ColorB;
    private string colorStyle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;

        var appuser = await appuserClient.GetAsync();

        if (appuser is not null)
        {
            foreach (var item in appuser)
            {
                if (item.UserRole == 2) johndoe.Add(item); // Hämtar endast användare med lärarrollen.
            }
        }

        // Hämtar färgkoder från lokal storage.
        if (await xClient.GetStorage<string>("LMS_C_Standard") == "False") IsStandard = false;
        else IsStandard = true;

        string LScolor = await xClient.GetStorage<string>("LMS_C-R");
        if (LScolor is not null && LScolor != "") ColorR = byte.Parse(LScolor); else ColorR = xnav.ColorRGB[0];
        LScolor = await xClient.GetStorage<string>("LMS_C-G");
        if (LScolor is not null && LScolor != "") ColorG = byte.Parse(LScolor); else ColorG = xnav.ColorRGB[1];
        LScolor = await xClient.GetStorage<string>("LMS_C-B");
        if (LScolor is not null && LScolor != "") ColorB = byte.Parse(LScolor); else ColorB = xnav.ColorRGB[2];

        if (IsStandard)
        {
            ColorR = xnav.ColorRGB[0];
            ColorG = xnav.ColorRGB[1];
            ColorB = xnav.ColorRGB[2];
        }
        colorStyle = $"background-image: linear-gradient(180deg, rgb(80, 35, 60) 0%, rgb({ColorR}, {ColorG}, {ColorB}) 170%)";

        xnav.OnChange += StateHasChanged;
    }
}